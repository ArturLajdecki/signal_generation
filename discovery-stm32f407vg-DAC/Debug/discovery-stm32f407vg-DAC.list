
discovery-stm32f407vg-DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000816c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b88  08008300  08008300  00018300  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e88  08008e88  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008e88  08008e88  00018e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e90  08008e90  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e90  08008e90  00018e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e94  08008e94  00018e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  08008e98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014bc  200000d4  08008f6c  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001590  08008f6c  00021590  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001deb2  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c32  00000000  00000000  0003dfb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001680  00000000  00000000  00041be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001500  00000000  00000000  00043268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024839  00000000  00000000  00044768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a0cf  00000000  00000000  00068fa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1ffc  00000000  00000000  00083070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015506c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006620  00000000  00000000  001550c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d4 	.word	0x200000d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080082e4 	.word	0x080082e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d8 	.word	0x200000d8
 80001cc:	080082e4 	.word	0x080082e4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b98c 	b.w	8000edc <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f824 	bl	8000c18 <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__aeabi_d2ulz>:
 8000bdc:	b5d0      	push	{r4, r6, r7, lr}
 8000bde:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <__aeabi_d2ulz+0x34>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	4606      	mov	r6, r0
 8000be4:	460f      	mov	r7, r1
 8000be6:	f7ff fcff 	bl	80005e8 <__aeabi_dmul>
 8000bea:	f7ff ffbf 	bl	8000b6c <__aeabi_d2uiz>
 8000bee:	4604      	mov	r4, r0
 8000bf0:	f7ff fc80 	bl	80004f4 <__aeabi_ui2d>
 8000bf4:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <__aeabi_d2ulz+0x38>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f7ff fcf6 	bl	80005e8 <__aeabi_dmul>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	460b      	mov	r3, r1
 8000c00:	4630      	mov	r0, r6
 8000c02:	4639      	mov	r1, r7
 8000c04:	f7ff fb38 	bl	8000278 <__aeabi_dsub>
 8000c08:	f7ff ffb0 	bl	8000b6c <__aeabi_d2uiz>
 8000c0c:	4621      	mov	r1, r4
 8000c0e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c10:	3df00000 	.word	0x3df00000
 8000c14:	41f00000 	.word	0x41f00000

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <MX_DAC_Init>:
DMA_HandleTypeDef hdma_dac1;
DMA_HandleTypeDef hdma_dac2;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <MX_DAC_Init+0x64>)
 8000ef0:	4a15      	ldr	r2, [pc, #84]	; (8000f48 <MX_DAC_Init+0x68>)
 8000ef2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000ef4:	4813      	ldr	r0, [pc, #76]	; (8000f44 <MX_DAC_Init+0x64>)
 8000ef6:	f001 f862 	bl	8001fbe <HAL_DAC_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000f00:	f000 faba 	bl	8001478 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000f04:	2324      	movs	r3, #36	; 0x24
 8000f06:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f0c:	463b      	mov	r3, r7
 8000f0e:	2200      	movs	r2, #0
 8000f10:	4619      	mov	r1, r3
 8000f12:	480c      	ldr	r0, [pc, #48]	; (8000f44 <MX_DAC_Init+0x64>)
 8000f14:	f001 f962 	bl	80021dc <HAL_DAC_ConfigChannel>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000f1e:	f000 faab 	bl	8001478 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T5_TRGO;
 8000f22:	231c      	movs	r3, #28
 8000f24:	603b      	str	r3, [r7, #0]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000f26:	463b      	mov	r3, r7
 8000f28:	2210      	movs	r2, #16
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4805      	ldr	r0, [pc, #20]	; (8000f44 <MX_DAC_Init+0x64>)
 8000f2e:	f001 f955 	bl	80021dc <HAL_DAC_ConfigChannel>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_DAC_Init+0x5c>
  {
    Error_Handler();
 8000f38:	f000 fa9e 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000168 	.word	0x20000168
 8000f48:	40007400 	.word	0x40007400

08000f4c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	; 0x28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a49      	ldr	r2, [pc, #292]	; (8001090 <HAL_DAC_MspInit+0x144>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	f040 808c 	bne.w	8001088 <HAL_DAC_MspInit+0x13c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000f70:	2300      	movs	r3, #0
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	4b47      	ldr	r3, [pc, #284]	; (8001094 <HAL_DAC_MspInit+0x148>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f78:	4a46      	ldr	r2, [pc, #280]	; (8001094 <HAL_DAC_MspInit+0x148>)
 8000f7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000f7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f80:	4b44      	ldr	r3, [pc, #272]	; (8001094 <HAL_DAC_MspInit+0x148>)
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	4b40      	ldr	r3, [pc, #256]	; (8001094 <HAL_DAC_MspInit+0x148>)
 8000f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f94:	4a3f      	ldr	r2, [pc, #252]	; (8001094 <HAL_DAC_MspInit+0x148>)
 8000f96:	f043 0301 	orr.w	r3, r3, #1
 8000f9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9c:	4b3d      	ldr	r3, [pc, #244]	; (8001094 <HAL_DAC_MspInit+0x148>)
 8000f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000fa8:	2330      	movs	r3, #48	; 0x30
 8000faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fac:	2303      	movs	r3, #3
 8000fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4837      	ldr	r0, [pc, #220]	; (8001098 <HAL_DAC_MspInit+0x14c>)
 8000fbc:	f001 fdea 	bl	8002b94 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8000fc0:	4b36      	ldr	r3, [pc, #216]	; (800109c <HAL_DAC_MspInit+0x150>)
 8000fc2:	4a37      	ldr	r2, [pc, #220]	; (80010a0 <HAL_DAC_MspInit+0x154>)
 8000fc4:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8000fc6:	4b35      	ldr	r3, [pc, #212]	; (800109c <HAL_DAC_MspInit+0x150>)
 8000fc8:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000fcc:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fce:	4b33      	ldr	r3, [pc, #204]	; (800109c <HAL_DAC_MspInit+0x150>)
 8000fd0:	2240      	movs	r2, #64	; 0x40
 8000fd2:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fd4:	4b31      	ldr	r3, [pc, #196]	; (800109c <HAL_DAC_MspInit+0x150>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8000fda:	4b30      	ldr	r3, [pc, #192]	; (800109c <HAL_DAC_MspInit+0x150>)
 8000fdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fe0:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000fe2:	4b2e      	ldr	r3, [pc, #184]	; (800109c <HAL_DAC_MspInit+0x150>)
 8000fe4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fe8:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000fea:	4b2c      	ldr	r3, [pc, #176]	; (800109c <HAL_DAC_MspInit+0x150>)
 8000fec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ff0:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8000ff2:	4b2a      	ldr	r3, [pc, #168]	; (800109c <HAL_DAC_MspInit+0x150>)
 8000ff4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ff8:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 8000ffa:	4b28      	ldr	r3, [pc, #160]	; (800109c <HAL_DAC_MspInit+0x150>)
 8000ffc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001000:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001002:	4b26      	ldr	r3, [pc, #152]	; (800109c <HAL_DAC_MspInit+0x150>)
 8001004:	2200      	movs	r2, #0
 8001006:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001008:	4824      	ldr	r0, [pc, #144]	; (800109c <HAL_DAC_MspInit+0x150>)
 800100a:	f001 f9c1 	bl	8002390 <HAL_DMA_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <HAL_DAC_MspInit+0xcc>
    {
      Error_Handler();
 8001014:	f000 fa30 	bl	8001478 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a20      	ldr	r2, [pc, #128]	; (800109c <HAL_DAC_MspInit+0x150>)
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	4a1f      	ldr	r2, [pc, #124]	; (800109c <HAL_DAC_MspInit+0x150>)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 8001024:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <HAL_DAC_MspInit+0x158>)
 8001026:	4a20      	ldr	r2, [pc, #128]	; (80010a8 <HAL_DAC_MspInit+0x15c>)
 8001028:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 800102a:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <HAL_DAC_MspInit+0x158>)
 800102c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001030:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001032:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <HAL_DAC_MspInit+0x158>)
 8001034:	2240      	movs	r2, #64	; 0x40
 8001036:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001038:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <HAL_DAC_MspInit+0x158>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 800103e:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <HAL_DAC_MspInit+0x158>)
 8001040:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001044:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001046:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <HAL_DAC_MspInit+0x158>)
 8001048:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800104c:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800104e:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <HAL_DAC_MspInit+0x158>)
 8001050:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001054:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <HAL_DAC_MspInit+0x158>)
 8001058:	f44f 7280 	mov.w	r2, #256	; 0x100
 800105c:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_HIGH;
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <HAL_DAC_MspInit+0x158>)
 8001060:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001064:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001066:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <HAL_DAC_MspInit+0x158>)
 8001068:	2200      	movs	r2, #0
 800106a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 800106c:	480d      	ldr	r0, [pc, #52]	; (80010a4 <HAL_DAC_MspInit+0x158>)
 800106e:	f001 f98f 	bl	8002390 <HAL_DMA_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <HAL_DAC_MspInit+0x130>
    {
      Error_Handler();
 8001078:	f000 f9fe 	bl	8001478 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac2);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4a09      	ldr	r2, [pc, #36]	; (80010a4 <HAL_DAC_MspInit+0x158>)
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	4a08      	ldr	r2, [pc, #32]	; (80010a4 <HAL_DAC_MspInit+0x158>)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001088:	bf00      	nop
 800108a:	3728      	adds	r7, #40	; 0x28
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40007400 	.word	0x40007400
 8001094:	40023800 	.word	0x40023800
 8001098:	40020000 	.word	0x40020000
 800109c:	20000108 	.word	0x20000108
 80010a0:	40026088 	.word	0x40026088
 80010a4:	2000017c 	.word	0x2000017c
 80010a8:	400260a0 	.word	0x400260a0

080010ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <MX_DMA_Init+0x4c>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a0f      	ldr	r2, [pc, #60]	; (80010f8 <MX_DMA_Init+0x4c>)
 80010bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <MX_DMA_Init+0x4c>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	2010      	movs	r0, #16
 80010d4:	f000 ff3d 	bl	8001f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80010d8:	2010      	movs	r0, #16
 80010da:	f000 ff56 	bl	8001f8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	2011      	movs	r0, #17
 80010e4:	f000 ff35 	bl	8001f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80010e8:	2011      	movs	r0, #17
 80010ea:	f000 ff4e 	bl	8001f8a <HAL_NVIC_EnableIRQ>

}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40023800 	.word	0x40023800

080010fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	; 0x28
 8001100:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
 8001110:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	4b38      	ldr	r3, [pc, #224]	; (80011f8 <MX_GPIO_Init+0xfc>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a37      	ldr	r2, [pc, #220]	; (80011f8 <MX_GPIO_Init+0xfc>)
 800111c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b35      	ldr	r3, [pc, #212]	; (80011f8 <MX_GPIO_Init+0xfc>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	4b31      	ldr	r3, [pc, #196]	; (80011f8 <MX_GPIO_Init+0xfc>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a30      	ldr	r2, [pc, #192]	; (80011f8 <MX_GPIO_Init+0xfc>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b2e      	ldr	r3, [pc, #184]	; (80011f8 <MX_GPIO_Init+0xfc>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	4b2a      	ldr	r3, [pc, #168]	; (80011f8 <MX_GPIO_Init+0xfc>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a29      	ldr	r2, [pc, #164]	; (80011f8 <MX_GPIO_Init+0xfc>)
 8001154:	f043 0310 	orr.w	r3, r3, #16
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b27      	ldr	r3, [pc, #156]	; (80011f8 <MX_GPIO_Init+0xfc>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0310 	and.w	r3, r3, #16
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	4b23      	ldr	r3, [pc, #140]	; (80011f8 <MX_GPIO_Init+0xfc>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a22      	ldr	r2, [pc, #136]	; (80011f8 <MX_GPIO_Init+0xfc>)
 8001170:	f043 0308 	orr.w	r3, r3, #8
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <MX_GPIO_Init+0xfc>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0308 	and.w	r3, r3, #8
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	603b      	str	r3, [r7, #0]
 8001186:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <MX_GPIO_Init+0xfc>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a1b      	ldr	r2, [pc, #108]	; (80011f8 <MX_GPIO_Init+0xfc>)
 800118c:	f043 0302 	orr.w	r3, r3, #2
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <MX_GPIO_Init+0xfc>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	603b      	str	r3, [r7, #0]
 800119c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800119e:	2200      	movs	r2, #0
 80011a0:	21e0      	movs	r1, #224	; 0xe0
 80011a2:	4816      	ldr	r0, [pc, #88]	; (80011fc <MX_GPIO_Init+0x100>)
 80011a4:	f001 fe92 	bl	8002ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <MX_GPIO_Init+0x104>)
 80011b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011b2:	2302      	movs	r3, #2
 80011b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	4619      	mov	r1, r3
 80011bc:	4811      	ldr	r0, [pc, #68]	; (8001204 <MX_GPIO_Init+0x108>)
 80011be:	f001 fce9 	bl	8002b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011c2:	23e0      	movs	r3, #224	; 0xe0
 80011c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c6:	2301      	movs	r3, #1
 80011c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2300      	movs	r3, #0
 80011d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4619      	mov	r1, r3
 80011d8:	4808      	ldr	r0, [pc, #32]	; (80011fc <MX_GPIO_Init+0x100>)
 80011da:	f001 fcdb 	bl	8002b94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	2100      	movs	r1, #0
 80011e2:	2028      	movs	r0, #40	; 0x28
 80011e4:	f000 feb5 	bl	8001f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011e8:	2028      	movs	r0, #40	; 0x28
 80011ea:	f000 fece 	bl	8001f8a <HAL_NVIC_EnableIRQ>

}
 80011ee:	bf00      	nop
 80011f0:	3728      	adds	r7, #40	; 0x28
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40020c00 	.word	0x40020c00
 8001200:	10210000 	.word	0x10210000
 8001204:	40021000 	.word	0x40021000

08001208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800120e:	f000 fd2f 	bl	8001c70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001212:	f000 f853 	bl	80012bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001216:	f7ff ff71 	bl	80010fc <MX_GPIO_Init>
  MX_DMA_Init();
 800121a:	f7ff ff47 	bl	80010ac <MX_DMA_Init>
  MX_DAC_Init();
 800121e:	f7ff fe5f 	bl	8000ee0 <MX_DAC_Init>
  MX_TIM7_Init();
 8001222:	f000 fb5d 	bl	80018e0 <MX_TIM7_Init>
  MX_TIM2_Init();
 8001226:	f000 fac3 	bl	80017b0 <MX_TIM2_Init>
  MX_SPI1_Init();
 800122a:	f000 f92b 	bl	8001484 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800122e:	f000 fc21 	bl	8001a74 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 8001232:	f000 fb09 	bl	8001848 <MX_TIM5_Init>
  MX_TIM1_Init();
 8001236:	f000 fa65 	bl	8001704 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

/* -------------------------------------------------------------------------------- */
/* -- TIMERS START -- */
/* -------------------------------------------------------------------------------- */
  HAL_TIM_Base_Start(&htim2);
 800123a:	4818      	ldr	r0, [pc, #96]	; (800129c <main+0x94>)
 800123c:	f002 fdcc 	bl	8003dd8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim5);
 8001240:	4817      	ldr	r0, [pc, #92]	; (80012a0 <main+0x98>)
 8001242:	f002 fdc9 	bl	8003dd8 <HAL_TIM_Base_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001246:	213c      	movs	r1, #60	; 0x3c
 8001248:	4816      	ldr	r0, [pc, #88]	; (80012a4 <main+0x9c>)
 800124a:	f002 fed3 	bl	8003ff4 <HAL_TIM_Encoder_Start>

/* -------------------------------------------------------------------------------- */
/* -- CREATE ENCODER -- */
/* -------------------------------------------------------------------------------- */
  encoder_struct_init(&encoder_1, &htim1);
 800124e:	4915      	ldr	r1, [pc, #84]	; (80012a4 <main+0x9c>)
 8001250:	4815      	ldr	r0, [pc, #84]	; (80012a8 <main+0xa0>)
 8001252:	f004 fa73 	bl	800573c <encoder_struct_init>

/* -------------------------------------------------------------------------------- */
/* -- LCD ST7735 SCREEN INIT -- */
/* -------------------------------------------------------------------------------- */
  ST7735_Init(1);
 8001256:	2001      	movs	r0, #1
 8001258:	f004 f972 	bl	8005540 <ST7735_Init>

/* -------------------------------------------------------------------------------- */
/* -- MENU INIT -- */
/* -------------------------------------------------------------------------------- */
  GUI_init();
 800125c:	f004 fd7c 	bl	8005d58 <GUI_init>
  Menu_Show();
 8001260:	f004 fb9a 	bl	8005998 <Menu_Show>

/* -------------------------------------------------------------------------------- */
/* -- WAVEFORMS INIT -- */
/* -------------------------------------------------------------------------------- */
  calcsin();
 8001264:	f000 fc80 	bl	8001b68 <calcsin>
  waveform_struct_init(&sine,&htim2,sine_val,N_s,1000,1,0);
 8001268:	2300      	movs	r3, #0
 800126a:	9301      	str	r3, [sp, #4]
 800126c:	2301      	movs	r3, #1
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80012ac <main+0xa4>
 8001274:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001278:	4a0d      	ldr	r2, [pc, #52]	; (80012b0 <main+0xa8>)
 800127a:	4908      	ldr	r1, [pc, #32]	; (800129c <main+0x94>)
 800127c:	480d      	ldr	r0, [pc, #52]	; (80012b4 <main+0xac>)
 800127e:	f004 fdad 	bl	8005ddc <waveform_struct_init>
/* -------------------------------------------------------------------------------- */
/* -- DAC START -- */
/* -------------------------------------------------------------------------------- */


HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, sine_val, N_s, DAC_ALIGN_12B_R);
 8001282:	2300      	movs	r3, #0
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	f44f 7300 	mov.w	r3, #512	; 0x200
 800128a:	4a09      	ldr	r2, [pc, #36]	; (80012b0 <main+0xa8>)
 800128c:	2100      	movs	r1, #0
 800128e:	480a      	ldr	r0, [pc, #40]	; (80012b8 <main+0xb0>)
 8001290:	f000 feb8 	bl	8002004 <HAL_DAC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	menu_encoder_event();
 8001294:	f000 f87c 	bl	8001390 <menu_encoder_event>
 8001298:	e7fc      	b.n	8001294 <main+0x8c>
 800129a:	bf00      	nop
 800129c:	200014a8 	.word	0x200014a8
 80012a0:	20001418 	.word	0x20001418
 80012a4:	20001460 	.word	0x20001460
 80012a8:	20001050 	.word	0x20001050
 80012ac:	447a0000 	.word	0x447a0000
 80012b0:	200004c0 	.word	0x200004c0
 80012b4:	20000fa0 	.word	0x20000fa0
 80012b8:	20000168 	.word	0x20000168

080012bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b094      	sub	sp, #80	; 0x50
 80012c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012c2:	f107 0320 	add.w	r3, r7, #32
 80012c6:	2230      	movs	r2, #48	; 0x30
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f005 fb9c 	bl	8006a08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d0:	f107 030c 	add.w	r3, r7, #12
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e0:	2300      	movs	r3, #0
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	4b28      	ldr	r3, [pc, #160]	; (8001388 <SystemClock_Config+0xcc>)
 80012e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e8:	4a27      	ldr	r2, [pc, #156]	; (8001388 <SystemClock_Config+0xcc>)
 80012ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ee:	6413      	str	r3, [r2, #64]	; 0x40
 80012f0:	4b25      	ldr	r3, [pc, #148]	; (8001388 <SystemClock_Config+0xcc>)
 80012f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012fc:	2300      	movs	r3, #0
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	4b22      	ldr	r3, [pc, #136]	; (800138c <SystemClock_Config+0xd0>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a21      	ldr	r2, [pc, #132]	; (800138c <SystemClock_Config+0xd0>)
 8001306:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800130a:	6013      	str	r3, [r2, #0]
 800130c:	4b1f      	ldr	r3, [pc, #124]	; (800138c <SystemClock_Config+0xd0>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001318:	2301      	movs	r3, #1
 800131a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800131c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001322:	2302      	movs	r3, #2
 8001324:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001326:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800132a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800132c:	2304      	movs	r3, #4
 800132e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001330:	23a8      	movs	r3, #168	; 0xa8
 8001332:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001334:	2302      	movs	r3, #2
 8001336:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001338:	2304      	movs	r3, #4
 800133a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800133c:	f107 0320 	add.w	r3, r7, #32
 8001340:	4618      	mov	r0, r3
 8001342:	f001 fdf5 	bl	8002f30 <HAL_RCC_OscConfig>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800134c:	f000 f894 	bl	8001478 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001350:	230f      	movs	r3, #15
 8001352:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001354:	2302      	movs	r3, #2
 8001356:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800135c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001360:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001362:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001366:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	2105      	movs	r1, #5
 800136e:	4618      	mov	r0, r3
 8001370:	f002 f856 	bl	8003420 <HAL_RCC_ClockConfig>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800137a:	f000 f87d 	bl	8001478 <Error_Handler>
  }
}
 800137e:	bf00      	nop
 8001380:	3750      	adds	r7, #80	; 0x50
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40023800 	.word	0x40023800
 800138c:	40007000 	.word	0x40007000

08001390 <menu_encoder_event>:

/* USER CODE BEGIN 4 */

void menu_encoder_event(void) {
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0

	  if( encoder_step_clockwise(&encoder_1) == true) {
 8001394:	480c      	ldr	r0, [pc, #48]	; (80013c8 <menu_encoder_event+0x38>)
 8001396:	f004 fa7d 	bl	8005894 <encoder_step_clockwise>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <menu_encoder_event+0x14>
		Menu_SelectNext();
 80013a0:	f004 fbd4 	bl	8005b4c <Menu_SelectNext>

	  }
	  if(encoder_step_counterclockwise(&encoder_1) == true) {
 80013a4:	4808      	ldr	r0, [pc, #32]	; (80013c8 <menu_encoder_event+0x38>)
 80013a6:	f004 fa8a 	bl	80058be <encoder_step_counterclockwise>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <menu_encoder_event+0x24>
		Menu_SelectPrev();
 80013b0:	f004 fc3a 	bl	8005c28 <Menu_SelectPrev>
	  }
	  if(encoder_enter(&encoder_1) == true) {
 80013b4:	4804      	ldr	r0, [pc, #16]	; (80013c8 <menu_encoder_event+0x38>)
 80013b6:	f004 fa97 	bl	80058e8 <encoder_enter>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <menu_encoder_event+0x34>
	  		Menu_Click();
 80013c0:	f004 fc98 	bl	8005cf4 <Menu_Click>
	   }
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20001050 	.word	0x20001050

080013cc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]


	static float result = 0;

			 switch(UART1_rxBuffer[1])
 80013d4:	4b25      	ldr	r3, [pc, #148]	; (800146c <HAL_UART_RxCpltCallback+0xa0>)
 80013d6:	785b      	ldrb	r3, [r3, #1]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d002      	beq.n	80013e2 <HAL_UART_RxCpltCallback+0x16>
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d01e      	beq.n	800141e <HAL_UART_RxCpltCallback+0x52>
					 result = result * 10 + ( UART1_rxBuffer[i]);
					 }
			     break;

			 default:
				 break;
 80013e0:	e03b      	b.n	800145a <HAL_UART_RxCpltCallback+0x8e>
				 for(int i=1; i<sizeof(UART1_rxBuffer); i++) {
 80013e2:	2301      	movs	r3, #1
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	e016      	b.n	8001416 <HAL_UART_RxCpltCallback+0x4a>
					 result = result * 10 + ( UART1_rxBuffer[i]);
 80013e8:	4b21      	ldr	r3, [pc, #132]	; (8001470 <HAL_UART_RxCpltCallback+0xa4>)
 80013ea:	edd3 7a00 	vldr	s15, [r3]
 80013ee:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80013f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013f6:	4a1d      	ldr	r2, [pc, #116]	; (800146c <HAL_UART_RxCpltCallback+0xa0>)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4413      	add	r3, r2
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	ee07 3a90 	vmov	s15, r3
 8001402:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001406:	ee77 7a27 	vadd.f32	s15, s14, s15
 800140a:	4b19      	ldr	r3, [pc, #100]	; (8001470 <HAL_UART_RxCpltCallback+0xa4>)
 800140c:	edc3 7a00 	vstr	s15, [r3]
				 for(int i=1; i<sizeof(UART1_rxBuffer); i++) {
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	3301      	adds	r3, #1
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2b0b      	cmp	r3, #11
 800141a:	d9e5      	bls.n	80013e8 <HAL_UART_RxCpltCallback+0x1c>
			     break;
 800141c:	e01d      	b.n	800145a <HAL_UART_RxCpltCallback+0x8e>
				 for(int i=1; i<sizeof(UART1_rxBuffer); i++) {
 800141e:	2301      	movs	r3, #1
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	e016      	b.n	8001452 <HAL_UART_RxCpltCallback+0x86>
					 result = result * 10 + ( UART1_rxBuffer[i]);
 8001424:	4b12      	ldr	r3, [pc, #72]	; (8001470 <HAL_UART_RxCpltCallback+0xa4>)
 8001426:	edd3 7a00 	vldr	s15, [r3]
 800142a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800142e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001432:	4a0e      	ldr	r2, [pc, #56]	; (800146c <HAL_UART_RxCpltCallback+0xa0>)
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	4413      	add	r3, r2
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	ee07 3a90 	vmov	s15, r3
 800143e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001442:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001446:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <HAL_UART_RxCpltCallback+0xa4>)
 8001448:	edc3 7a00 	vstr	s15, [r3]
				 for(int i=1; i<sizeof(UART1_rxBuffer); i++) {
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	3301      	adds	r3, #1
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	2b0b      	cmp	r3, #11
 8001456:	d9e5      	bls.n	8001424 <HAL_UART_RxCpltCallback+0x58>
			     break;
 8001458:	bf00      	nop
			 }


		 HAL_UART_Receive_DMA(&huart1, UART1_rxBuffer, sizeof(UART1_rxBuffer)); // Ponowne włączenie nasłuchiwania
 800145a:	220c      	movs	r2, #12
 800145c:	4903      	ldr	r1, [pc, #12]	; (800146c <HAL_UART_RxCpltCallback+0xa0>)
 800145e:	4805      	ldr	r0, [pc, #20]	; (8001474 <HAL_UART_RxCpltCallback+0xa8>)
 8001460:	f003 f943 	bl	80046ea <HAL_UART_Receive_DMA>

}
 8001464:	bf00      	nop
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20001040 	.word	0x20001040
 8001470:	200000f0 	.word	0x200000f0
 8001474:	20001538 	.word	0x20001538

08001478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800147c:	b672      	cpsid	i
}
 800147e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001480:	e7fe      	b.n	8001480 <Error_Handler+0x8>
	...

08001484 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001488:	4b18      	ldr	r3, [pc, #96]	; (80014ec <MX_SPI1_Init+0x68>)
 800148a:	4a19      	ldr	r2, [pc, #100]	; (80014f0 <MX_SPI1_Init+0x6c>)
 800148c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800148e:	4b17      	ldr	r3, [pc, #92]	; (80014ec <MX_SPI1_Init+0x68>)
 8001490:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001494:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001496:	4b15      	ldr	r3, [pc, #84]	; (80014ec <MX_SPI1_Init+0x68>)
 8001498:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800149c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800149e:	4b13      	ldr	r3, [pc, #76]	; (80014ec <MX_SPI1_Init+0x68>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014a4:	4b11      	ldr	r3, [pc, #68]	; (80014ec <MX_SPI1_Init+0x68>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <MX_SPI1_Init+0x68>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014b0:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <MX_SPI1_Init+0x68>)
 80014b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014b6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <MX_SPI1_Init+0x68>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014be:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <MX_SPI1_Init+0x68>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014c4:	4b09      	ldr	r3, [pc, #36]	; (80014ec <MX_SPI1_Init+0x68>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014ca:	4b08      	ldr	r3, [pc, #32]	; (80014ec <MX_SPI1_Init+0x68>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <MX_SPI1_Init+0x68>)
 80014d2:	220a      	movs	r2, #10
 80014d4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014d6:	4805      	ldr	r0, [pc, #20]	; (80014ec <MX_SPI1_Init+0x68>)
 80014d8:	f002 f99e 	bl	8003818 <HAL_SPI_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80014e2:	f7ff ffc9 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	200013c0 	.word	0x200013c0
 80014f0:	40013000 	.word	0x40013000

080014f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	; 0x28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a19      	ldr	r2, [pc, #100]	; (8001578 <HAL_SPI_MspInit+0x84>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d12b      	bne.n	800156e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	4b18      	ldr	r3, [pc, #96]	; (800157c <HAL_SPI_MspInit+0x88>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151e:	4a17      	ldr	r2, [pc, #92]	; (800157c <HAL_SPI_MspInit+0x88>)
 8001520:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001524:	6453      	str	r3, [r2, #68]	; 0x44
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <HAL_SPI_MspInit+0x88>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	4b11      	ldr	r3, [pc, #68]	; (800157c <HAL_SPI_MspInit+0x88>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a10      	ldr	r2, [pc, #64]	; (800157c <HAL_SPI_MspInit+0x88>)
 800153c:	f043 0302 	orr.w	r3, r3, #2
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b0e      	ldr	r3, [pc, #56]	; (800157c <HAL_SPI_MspInit+0x88>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800154e:	2328      	movs	r3, #40	; 0x28
 8001550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	2302      	movs	r3, #2
 8001554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155a:	2303      	movs	r3, #3
 800155c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800155e:	2305      	movs	r3, #5
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	4619      	mov	r1, r3
 8001568:	4805      	ldr	r0, [pc, #20]	; (8001580 <HAL_SPI_MspInit+0x8c>)
 800156a:	f001 fb13 	bl	8002b94 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800156e:	bf00      	nop
 8001570:	3728      	adds	r7, #40	; 0x28
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40013000 	.word	0x40013000
 800157c:	40023800 	.word	0x40023800
 8001580:	40020400 	.word	0x40020400

08001584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <HAL_MspInit+0x4c>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	4a0f      	ldr	r2, [pc, #60]	; (80015d0 <HAL_MspInit+0x4c>)
 8001594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001598:	6453      	str	r3, [r2, #68]	; 0x44
 800159a:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <HAL_MspInit+0x4c>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	603b      	str	r3, [r7, #0]
 80015aa:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <HAL_MspInit+0x4c>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	4a08      	ldr	r2, [pc, #32]	; (80015d0 <HAL_MspInit+0x4c>)
 80015b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b4:	6413      	str	r3, [r2, #64]	; 0x40
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <HAL_MspInit+0x4c>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800

080015d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <NMI_Handler+0x4>

080015da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015de:	e7fe      	b.n	80015de <HardFault_Handler+0x4>

080015e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <MemManage_Handler+0x4>

080015e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ea:	e7fe      	b.n	80015ea <BusFault_Handler+0x4>

080015ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <UsageFault_Handler+0x4>

080015f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001620:	f000 fb78 	bl	8001d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}

08001628 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 800162c:	4802      	ldr	r0, [pc, #8]	; (8001638 <DMA1_Stream5_IRQHandler+0x10>)
 800162e:	f001 f847 	bl	80026c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000108 	.word	0x20000108

0800163c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 8001640:	4802      	ldr	r0, [pc, #8]	; (800164c <DMA1_Stream6_IRQHandler+0x10>)
 8001642:	f001 f83d 	bl	80026c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	2000017c 	.word	0x2000017c

08001650 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001654:	4802      	ldr	r0, [pc, #8]	; (8001660 <USART1_IRQHandler+0x10>)
 8001656:	f003 f879 	bl	800474c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20001538 	.word	0x20001538

08001664 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001668:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800166c:	f001 fc48 	bl	8002f00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}

08001674 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800167c:	4a14      	ldr	r2, [pc, #80]	; (80016d0 <_sbrk+0x5c>)
 800167e:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <_sbrk+0x60>)
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001688:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <_sbrk+0x64>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d102      	bne.n	8001696 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001690:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <_sbrk+0x64>)
 8001692:	4a12      	ldr	r2, [pc, #72]	; (80016dc <_sbrk+0x68>)
 8001694:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001696:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <_sbrk+0x64>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4413      	add	r3, r2
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d207      	bcs.n	80016b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016a4:	f005 f986 	bl	80069b4 <__errno>
 80016a8:	4603      	mov	r3, r0
 80016aa:	220c      	movs	r2, #12
 80016ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ae:	f04f 33ff 	mov.w	r3, #4294967295
 80016b2:	e009      	b.n	80016c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016b4:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <_sbrk+0x64>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ba:	4b07      	ldr	r3, [pc, #28]	; (80016d8 <_sbrk+0x64>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	4a05      	ldr	r2, [pc, #20]	; (80016d8 <_sbrk+0x64>)
 80016c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016c6:	68fb      	ldr	r3, [r7, #12]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3718      	adds	r7, #24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20020000 	.word	0x20020000
 80016d4:	00000400 	.word	0x00000400
 80016d8:	200000f4 	.word	0x200000f4
 80016dc:	20001590 	.word	0x20001590

080016e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <SystemInit+0x20>)
 80016e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ea:	4a05      	ldr	r2, [pc, #20]	; (8001700 <SystemInit+0x20>)
 80016ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08c      	sub	sp, #48	; 0x30
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800170a:	f107 030c 	add.w	r3, r7, #12
 800170e:	2224      	movs	r2, #36	; 0x24
 8001710:	2100      	movs	r1, #0
 8001712:	4618      	mov	r0, r3
 8001714:	f005 f978 	bl	8006a08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001720:	4b21      	ldr	r3, [pc, #132]	; (80017a8 <MX_TIM1_Init+0xa4>)
 8001722:	4a22      	ldr	r2, [pc, #136]	; (80017ac <MX_TIM1_Init+0xa8>)
 8001724:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001726:	4b20      	ldr	r3, [pc, #128]	; (80017a8 <MX_TIM1_Init+0xa4>)
 8001728:	2200      	movs	r2, #0
 800172a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172c:	4b1e      	ldr	r3, [pc, #120]	; (80017a8 <MX_TIM1_Init+0xa4>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20-1;
 8001732:	4b1d      	ldr	r3, [pc, #116]	; (80017a8 <MX_TIM1_Init+0xa4>)
 8001734:	2213      	movs	r2, #19
 8001736:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001738:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <MX_TIM1_Init+0xa4>)
 800173a:	2200      	movs	r2, #0
 800173c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800173e:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <MX_TIM1_Init+0xa4>)
 8001740:	2200      	movs	r2, #0
 8001742:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001744:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <MX_TIM1_Init+0xa4>)
 8001746:	2200      	movs	r2, #0
 8001748:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800174a:	2301      	movs	r3, #1
 800174c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001752:	2301      	movs	r3, #1
 8001754:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001756:	2300      	movs	r3, #0
 8001758:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800175e:	2300      	movs	r3, #0
 8001760:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001762:	2301      	movs	r3, #1
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001766:	2300      	movs	r3, #0
 8001768:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800176e:	f107 030c 	add.w	r3, r7, #12
 8001772:	4619      	mov	r1, r3
 8001774:	480c      	ldr	r0, [pc, #48]	; (80017a8 <MX_TIM1_Init+0xa4>)
 8001776:	f002 fb97 	bl	8003ea8 <HAL_TIM_Encoder_Init>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8001780:	f7ff fe7a 	bl	8001478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001784:	2300      	movs	r3, #0
 8001786:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001788:	2300      	movs	r3, #0
 800178a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800178c:	1d3b      	adds	r3, r7, #4
 800178e:	4619      	mov	r1, r3
 8001790:	4805      	ldr	r0, [pc, #20]	; (80017a8 <MX_TIM1_Init+0xa4>)
 8001792:	f002 fee1 	bl	8004558 <HAL_TIMEx_MasterConfigSynchronization>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800179c:	f7ff fe6c 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80017a0:	bf00      	nop
 80017a2:	3730      	adds	r7, #48	; 0x30
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20001460 	.word	0x20001460
 80017ac:	40010000 	.word	0x40010000

080017b0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017b6:	f107 0308 	add.w	r3, r7, #8
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c4:	463b      	mov	r3, r7
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017cc:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <MX_TIM2_Init+0x94>)
 80017ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 80017d4:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <MX_TIM2_Init+0x94>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017da:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <MX_TIM2_Init+0x94>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 80017e0:	4b18      	ldr	r3, [pc, #96]	; (8001844 <MX_TIM2_Init+0x94>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80017e6:	4b17      	ldr	r3, [pc, #92]	; (8001844 <MX_TIM2_Init+0x94>)
 80017e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017ee:	4b15      	ldr	r3, [pc, #84]	; (8001844 <MX_TIM2_Init+0x94>)
 80017f0:	2280      	movs	r2, #128	; 0x80
 80017f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017f4:	4813      	ldr	r0, [pc, #76]	; (8001844 <MX_TIM2_Init+0x94>)
 80017f6:	f002 fa9f 	bl	8003d38 <HAL_TIM_Base_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001800:	f7ff fe3a 	bl	8001478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001808:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800180a:	f107 0308 	add.w	r3, r7, #8
 800180e:	4619      	mov	r1, r3
 8001810:	480c      	ldr	r0, [pc, #48]	; (8001844 <MX_TIM2_Init+0x94>)
 8001812:	f002 fc7d 	bl	8004110 <HAL_TIM_ConfigClockSource>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800181c:	f7ff fe2c 	bl	8001478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001820:	2320      	movs	r3, #32
 8001822:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001824:	2300      	movs	r3, #0
 8001826:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001828:	463b      	mov	r3, r7
 800182a:	4619      	mov	r1, r3
 800182c:	4805      	ldr	r0, [pc, #20]	; (8001844 <MX_TIM2_Init+0x94>)
 800182e:	f002 fe93 	bl	8004558 <HAL_TIMEx_MasterConfigSynchronization>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001838:	f7ff fe1e 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800183c:	bf00      	nop
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	200014a8 	.word	0x200014a8

08001848 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800184e:	f107 0308 	add.w	r3, r7, #8
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800185c:	463b      	mov	r3, r7
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001864:	4b1c      	ldr	r3, [pc, #112]	; (80018d8 <MX_TIM5_Init+0x90>)
 8001866:	4a1d      	ldr	r2, [pc, #116]	; (80018dc <MX_TIM5_Init+0x94>)
 8001868:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1;
 800186a:	4b1b      	ldr	r3, [pc, #108]	; (80018d8 <MX_TIM5_Init+0x90>)
 800186c:	2201      	movs	r2, #1
 800186e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001870:	4b19      	ldr	r3, [pc, #100]	; (80018d8 <MX_TIM5_Init+0x90>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1;
 8001876:	4b18      	ldr	r3, [pc, #96]	; (80018d8 <MX_TIM5_Init+0x90>)
 8001878:	2201      	movs	r2, #1
 800187a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800187c:	4b16      	ldr	r3, [pc, #88]	; (80018d8 <MX_TIM5_Init+0x90>)
 800187e:	2200      	movs	r2, #0
 8001880:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <MX_TIM5_Init+0x90>)
 8001884:	2200      	movs	r2, #0
 8001886:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001888:	4813      	ldr	r0, [pc, #76]	; (80018d8 <MX_TIM5_Init+0x90>)
 800188a:	f002 fa55 	bl	8003d38 <HAL_TIM_Base_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 8001894:	f7ff fdf0 	bl	8001478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800189c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800189e:	f107 0308 	add.w	r3, r7, #8
 80018a2:	4619      	mov	r1, r3
 80018a4:	480c      	ldr	r0, [pc, #48]	; (80018d8 <MX_TIM5_Init+0x90>)
 80018a6:	f002 fc33 	bl	8004110 <HAL_TIM_ConfigClockSource>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 80018b0:	f7ff fde2 	bl	8001478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80018b4:	2320      	movs	r3, #32
 80018b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b8:	2300      	movs	r3, #0
 80018ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80018bc:	463b      	mov	r3, r7
 80018be:	4619      	mov	r1, r3
 80018c0:	4805      	ldr	r0, [pc, #20]	; (80018d8 <MX_TIM5_Init+0x90>)
 80018c2:	f002 fe49 	bl	8004558 <HAL_TIMEx_MasterConfigSynchronization>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 80018cc:	f7ff fdd4 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80018d0:	bf00      	nop
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20001418 	.word	0x20001418
 80018dc:	40000c00 	.word	0x40000c00

080018e0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e6:	463b      	mov	r3, r7
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80018ee:	4b15      	ldr	r3, [pc, #84]	; (8001944 <MX_TIM7_Init+0x64>)
 80018f0:	4a15      	ldr	r2, [pc, #84]	; (8001948 <MX_TIM7_Init+0x68>)
 80018f2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 65535-1;
 80018f4:	4b13      	ldr	r3, [pc, #76]	; (8001944 <MX_TIM7_Init+0x64>)
 80018f6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80018fa:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018fc:	4b11      	ldr	r3, [pc, #68]	; (8001944 <MX_TIM7_Init+0x64>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001902:	4b10      	ldr	r3, [pc, #64]	; (8001944 <MX_TIM7_Init+0x64>)
 8001904:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001908:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800190a:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <MX_TIM7_Init+0x64>)
 800190c:	2280      	movs	r2, #128	; 0x80
 800190e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001910:	480c      	ldr	r0, [pc, #48]	; (8001944 <MX_TIM7_Init+0x64>)
 8001912:	f002 fa11 	bl	8003d38 <HAL_TIM_Base_Init>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800191c:	f7ff fdac 	bl	8001478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001920:	2300      	movs	r3, #0
 8001922:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001924:	2300      	movs	r3, #0
 8001926:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001928:	463b      	mov	r3, r7
 800192a:	4619      	mov	r1, r3
 800192c:	4805      	ldr	r0, [pc, #20]	; (8001944 <MX_TIM7_Init+0x64>)
 800192e:	f002 fe13 	bl	8004558 <HAL_TIMEx_MasterConfigSynchronization>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001938:	f7ff fd9e 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	200014f0 	.word	0x200014f0
 8001948:	40001400 	.word	0x40001400

0800194c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08a      	sub	sp, #40	; 0x28
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001954:	f107 0314 	add.w	r3, r7, #20
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a19      	ldr	r2, [pc, #100]	; (80019d0 <HAL_TIM_Encoder_MspInit+0x84>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d12c      	bne.n	80019c8 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	613b      	str	r3, [r7, #16]
 8001972:	4b18      	ldr	r3, [pc, #96]	; (80019d4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001976:	4a17      	ldr	r2, [pc, #92]	; (80019d4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	6453      	str	r3, [r2, #68]	; 0x44
 800197e:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	4a10      	ldr	r2, [pc, #64]	; (80019d4 <HAL_TIM_Encoder_MspInit+0x88>)
 8001994:	f043 0310 	orr.w	r3, r3, #16
 8001998:	6313      	str	r3, [r2, #48]	; 0x30
 800199a:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <HAL_TIM_Encoder_MspInit+0x88>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	f003 0310 	and.w	r3, r3, #16
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80019a6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80019aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ac:	2302      	movs	r3, #2
 80019ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b4:	2300      	movs	r3, #0
 80019b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019b8:	2301      	movs	r3, #1
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	4619      	mov	r1, r3
 80019c2:	4805      	ldr	r0, [pc, #20]	; (80019d8 <HAL_TIM_Encoder_MspInit+0x8c>)
 80019c4:	f001 f8e6 	bl	8002b94 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80019c8:	bf00      	nop
 80019ca:	3728      	adds	r7, #40	; 0x28
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40010000 	.word	0x40010000
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40021000 	.word	0x40021000

080019dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019dc:	b480      	push	{r7}
 80019de:	b087      	sub	sp, #28
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019ec:	d10e      	bne.n	8001a0c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
 80019f2:	4b1d      	ldr	r3, [pc, #116]	; (8001a68 <HAL_TIM_Base_MspInit+0x8c>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	4a1c      	ldr	r2, [pc, #112]	; (8001a68 <HAL_TIM_Base_MspInit+0x8c>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	6413      	str	r3, [r2, #64]	; 0x40
 80019fe:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <HAL_TIM_Base_MspInit+0x8c>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	617b      	str	r3, [r7, #20]
 8001a08:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001a0a:	e026      	b.n	8001a5a <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM5)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a16      	ldr	r2, [pc, #88]	; (8001a6c <HAL_TIM_Base_MspInit+0x90>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d10e      	bne.n	8001a34 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <HAL_TIM_Base_MspInit+0x8c>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	4a12      	ldr	r2, [pc, #72]	; (8001a68 <HAL_TIM_Base_MspInit+0x8c>)
 8001a20:	f043 0308 	orr.w	r3, r3, #8
 8001a24:	6413      	str	r3, [r2, #64]	; 0x40
 8001a26:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <HAL_TIM_Base_MspInit+0x8c>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	613b      	str	r3, [r7, #16]
 8001a30:	693b      	ldr	r3, [r7, #16]
}
 8001a32:	e012      	b.n	8001a5a <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM7)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a0d      	ldr	r2, [pc, #52]	; (8001a70 <HAL_TIM_Base_MspInit+0x94>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d10d      	bne.n	8001a5a <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <HAL_TIM_Base_MspInit+0x8c>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	4a08      	ldr	r2, [pc, #32]	; (8001a68 <HAL_TIM_Base_MspInit+0x8c>)
 8001a48:	f043 0320 	orr.w	r3, r3, #32
 8001a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a4e:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <HAL_TIM_Base_MspInit+0x8c>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	f003 0320 	and.w	r3, r3, #32
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
}
 8001a5a:	bf00      	nop
 8001a5c:	371c      	adds	r7, #28
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40000c00 	.word	0x40000c00
 8001a70:	40001400 	.word	0x40001400

08001a74 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a78:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <MX_USART1_UART_Init+0x4c>)
 8001a7a:	4a12      	ldr	r2, [pc, #72]	; (8001ac4 <MX_USART1_UART_Init+0x50>)
 8001a7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a7e:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <MX_USART1_UART_Init+0x4c>)
 8001a80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a86:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <MX_USART1_UART_Init+0x4c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <MX_USART1_UART_Init+0x4c>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a92:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <MX_USART1_UART_Init+0x4c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a98:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <MX_USART1_UART_Init+0x4c>)
 8001a9a:	220c      	movs	r2, #12
 8001a9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a9e:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <MX_USART1_UART_Init+0x4c>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <MX_USART1_UART_Init+0x4c>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001aaa:	4805      	ldr	r0, [pc, #20]	; (8001ac0 <MX_USART1_UART_Init+0x4c>)
 8001aac:	f002 fdd0 	bl	8004650 <HAL_UART_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ab6:	f7ff fcdf 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20001538 	.word	0x20001538
 8001ac4:	40011000 	.word	0x40011000

08001ac8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08a      	sub	sp, #40	; 0x28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad0:	f107 0314 	add.w	r3, r7, #20
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a1d      	ldr	r2, [pc, #116]	; (8001b5c <HAL_UART_MspInit+0x94>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d133      	bne.n	8001b52 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	613b      	str	r3, [r7, #16]
 8001aee:	4b1c      	ldr	r3, [pc, #112]	; (8001b60 <HAL_UART_MspInit+0x98>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	4a1b      	ldr	r2, [pc, #108]	; (8001b60 <HAL_UART_MspInit+0x98>)
 8001af4:	f043 0310 	orr.w	r3, r3, #16
 8001af8:	6453      	str	r3, [r2, #68]	; 0x44
 8001afa:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <HAL_UART_MspInit+0x98>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	f003 0310 	and.w	r3, r3, #16
 8001b02:	613b      	str	r3, [r7, #16]
 8001b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <HAL_UART_MspInit+0x98>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4a14      	ldr	r2, [pc, #80]	; (8001b60 <HAL_UART_MspInit+0x98>)
 8001b10:	f043 0302 	orr.w	r3, r3, #2
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_UART_MspInit+0x98>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b22:	23c0      	movs	r3, #192	; 0xc0
 8001b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b26:	2302      	movs	r3, #2
 8001b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b32:	2307      	movs	r3, #7
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b36:	f107 0314 	add.w	r3, r7, #20
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4809      	ldr	r0, [pc, #36]	; (8001b64 <HAL_UART_MspInit+0x9c>)
 8001b3e:	f001 f829 	bl	8002b94 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2100      	movs	r1, #0
 8001b46:	2025      	movs	r0, #37	; 0x25
 8001b48:	f000 fa03 	bl	8001f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b4c:	2025      	movs	r0, #37	; 0x25
 8001b4e:	f000 fa1c 	bl	8001f8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001b52:	bf00      	nop
 8001b54:	3728      	adds	r7, #40	; 0x28
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40011000 	.word	0x40011000
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40020400 	.word	0x40020400

08001b68 <calcsin>:
#include "stm32f4xx.h"



void calcsin ()
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
	for (int i=0; i<N_s; i++)
 8001b6e:	2300      	movs	r3, #0
 8001b70:	607b      	str	r3, [r7, #4]
 8001b72:	e03b      	b.n	8001bec <calcsin+0x84>
	{
		sine_val[i] = ((sin(i*2*PI/N_s) + 1.1)*(4096/2.6));
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe fccb 	bl	8000514 <__aeabi_i2d>
 8001b7e:	a321      	add	r3, pc, #132	; (adr r3, 8001c04 <calcsin+0x9c>)
 8001b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b84:	f7fe fd30 	bl	80005e8 <__aeabi_dmul>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	4619      	mov	r1, r3
 8001b90:	f04f 0200 	mov.w	r2, #0
 8001b94:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8001b98:	f7fe fe50 	bl	800083c <__aeabi_ddiv>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	ec43 2b17 	vmov	d7, r2, r3
 8001ba4:	eeb0 0a47 	vmov.f32	s0, s14
 8001ba8:	eef0 0a67 	vmov.f32	s1, s15
 8001bac:	f005 fb64 	bl	8007278 <sin>
 8001bb0:	ec51 0b10 	vmov	r0, r1, d0
 8001bb4:	a315      	add	r3, pc, #84	; (adr r3, 8001c0c <calcsin+0xa4>)
 8001bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bba:	f7fe fb5f 	bl	800027c <__adddf3>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	4610      	mov	r0, r2
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	a313      	add	r3, pc, #76	; (adr r3, 8001c14 <calcsin+0xac>)
 8001bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bcc:	f7fe fd0c 	bl	80005e8 <__aeabi_dmul>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4610      	mov	r0, r2
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	f7fe ffc8 	bl	8000b6c <__aeabi_d2uiz>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	4908      	ldr	r1, [pc, #32]	; (8001c00 <calcsin+0x98>)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=0; i<N_s; i++)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	3301      	adds	r3, #1
 8001bea:	607b      	str	r3, [r7, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bf2:	dbbf      	blt.n	8001b74 <calcsin+0xc>
	}
}
 8001bf4:	bf00      	nop
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	200004c0 	.word	0x200004c0
 8001c04:	4d12d84a 	.word	0x4d12d84a
 8001c08:	400921fb 	.word	0x400921fb
 8001c0c:	9999999a 	.word	0x9999999a
 8001c10:	3ff19999 	.word	0x3ff19999
 8001c14:	d89d89d8 	.word	0xd89d89d8
 8001c18:	40989d89 	.word	0x40989d89

08001c1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c20:	480d      	ldr	r0, [pc, #52]	; (8001c58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c22:	490e      	ldr	r1, [pc, #56]	; (8001c5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c24:	4a0e      	ldr	r2, [pc, #56]	; (8001c60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c28:	e002      	b.n	8001c30 <LoopCopyDataInit>

08001c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c2e:	3304      	adds	r3, #4

08001c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c34:	d3f9      	bcc.n	8001c2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c36:	4a0b      	ldr	r2, [pc, #44]	; (8001c64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c38:	4c0b      	ldr	r4, [pc, #44]	; (8001c68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c3c:	e001      	b.n	8001c42 <LoopFillZerobss>

08001c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c40:	3204      	adds	r2, #4

08001c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c44:	d3fb      	bcc.n	8001c3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c46:	f7ff fd4b 	bl	80016e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c4a:	f004 feb9 	bl	80069c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c4e:	f7ff fadb 	bl	8001208 <main>
  bx  lr    
 8001c52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c5c:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8001c60:	08008e98 	.word	0x08008e98
  ldr r2, =_sbss
 8001c64:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 8001c68:	20001590 	.word	0x20001590

08001c6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c6c:	e7fe      	b.n	8001c6c <ADC_IRQHandler>
	...

08001c70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c74:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <HAL_Init+0x40>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a0d      	ldr	r2, [pc, #52]	; (8001cb0 <HAL_Init+0x40>)
 8001c7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c80:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <HAL_Init+0x40>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a0a      	ldr	r2, [pc, #40]	; (8001cb0 <HAL_Init+0x40>)
 8001c86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c8c:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <HAL_Init+0x40>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a07      	ldr	r2, [pc, #28]	; (8001cb0 <HAL_Init+0x40>)
 8001c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c98:	2003      	movs	r0, #3
 8001c9a:	f000 f94f 	bl	8001f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	f000 f808 	bl	8001cb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ca4:	f7ff fc6e 	bl	8001584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40023c00 	.word	0x40023c00

08001cb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cbc:	4b12      	ldr	r3, [pc, #72]	; (8001d08 <HAL_InitTick+0x54>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <HAL_InitTick+0x58>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f000 f967 	bl	8001fa6 <HAL_SYSTICK_Config>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e00e      	b.n	8001d00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2b0f      	cmp	r3, #15
 8001ce6:	d80a      	bhi.n	8001cfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf0:	f000 f92f 	bl	8001f52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cf4:	4a06      	ldr	r2, [pc, #24]	; (8001d10 <HAL_InitTick+0x5c>)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	e000      	b.n	8001d00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20000000 	.word	0x20000000
 8001d0c:	20000008 	.word	0x20000008
 8001d10:	20000004 	.word	0x20000004

08001d14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d18:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_IncTick+0x20>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <HAL_IncTick+0x24>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4413      	add	r3, r2
 8001d24:	4a04      	ldr	r2, [pc, #16]	; (8001d38 <HAL_IncTick+0x24>)
 8001d26:	6013      	str	r3, [r2, #0]
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	20000008 	.word	0x20000008
 8001d38:	2000157c 	.word	0x2000157c

08001d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d40:	4b03      	ldr	r3, [pc, #12]	; (8001d50 <HAL_GetTick+0x14>)
 8001d42:	681b      	ldr	r3, [r3, #0]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	2000157c 	.word	0x2000157c

08001d54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d5c:	f7ff ffee 	bl	8001d3c <HAL_GetTick>
 8001d60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d6c:	d005      	beq.n	8001d7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d6e:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <HAL_Delay+0x44>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	461a      	mov	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4413      	add	r3, r2
 8001d78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d7a:	bf00      	nop
 8001d7c:	f7ff ffde 	bl	8001d3c <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d8f7      	bhi.n	8001d7c <HAL_Delay+0x28>
  {
  }
}
 8001d8c:	bf00      	nop
 8001d8e:	bf00      	nop
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000008 	.word	0x20000008

08001d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dac:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001db2:	68ba      	ldr	r2, [r7, #8]
 8001db4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001db8:	4013      	ands	r3, r2
 8001dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dce:	4a04      	ldr	r2, [pc, #16]	; (8001de0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	60d3      	str	r3, [r2, #12]
}
 8001dd4:	bf00      	nop
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de8:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <__NVIC_GetPriorityGrouping+0x18>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	0a1b      	lsrs	r3, r3, #8
 8001dee:	f003 0307 	and.w	r3, r3, #7
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	db0b      	blt.n	8001e2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	f003 021f 	and.w	r2, r3, #31
 8001e18:	4907      	ldr	r1, [pc, #28]	; (8001e38 <__NVIC_EnableIRQ+0x38>)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	095b      	lsrs	r3, r3, #5
 8001e20:	2001      	movs	r0, #1
 8001e22:	fa00 f202 	lsl.w	r2, r0, r2
 8001e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	e000e100 	.word	0xe000e100

08001e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	db0a      	blt.n	8001e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	490c      	ldr	r1, [pc, #48]	; (8001e88 <__NVIC_SetPriority+0x4c>)
 8001e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5a:	0112      	lsls	r2, r2, #4
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	440b      	add	r3, r1
 8001e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e64:	e00a      	b.n	8001e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	4908      	ldr	r1, [pc, #32]	; (8001e8c <__NVIC_SetPriority+0x50>)
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	3b04      	subs	r3, #4
 8001e74:	0112      	lsls	r2, r2, #4
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	440b      	add	r3, r1
 8001e7a:	761a      	strb	r2, [r3, #24]
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	e000e100 	.word	0xe000e100
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b089      	sub	sp, #36	; 0x24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f1c3 0307 	rsb	r3, r3, #7
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	bf28      	it	cs
 8001eae:	2304      	movcs	r3, #4
 8001eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	2b06      	cmp	r3, #6
 8001eb8:	d902      	bls.n	8001ec0 <NVIC_EncodePriority+0x30>
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3b03      	subs	r3, #3
 8001ebe:	e000      	b.n	8001ec2 <NVIC_EncodePriority+0x32>
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43da      	mvns	r2, r3
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee2:	43d9      	mvns	r1, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee8:	4313      	orrs	r3, r2
         );
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3724      	adds	r7, #36	; 0x24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
	...

08001ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f08:	d301      	bcc.n	8001f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e00f      	b.n	8001f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f0e:	4a0a      	ldr	r2, [pc, #40]	; (8001f38 <SysTick_Config+0x40>)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f16:	210f      	movs	r1, #15
 8001f18:	f04f 30ff 	mov.w	r0, #4294967295
 8001f1c:	f7ff ff8e 	bl	8001e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f20:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <SysTick_Config+0x40>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f26:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <SysTick_Config+0x40>)
 8001f28:	2207      	movs	r2, #7
 8001f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	e000e010 	.word	0xe000e010

08001f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff ff29 	bl	8001d9c <__NVIC_SetPriorityGrouping>
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b086      	sub	sp, #24
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	4603      	mov	r3, r0
 8001f5a:	60b9      	str	r1, [r7, #8]
 8001f5c:	607a      	str	r2, [r7, #4]
 8001f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f64:	f7ff ff3e 	bl	8001de4 <__NVIC_GetPriorityGrouping>
 8001f68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	68b9      	ldr	r1, [r7, #8]
 8001f6e:	6978      	ldr	r0, [r7, #20]
 8001f70:	f7ff ff8e 	bl	8001e90 <NVIC_EncodePriority>
 8001f74:	4602      	mov	r2, r0
 8001f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff ff5d 	bl	8001e3c <__NVIC_SetPriority>
}
 8001f82:	bf00      	nop
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	4603      	mov	r3, r0
 8001f92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff ff31 	bl	8001e00 <__NVIC_EnableIRQ>
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7ff ffa2 	bl	8001ef8 <SysTick_Config>
 8001fb4:	4603      	mov	r3, r0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b082      	sub	sp, #8
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e014      	b.n	8001ffa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	791b      	ldrb	r3, [r3, #4]
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d105      	bne.n	8001fe6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7fe ffb3 	bl	8000f4c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2202      	movs	r2, #2
 8001fea:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
	...

08002004 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
 8002010:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	795b      	ldrb	r3, [r3, #5]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d101      	bne.n	8002026 <HAL_DAC_Start_DMA+0x22>
 8002022:	2302      	movs	r3, #2
 8002024:	e0ab      	b.n	800217e <HAL_DAC_Start_DMA+0x17a>
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2201      	movs	r2, #1
 800202a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2202      	movs	r2, #2
 8002030:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d12f      	bne.n	8002098 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	4a52      	ldr	r2, [pc, #328]	; (8002188 <HAL_DAC_Start_DMA+0x184>)
 800203e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	4a51      	ldr	r2, [pc, #324]	; (800218c <HAL_DAC_Start_DMA+0x188>)
 8002046:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	4a50      	ldr	r2, [pc, #320]	; (8002190 <HAL_DAC_Start_DMA+0x18c>)
 800204e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800205e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002060:	6a3b      	ldr	r3, [r7, #32]
 8002062:	2b08      	cmp	r3, #8
 8002064:	d013      	beq.n	800208e <HAL_DAC_Start_DMA+0x8a>
 8002066:	6a3b      	ldr	r3, [r7, #32]
 8002068:	2b08      	cmp	r3, #8
 800206a:	d845      	bhi.n	80020f8 <HAL_DAC_Start_DMA+0xf4>
 800206c:	6a3b      	ldr	r3, [r7, #32]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_DAC_Start_DMA+0x76>
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	2b04      	cmp	r3, #4
 8002076:	d005      	beq.n	8002084 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002078:	e03e      	b.n	80020f8 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	3308      	adds	r3, #8
 8002080:	613b      	str	r3, [r7, #16]
        break;
 8002082:	e03c      	b.n	80020fe <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	330c      	adds	r3, #12
 800208a:	613b      	str	r3, [r7, #16]
        break;
 800208c:	e037      	b.n	80020fe <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	3310      	adds	r3, #16
 8002094:	613b      	str	r3, [r7, #16]
        break;
 8002096:	e032      	b.n	80020fe <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	4a3d      	ldr	r2, [pc, #244]	; (8002194 <HAL_DAC_Start_DMA+0x190>)
 800209e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	4a3c      	ldr	r2, [pc, #240]	; (8002198 <HAL_DAC_Start_DMA+0x194>)
 80020a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	4a3b      	ldr	r2, [pc, #236]	; (800219c <HAL_DAC_Start_DMA+0x198>)
 80020ae:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80020be:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80020c0:	6a3b      	ldr	r3, [r7, #32]
 80020c2:	2b08      	cmp	r3, #8
 80020c4:	d013      	beq.n	80020ee <HAL_DAC_Start_DMA+0xea>
 80020c6:	6a3b      	ldr	r3, [r7, #32]
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	d817      	bhi.n	80020fc <HAL_DAC_Start_DMA+0xf8>
 80020cc:	6a3b      	ldr	r3, [r7, #32]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_DAC_Start_DMA+0xd6>
 80020d2:	6a3b      	ldr	r3, [r7, #32]
 80020d4:	2b04      	cmp	r3, #4
 80020d6:	d005      	beq.n	80020e4 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80020d8:	e010      	b.n	80020fc <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	3314      	adds	r3, #20
 80020e0:	613b      	str	r3, [r7, #16]
        break;
 80020e2:	e00c      	b.n	80020fe <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	3318      	adds	r3, #24
 80020ea:	613b      	str	r3, [r7, #16]
        break;
 80020ec:	e007      	b.n	80020fe <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	331c      	adds	r3, #28
 80020f4:	613b      	str	r3, [r7, #16]
        break;
 80020f6:	e002      	b.n	80020fe <HAL_DAC_Start_DMA+0xfa>
        break;
 80020f8:	bf00      	nop
 80020fa:	e000      	b.n	80020fe <HAL_DAC_Start_DMA+0xfa>
        break;
 80020fc:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d111      	bne.n	8002128 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002112:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6898      	ldr	r0, [r3, #8]
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	f000 f9e5 	bl	80024ec <HAL_DMA_Start_IT>
 8002122:	4603      	mov	r3, r0
 8002124:	75fb      	strb	r3, [r7, #23]
 8002126:	e010      	b.n	800214a <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002136:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	68d8      	ldr	r0, [r3, #12]
 800213c:	6879      	ldr	r1, [r7, #4]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	f000 f9d3 	bl	80024ec <HAL_DMA_Start_IT>
 8002146:	4603      	mov	r3, r0
 8002148:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002150:	7dfb      	ldrb	r3, [r7, #23]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10c      	bne.n	8002170 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6819      	ldr	r1, [r3, #0]
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	f003 0310 	and.w	r3, r3, #16
 8002162:	2201      	movs	r2, #1
 8002164:	409a      	lsls	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	e005      	b.n	800217c <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	f043 0204 	orr.w	r2, r3, #4
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800217c:	7dfb      	ldrb	r3, [r7, #23]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	0800227b 	.word	0x0800227b
 800218c:	0800229d 	.word	0x0800229d
 8002190:	080022b9 	.word	0x080022b9
 8002194:	08002323 	.word	0x08002323
 8002198:	08002345 	.word	0x08002345
 800219c:	08002361 	.word	0x08002361

080021a0 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80021dc:	b480      	push	{r7}
 80021de:	b087      	sub	sp, #28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	795b      	ldrb	r3, [r3, #5]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d101      	bne.n	80021f4 <HAL_DAC_ConfigChannel+0x18>
 80021f0:	2302      	movs	r3, #2
 80021f2:	e03c      	b.n	800226e <HAL_DAC_ConfigChannel+0x92>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2201      	movs	r2, #1
 80021f8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2202      	movs	r2, #2
 80021fe:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f003 0310 	and.w	r3, r3, #16
 800220e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	4013      	ands	r3, r2
 800221c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	4313      	orrs	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f003 0310 	and.w	r3, r3, #16
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	4313      	orrs	r3, r2
 800223a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	697a      	ldr	r2, [r7, #20]
 8002242:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6819      	ldr	r1, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f003 0310 	and.w	r3, r3, #16
 8002250:	22c0      	movs	r2, #192	; 0xc0
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43da      	mvns	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	400a      	ands	r2, r1
 800225e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2201      	movs	r2, #1
 8002264:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	371c      	adds	r7, #28
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b084      	sub	sp, #16
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002286:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f7ff ff89 	bl	80021a0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2201      	movs	r2, #1
 8002292:	711a      	strb	r2, [r3, #4]
}
 8002294:	bf00      	nop
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f7ff ff82 	bl	80021b4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80022b0:	bf00      	nop
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c4:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	f043 0204 	orr.w	r2, r3, #4
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f7ff ff78 	bl	80021c8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2201      	movs	r2, #1
 80022dc:	711a      	strb	r2, [r3, #4]
}
 80022de:	bf00      	nop
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b084      	sub	sp, #16
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f7ff ffd8 	bl	80022e6 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2201      	movs	r2, #1
 800233a:	711a      	strb	r2, [r3, #4]
}
 800233c:	bf00      	nop
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002350:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f7ff ffd1 	bl	80022fa <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002358:	bf00      	nop
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	f043 0204 	orr.w	r2, r3, #4
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f7ff ffc7 	bl	800230e <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2201      	movs	r2, #1
 8002384:	711a      	strb	r2, [r3, #4]
}
 8002386:	bf00      	nop
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
	...

08002390 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800239c:	f7ff fcce 	bl	8001d3c <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e099      	b.n	80024e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2202      	movs	r2, #2
 80023b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 0201 	bic.w	r2, r2, #1
 80023ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023cc:	e00f      	b.n	80023ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023ce:	f7ff fcb5 	bl	8001d3c <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b05      	cmp	r3, #5
 80023da:	d908      	bls.n	80023ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2220      	movs	r2, #32
 80023e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2203      	movs	r2, #3
 80023e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e078      	b.n	80024e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1e8      	bne.n	80023ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	4b38      	ldr	r3, [pc, #224]	; (80024e8 <HAL_DMA_Init+0x158>)
 8002408:	4013      	ands	r3, r2
 800240a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800241a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002426:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002432:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	4313      	orrs	r3, r2
 800243e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	2b04      	cmp	r3, #4
 8002446:	d107      	bne.n	8002458 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002450:	4313      	orrs	r3, r2
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	4313      	orrs	r3, r2
 8002456:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	f023 0307 	bic.w	r3, r3, #7
 800246e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	4313      	orrs	r3, r2
 8002478:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	2b04      	cmp	r3, #4
 8002480:	d117      	bne.n	80024b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	4313      	orrs	r3, r2
 800248a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00e      	beq.n	80024b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 fb01 	bl	8002a9c <DMA_CheckFifoParam>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d008      	beq.n	80024b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2240      	movs	r2, #64	; 0x40
 80024a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80024ae:	2301      	movs	r3, #1
 80024b0:	e016      	b.n	80024e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 fab8 	bl	8002a30 <DMA_CalcBaseAndBitshift>
 80024c0:	4603      	mov	r3, r0
 80024c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c8:	223f      	movs	r2, #63	; 0x3f
 80024ca:	409a      	lsls	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	f010803f 	.word	0xf010803f

080024ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
 80024f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024fa:	2300      	movs	r3, #0
 80024fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002502:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800250a:	2b01      	cmp	r3, #1
 800250c:	d101      	bne.n	8002512 <HAL_DMA_Start_IT+0x26>
 800250e:	2302      	movs	r3, #2
 8002510:	e040      	b.n	8002594 <HAL_DMA_Start_IT+0xa8>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b01      	cmp	r3, #1
 8002524:	d12f      	bne.n	8002586 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2202      	movs	r2, #2
 800252a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	68b9      	ldr	r1, [r7, #8]
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 fa4a 	bl	80029d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002544:	223f      	movs	r2, #63	; 0x3f
 8002546:	409a      	lsls	r2, r3
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f042 0216 	orr.w	r2, r2, #22
 800255a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002560:	2b00      	cmp	r3, #0
 8002562:	d007      	beq.n	8002574 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 0208 	orr.w	r2, r2, #8
 8002572:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0201 	orr.w	r2, r2, #1
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	e005      	b.n	8002592 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800258e:	2302      	movs	r3, #2
 8002590:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002592:	7dfb      	ldrb	r3, [r7, #23]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80025aa:	f7ff fbc7 	bl	8001d3c <HAL_GetTick>
 80025ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d008      	beq.n	80025ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2280      	movs	r2, #128	; 0x80
 80025c0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e052      	b.n	8002674 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 0216 	bic.w	r2, r2, #22
 80025dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	695a      	ldr	r2, [r3, #20]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d103      	bne.n	80025fe <HAL_DMA_Abort+0x62>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d007      	beq.n	800260e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0208 	bic.w	r2, r2, #8
 800260c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0201 	bic.w	r2, r2, #1
 800261c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800261e:	e013      	b.n	8002648 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002620:	f7ff fb8c 	bl	8001d3c <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b05      	cmp	r3, #5
 800262c:	d90c      	bls.n	8002648 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2220      	movs	r2, #32
 8002632:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2203      	movs	r2, #3
 8002640:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e015      	b.n	8002674 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1e4      	bne.n	8002620 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265a:	223f      	movs	r2, #63	; 0x3f
 800265c:	409a      	lsls	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d004      	beq.n	800269a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2280      	movs	r2, #128	; 0x80
 8002694:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e00c      	b.n	80026b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2205      	movs	r2, #5
 800269e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 0201 	bic.w	r2, r2, #1
 80026b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026cc:	4b92      	ldr	r3, [pc, #584]	; (8002918 <HAL_DMA_IRQHandler+0x258>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a92      	ldr	r2, [pc, #584]	; (800291c <HAL_DMA_IRQHandler+0x25c>)
 80026d2:	fba2 2303 	umull	r2, r3, r2, r3
 80026d6:	0a9b      	lsrs	r3, r3, #10
 80026d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ea:	2208      	movs	r2, #8
 80026ec:	409a      	lsls	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	4013      	ands	r3, r2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d01a      	beq.n	800272c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d013      	beq.n	800272c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 0204 	bic.w	r2, r2, #4
 8002712:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002718:	2208      	movs	r2, #8
 800271a:	409a      	lsls	r2, r3
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002724:	f043 0201 	orr.w	r2, r3, #1
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002730:	2201      	movs	r2, #1
 8002732:	409a      	lsls	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4013      	ands	r3, r2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d012      	beq.n	8002762 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00b      	beq.n	8002762 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274e:	2201      	movs	r2, #1
 8002750:	409a      	lsls	r2, r3
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275a:	f043 0202 	orr.w	r2, r3, #2
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002766:	2204      	movs	r2, #4
 8002768:	409a      	lsls	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	4013      	ands	r3, r2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d012      	beq.n	8002798 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00b      	beq.n	8002798 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002784:	2204      	movs	r2, #4
 8002786:	409a      	lsls	r2, r3
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002790:	f043 0204 	orr.w	r2, r3, #4
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279c:	2210      	movs	r2, #16
 800279e:	409a      	lsls	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4013      	ands	r3, r2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d043      	beq.n	8002830 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0308 	and.w	r3, r3, #8
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d03c      	beq.n	8002830 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ba:	2210      	movs	r2, #16
 80027bc:	409a      	lsls	r2, r3
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d018      	beq.n	8002802 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d108      	bne.n	80027f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d024      	beq.n	8002830 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	4798      	blx	r3
 80027ee:	e01f      	b.n	8002830 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d01b      	beq.n	8002830 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	4798      	blx	r3
 8002800:	e016      	b.n	8002830 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280c:	2b00      	cmp	r3, #0
 800280e:	d107      	bne.n	8002820 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 0208 	bic.w	r2, r2, #8
 800281e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002834:	2220      	movs	r2, #32
 8002836:	409a      	lsls	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4013      	ands	r3, r2
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 808e 	beq.w	800295e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0310 	and.w	r3, r3, #16
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 8086 	beq.w	800295e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002856:	2220      	movs	r2, #32
 8002858:	409a      	lsls	r2, r3
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b05      	cmp	r3, #5
 8002868:	d136      	bne.n	80028d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0216 	bic.w	r2, r2, #22
 8002878:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	695a      	ldr	r2, [r3, #20]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002888:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	2b00      	cmp	r3, #0
 8002890:	d103      	bne.n	800289a <HAL_DMA_IRQHandler+0x1da>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002896:	2b00      	cmp	r3, #0
 8002898:	d007      	beq.n	80028aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 0208 	bic.w	r2, r2, #8
 80028a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ae:	223f      	movs	r2, #63	; 0x3f
 80028b0:	409a      	lsls	r2, r3
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d07d      	beq.n	80029ca <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	4798      	blx	r3
        }
        return;
 80028d6:	e078      	b.n	80029ca <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d01c      	beq.n	8002920 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d108      	bne.n	8002906 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d030      	beq.n	800295e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	4798      	blx	r3
 8002904:	e02b      	b.n	800295e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800290a:	2b00      	cmp	r3, #0
 800290c:	d027      	beq.n	800295e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	4798      	blx	r3
 8002916:	e022      	b.n	800295e <HAL_DMA_IRQHandler+0x29e>
 8002918:	20000000 	.word	0x20000000
 800291c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10f      	bne.n	800294e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0210 	bic.w	r2, r2, #16
 800293c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002962:	2b00      	cmp	r3, #0
 8002964:	d032      	beq.n	80029cc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d022      	beq.n	80029b8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2205      	movs	r2, #5
 8002976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0201 	bic.w	r2, r2, #1
 8002988:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	3301      	adds	r3, #1
 800298e:	60bb      	str	r3, [r7, #8]
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	429a      	cmp	r2, r3
 8002994:	d307      	bcc.n	80029a6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1f2      	bne.n	800298a <HAL_DMA_IRQHandler+0x2ca>
 80029a4:	e000      	b.n	80029a8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80029a6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d005      	beq.n	80029cc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	4798      	blx	r3
 80029c8:	e000      	b.n	80029cc <HAL_DMA_IRQHandler+0x30c>
        return;
 80029ca:	bf00      	nop
    }
  }
}
 80029cc:	3718      	adds	r7, #24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop

080029d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
 80029e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	2b40      	cmp	r3, #64	; 0x40
 8002a00:	d108      	bne.n	8002a14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a12:	e007      	b.n	8002a24 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68ba      	ldr	r2, [r7, #8]
 8002a1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	60da      	str	r2, [r3, #12]
}
 8002a24:	bf00      	nop
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	3b10      	subs	r3, #16
 8002a40:	4a14      	ldr	r2, [pc, #80]	; (8002a94 <DMA_CalcBaseAndBitshift+0x64>)
 8002a42:	fba2 2303 	umull	r2, r3, r2, r3
 8002a46:	091b      	lsrs	r3, r3, #4
 8002a48:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a4a:	4a13      	ldr	r2, [pc, #76]	; (8002a98 <DMA_CalcBaseAndBitshift+0x68>)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	4413      	add	r3, r2
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	461a      	mov	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2b03      	cmp	r3, #3
 8002a5c:	d909      	bls.n	8002a72 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a66:	f023 0303 	bic.w	r3, r3, #3
 8002a6a:	1d1a      	adds	r2, r3, #4
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	659a      	str	r2, [r3, #88]	; 0x58
 8002a70:	e007      	b.n	8002a82 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a7a:	f023 0303 	bic.w	r3, r3, #3
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	aaaaaaab 	.word	0xaaaaaaab
 8002a98:	08008354 	.word	0x08008354

08002a9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d11f      	bne.n	8002af6 <DMA_CheckFifoParam+0x5a>
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	2b03      	cmp	r3, #3
 8002aba:	d856      	bhi.n	8002b6a <DMA_CheckFifoParam+0xce>
 8002abc:	a201      	add	r2, pc, #4	; (adr r2, 8002ac4 <DMA_CheckFifoParam+0x28>)
 8002abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac2:	bf00      	nop
 8002ac4:	08002ad5 	.word	0x08002ad5
 8002ac8:	08002ae7 	.word	0x08002ae7
 8002acc:	08002ad5 	.word	0x08002ad5
 8002ad0:	08002b6b 	.word	0x08002b6b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d046      	beq.n	8002b6e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ae4:	e043      	b.n	8002b6e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002aee:	d140      	bne.n	8002b72 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002af4:	e03d      	b.n	8002b72 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002afe:	d121      	bne.n	8002b44 <DMA_CheckFifoParam+0xa8>
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2b03      	cmp	r3, #3
 8002b04:	d837      	bhi.n	8002b76 <DMA_CheckFifoParam+0xda>
 8002b06:	a201      	add	r2, pc, #4	; (adr r2, 8002b0c <DMA_CheckFifoParam+0x70>)
 8002b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b0c:	08002b1d 	.word	0x08002b1d
 8002b10:	08002b23 	.word	0x08002b23
 8002b14:	08002b1d 	.word	0x08002b1d
 8002b18:	08002b35 	.word	0x08002b35
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b20:	e030      	b.n	8002b84 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d025      	beq.n	8002b7a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b32:	e022      	b.n	8002b7a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b3c:	d11f      	bne.n	8002b7e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b42:	e01c      	b.n	8002b7e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d903      	bls.n	8002b52 <DMA_CheckFifoParam+0xb6>
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	2b03      	cmp	r3, #3
 8002b4e:	d003      	beq.n	8002b58 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b50:	e018      	b.n	8002b84 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	73fb      	strb	r3, [r7, #15]
      break;
 8002b56:	e015      	b.n	8002b84 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00e      	beq.n	8002b82 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	73fb      	strb	r3, [r7, #15]
      break;
 8002b68:	e00b      	b.n	8002b82 <DMA_CheckFifoParam+0xe6>
      break;
 8002b6a:	bf00      	nop
 8002b6c:	e00a      	b.n	8002b84 <DMA_CheckFifoParam+0xe8>
      break;
 8002b6e:	bf00      	nop
 8002b70:	e008      	b.n	8002b84 <DMA_CheckFifoParam+0xe8>
      break;
 8002b72:	bf00      	nop
 8002b74:	e006      	b.n	8002b84 <DMA_CheckFifoParam+0xe8>
      break;
 8002b76:	bf00      	nop
 8002b78:	e004      	b.n	8002b84 <DMA_CheckFifoParam+0xe8>
      break;
 8002b7a:	bf00      	nop
 8002b7c:	e002      	b.n	8002b84 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b7e:	bf00      	nop
 8002b80:	e000      	b.n	8002b84 <DMA_CheckFifoParam+0xe8>
      break;
 8002b82:	bf00      	nop
    }
  } 
  
  return status; 
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop

08002b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b089      	sub	sp, #36	; 0x24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002baa:	2300      	movs	r3, #0
 8002bac:	61fb      	str	r3, [r7, #28]
 8002bae:	e16b      	b.n	8002e88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	f040 815a 	bne.w	8002e82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d005      	beq.n	8002be6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d130      	bne.n	8002c48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	2203      	movs	r2, #3
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	091b      	lsrs	r3, r3, #4
 8002c32:	f003 0201 	and.w	r2, r3, #1
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 0303 	and.w	r3, r3, #3
 8002c50:	2b03      	cmp	r3, #3
 8002c52:	d017      	beq.n	8002c84 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	2203      	movs	r2, #3
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	43db      	mvns	r3, r3
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 0303 	and.w	r3, r3, #3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d123      	bne.n	8002cd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	08da      	lsrs	r2, r3, #3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3208      	adds	r2, #8
 8002c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	220f      	movs	r2, #15
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	43db      	mvns	r3, r3
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	691a      	ldr	r2, [r3, #16]
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	08da      	lsrs	r2, r3, #3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	3208      	adds	r2, #8
 8002cd2:	69b9      	ldr	r1, [r7, #24]
 8002cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	2203      	movs	r2, #3
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	4013      	ands	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 0203 	and.w	r2, r3, #3
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 80b4 	beq.w	8002e82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	4b60      	ldr	r3, [pc, #384]	; (8002ea0 <HAL_GPIO_Init+0x30c>)
 8002d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d22:	4a5f      	ldr	r2, [pc, #380]	; (8002ea0 <HAL_GPIO_Init+0x30c>)
 8002d24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d28:	6453      	str	r3, [r2, #68]	; 0x44
 8002d2a:	4b5d      	ldr	r3, [pc, #372]	; (8002ea0 <HAL_GPIO_Init+0x30c>)
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d36:	4a5b      	ldr	r2, [pc, #364]	; (8002ea4 <HAL_GPIO_Init+0x310>)
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	089b      	lsrs	r3, r3, #2
 8002d3c:	3302      	adds	r3, #2
 8002d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	220f      	movs	r2, #15
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	43db      	mvns	r3, r3
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	4013      	ands	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a52      	ldr	r2, [pc, #328]	; (8002ea8 <HAL_GPIO_Init+0x314>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d02b      	beq.n	8002dba <HAL_GPIO_Init+0x226>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a51      	ldr	r2, [pc, #324]	; (8002eac <HAL_GPIO_Init+0x318>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d025      	beq.n	8002db6 <HAL_GPIO_Init+0x222>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a50      	ldr	r2, [pc, #320]	; (8002eb0 <HAL_GPIO_Init+0x31c>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d01f      	beq.n	8002db2 <HAL_GPIO_Init+0x21e>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a4f      	ldr	r2, [pc, #316]	; (8002eb4 <HAL_GPIO_Init+0x320>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d019      	beq.n	8002dae <HAL_GPIO_Init+0x21a>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a4e      	ldr	r2, [pc, #312]	; (8002eb8 <HAL_GPIO_Init+0x324>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d013      	beq.n	8002daa <HAL_GPIO_Init+0x216>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a4d      	ldr	r2, [pc, #308]	; (8002ebc <HAL_GPIO_Init+0x328>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d00d      	beq.n	8002da6 <HAL_GPIO_Init+0x212>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a4c      	ldr	r2, [pc, #304]	; (8002ec0 <HAL_GPIO_Init+0x32c>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d007      	beq.n	8002da2 <HAL_GPIO_Init+0x20e>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a4b      	ldr	r2, [pc, #300]	; (8002ec4 <HAL_GPIO_Init+0x330>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d101      	bne.n	8002d9e <HAL_GPIO_Init+0x20a>
 8002d9a:	2307      	movs	r3, #7
 8002d9c:	e00e      	b.n	8002dbc <HAL_GPIO_Init+0x228>
 8002d9e:	2308      	movs	r3, #8
 8002da0:	e00c      	b.n	8002dbc <HAL_GPIO_Init+0x228>
 8002da2:	2306      	movs	r3, #6
 8002da4:	e00a      	b.n	8002dbc <HAL_GPIO_Init+0x228>
 8002da6:	2305      	movs	r3, #5
 8002da8:	e008      	b.n	8002dbc <HAL_GPIO_Init+0x228>
 8002daa:	2304      	movs	r3, #4
 8002dac:	e006      	b.n	8002dbc <HAL_GPIO_Init+0x228>
 8002dae:	2303      	movs	r3, #3
 8002db0:	e004      	b.n	8002dbc <HAL_GPIO_Init+0x228>
 8002db2:	2302      	movs	r3, #2
 8002db4:	e002      	b.n	8002dbc <HAL_GPIO_Init+0x228>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <HAL_GPIO_Init+0x228>
 8002dba:	2300      	movs	r3, #0
 8002dbc:	69fa      	ldr	r2, [r7, #28]
 8002dbe:	f002 0203 	and.w	r2, r2, #3
 8002dc2:	0092      	lsls	r2, r2, #2
 8002dc4:	4093      	lsls	r3, r2
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dcc:	4935      	ldr	r1, [pc, #212]	; (8002ea4 <HAL_GPIO_Init+0x310>)
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	089b      	lsrs	r3, r3, #2
 8002dd2:	3302      	adds	r3, #2
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dda:	4b3b      	ldr	r3, [pc, #236]	; (8002ec8 <HAL_GPIO_Init+0x334>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	43db      	mvns	r3, r3
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	4013      	ands	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dfe:	4a32      	ldr	r2, [pc, #200]	; (8002ec8 <HAL_GPIO_Init+0x334>)
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e04:	4b30      	ldr	r3, [pc, #192]	; (8002ec8 <HAL_GPIO_Init+0x334>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4013      	ands	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e28:	4a27      	ldr	r2, [pc, #156]	; (8002ec8 <HAL_GPIO_Init+0x334>)
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e2e:	4b26      	ldr	r3, [pc, #152]	; (8002ec8 <HAL_GPIO_Init+0x334>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	43db      	mvns	r3, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e52:	4a1d      	ldr	r2, [pc, #116]	; (8002ec8 <HAL_GPIO_Init+0x334>)
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e58:	4b1b      	ldr	r3, [pc, #108]	; (8002ec8 <HAL_GPIO_Init+0x334>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	43db      	mvns	r3, r3
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	4013      	ands	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e7c:	4a12      	ldr	r2, [pc, #72]	; (8002ec8 <HAL_GPIO_Init+0x334>)
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	3301      	adds	r3, #1
 8002e86:	61fb      	str	r3, [r7, #28]
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	2b0f      	cmp	r3, #15
 8002e8c:	f67f ae90 	bls.w	8002bb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e90:	bf00      	nop
 8002e92:	bf00      	nop
 8002e94:	3724      	adds	r7, #36	; 0x24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	40013800 	.word	0x40013800
 8002ea8:	40020000 	.word	0x40020000
 8002eac:	40020400 	.word	0x40020400
 8002eb0:	40020800 	.word	0x40020800
 8002eb4:	40020c00 	.word	0x40020c00
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	40021400 	.word	0x40021400
 8002ec0:	40021800 	.word	0x40021800
 8002ec4:	40021c00 	.word	0x40021c00
 8002ec8:	40013c00 	.word	0x40013c00

08002ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	807b      	strh	r3, [r7, #2]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002edc:	787b      	ldrb	r3, [r7, #1]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ee2:	887a      	ldrh	r2, [r7, #2]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ee8:	e003      	b.n	8002ef2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002eea:	887b      	ldrh	r3, [r7, #2]
 8002eec:	041a      	lsls	r2, r3, #16
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	619a      	str	r2, [r3, #24]
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
	...

08002f00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f0a:	4b08      	ldr	r3, [pc, #32]	; (8002f2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f0c:	695a      	ldr	r2, [r3, #20]
 8002f0e:	88fb      	ldrh	r3, [r7, #6]
 8002f10:	4013      	ands	r3, r2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d006      	beq.n	8002f24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f16:	4a05      	ldr	r2, [pc, #20]	; (8002f2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f18:	88fb      	ldrh	r3, [r7, #6]
 8002f1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f1c:	88fb      	ldrh	r3, [r7, #6]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f002 fbf8 	bl	8005714 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f24:	bf00      	nop
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40013c00 	.word	0x40013c00

08002f30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e264      	b.n	800340c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d075      	beq.n	800303a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f4e:	4ba3      	ldr	r3, [pc, #652]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 030c 	and.w	r3, r3, #12
 8002f56:	2b04      	cmp	r3, #4
 8002f58:	d00c      	beq.n	8002f74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f5a:	4ba0      	ldr	r3, [pc, #640]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f62:	2b08      	cmp	r3, #8
 8002f64:	d112      	bne.n	8002f8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f66:	4b9d      	ldr	r3, [pc, #628]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f72:	d10b      	bne.n	8002f8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f74:	4b99      	ldr	r3, [pc, #612]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d05b      	beq.n	8003038 <HAL_RCC_OscConfig+0x108>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d157      	bne.n	8003038 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e23f      	b.n	800340c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f94:	d106      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x74>
 8002f96:	4b91      	ldr	r3, [pc, #580]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a90      	ldr	r2, [pc, #576]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8002f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa0:	6013      	str	r3, [r2, #0]
 8002fa2:	e01d      	b.n	8002fe0 <HAL_RCC_OscConfig+0xb0>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fac:	d10c      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x98>
 8002fae:	4b8b      	ldr	r3, [pc, #556]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a8a      	ldr	r2, [pc, #552]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8002fb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fb8:	6013      	str	r3, [r2, #0]
 8002fba:	4b88      	ldr	r3, [pc, #544]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a87      	ldr	r2, [pc, #540]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8002fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc4:	6013      	str	r3, [r2, #0]
 8002fc6:	e00b      	b.n	8002fe0 <HAL_RCC_OscConfig+0xb0>
 8002fc8:	4b84      	ldr	r3, [pc, #528]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a83      	ldr	r2, [pc, #524]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8002fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fd2:	6013      	str	r3, [r2, #0]
 8002fd4:	4b81      	ldr	r3, [pc, #516]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a80      	ldr	r2, [pc, #512]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8002fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d013      	beq.n	8003010 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe8:	f7fe fea8 	bl	8001d3c <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ff0:	f7fe fea4 	bl	8001d3c <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b64      	cmp	r3, #100	; 0x64
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e204      	b.n	800340c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003002:	4b76      	ldr	r3, [pc, #472]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d0f0      	beq.n	8002ff0 <HAL_RCC_OscConfig+0xc0>
 800300e:	e014      	b.n	800303a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003010:	f7fe fe94 	bl	8001d3c <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003018:	f7fe fe90 	bl	8001d3c <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b64      	cmp	r3, #100	; 0x64
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e1f0      	b.n	800340c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800302a:	4b6c      	ldr	r3, [pc, #432]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1f0      	bne.n	8003018 <HAL_RCC_OscConfig+0xe8>
 8003036:	e000      	b.n	800303a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d063      	beq.n	800310e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003046:	4b65      	ldr	r3, [pc, #404]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 030c 	and.w	r3, r3, #12
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00b      	beq.n	800306a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003052:	4b62      	ldr	r3, [pc, #392]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800305a:	2b08      	cmp	r3, #8
 800305c:	d11c      	bne.n	8003098 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800305e:	4b5f      	ldr	r3, [pc, #380]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d116      	bne.n	8003098 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800306a:	4b5c      	ldr	r3, [pc, #368]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d005      	beq.n	8003082 <HAL_RCC_OscConfig+0x152>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d001      	beq.n	8003082 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e1c4      	b.n	800340c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003082:	4b56      	ldr	r3, [pc, #344]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	4952      	ldr	r1, [pc, #328]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8003092:	4313      	orrs	r3, r2
 8003094:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003096:	e03a      	b.n	800310e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d020      	beq.n	80030e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030a0:	4b4f      	ldr	r3, [pc, #316]	; (80031e0 <HAL_RCC_OscConfig+0x2b0>)
 80030a2:	2201      	movs	r2, #1
 80030a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a6:	f7fe fe49 	bl	8001d3c <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030ae:	f7fe fe45 	bl	8001d3c <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e1a5      	b.n	800340c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c0:	4b46      	ldr	r3, [pc, #280]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0f0      	beq.n	80030ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030cc:	4b43      	ldr	r3, [pc, #268]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	4940      	ldr	r1, [pc, #256]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	600b      	str	r3, [r1, #0]
 80030e0:	e015      	b.n	800310e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030e2:	4b3f      	ldr	r3, [pc, #252]	; (80031e0 <HAL_RCC_OscConfig+0x2b0>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e8:	f7fe fe28 	bl	8001d3c <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030f0:	f7fe fe24 	bl	8001d3c <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e184      	b.n	800340c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003102:	4b36      	ldr	r3, [pc, #216]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f0      	bne.n	80030f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0308 	and.w	r3, r3, #8
 8003116:	2b00      	cmp	r3, #0
 8003118:	d030      	beq.n	800317c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d016      	beq.n	8003150 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003122:	4b30      	ldr	r3, [pc, #192]	; (80031e4 <HAL_RCC_OscConfig+0x2b4>)
 8003124:	2201      	movs	r2, #1
 8003126:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003128:	f7fe fe08 	bl	8001d3c <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003130:	f7fe fe04 	bl	8001d3c <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e164      	b.n	800340c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003142:	4b26      	ldr	r3, [pc, #152]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8003144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0f0      	beq.n	8003130 <HAL_RCC_OscConfig+0x200>
 800314e:	e015      	b.n	800317c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003150:	4b24      	ldr	r3, [pc, #144]	; (80031e4 <HAL_RCC_OscConfig+0x2b4>)
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003156:	f7fe fdf1 	bl	8001d3c <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800315e:	f7fe fded 	bl	8001d3c <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e14d      	b.n	800340c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003170:	4b1a      	ldr	r3, [pc, #104]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8003172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1f0      	bne.n	800315e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 80a0 	beq.w	80032ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800318a:	2300      	movs	r3, #0
 800318c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800318e:	4b13      	ldr	r3, [pc, #76]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10f      	bne.n	80031ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800319a:	2300      	movs	r3, #0
 800319c:	60bb      	str	r3, [r7, #8]
 800319e:	4b0f      	ldr	r3, [pc, #60]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	4a0e      	ldr	r2, [pc, #56]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 80031a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031a8:	6413      	str	r3, [r2, #64]	; 0x40
 80031aa:	4b0c      	ldr	r3, [pc, #48]	; (80031dc <HAL_RCC_OscConfig+0x2ac>)
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b2:	60bb      	str	r3, [r7, #8]
 80031b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031b6:	2301      	movs	r3, #1
 80031b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ba:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <HAL_RCC_OscConfig+0x2b8>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d121      	bne.n	800320a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031c6:	4b08      	ldr	r3, [pc, #32]	; (80031e8 <HAL_RCC_OscConfig+0x2b8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a07      	ldr	r2, [pc, #28]	; (80031e8 <HAL_RCC_OscConfig+0x2b8>)
 80031cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031d2:	f7fe fdb3 	bl	8001d3c <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d8:	e011      	b.n	80031fe <HAL_RCC_OscConfig+0x2ce>
 80031da:	bf00      	nop
 80031dc:	40023800 	.word	0x40023800
 80031e0:	42470000 	.word	0x42470000
 80031e4:	42470e80 	.word	0x42470e80
 80031e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ec:	f7fe fda6 	bl	8001d3c <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e106      	b.n	800340c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031fe:	4b85      	ldr	r3, [pc, #532]	; (8003414 <HAL_RCC_OscConfig+0x4e4>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0f0      	beq.n	80031ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d106      	bne.n	8003220 <HAL_RCC_OscConfig+0x2f0>
 8003212:	4b81      	ldr	r3, [pc, #516]	; (8003418 <HAL_RCC_OscConfig+0x4e8>)
 8003214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003216:	4a80      	ldr	r2, [pc, #512]	; (8003418 <HAL_RCC_OscConfig+0x4e8>)
 8003218:	f043 0301 	orr.w	r3, r3, #1
 800321c:	6713      	str	r3, [r2, #112]	; 0x70
 800321e:	e01c      	b.n	800325a <HAL_RCC_OscConfig+0x32a>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	2b05      	cmp	r3, #5
 8003226:	d10c      	bne.n	8003242 <HAL_RCC_OscConfig+0x312>
 8003228:	4b7b      	ldr	r3, [pc, #492]	; (8003418 <HAL_RCC_OscConfig+0x4e8>)
 800322a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322c:	4a7a      	ldr	r2, [pc, #488]	; (8003418 <HAL_RCC_OscConfig+0x4e8>)
 800322e:	f043 0304 	orr.w	r3, r3, #4
 8003232:	6713      	str	r3, [r2, #112]	; 0x70
 8003234:	4b78      	ldr	r3, [pc, #480]	; (8003418 <HAL_RCC_OscConfig+0x4e8>)
 8003236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003238:	4a77      	ldr	r2, [pc, #476]	; (8003418 <HAL_RCC_OscConfig+0x4e8>)
 800323a:	f043 0301 	orr.w	r3, r3, #1
 800323e:	6713      	str	r3, [r2, #112]	; 0x70
 8003240:	e00b      	b.n	800325a <HAL_RCC_OscConfig+0x32a>
 8003242:	4b75      	ldr	r3, [pc, #468]	; (8003418 <HAL_RCC_OscConfig+0x4e8>)
 8003244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003246:	4a74      	ldr	r2, [pc, #464]	; (8003418 <HAL_RCC_OscConfig+0x4e8>)
 8003248:	f023 0301 	bic.w	r3, r3, #1
 800324c:	6713      	str	r3, [r2, #112]	; 0x70
 800324e:	4b72      	ldr	r3, [pc, #456]	; (8003418 <HAL_RCC_OscConfig+0x4e8>)
 8003250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003252:	4a71      	ldr	r2, [pc, #452]	; (8003418 <HAL_RCC_OscConfig+0x4e8>)
 8003254:	f023 0304 	bic.w	r3, r3, #4
 8003258:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d015      	beq.n	800328e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003262:	f7fe fd6b 	bl	8001d3c <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003268:	e00a      	b.n	8003280 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800326a:	f7fe fd67 	bl	8001d3c <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	f241 3288 	movw	r2, #5000	; 0x1388
 8003278:	4293      	cmp	r3, r2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e0c5      	b.n	800340c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003280:	4b65      	ldr	r3, [pc, #404]	; (8003418 <HAL_RCC_OscConfig+0x4e8>)
 8003282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d0ee      	beq.n	800326a <HAL_RCC_OscConfig+0x33a>
 800328c:	e014      	b.n	80032b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800328e:	f7fe fd55 	bl	8001d3c <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003294:	e00a      	b.n	80032ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003296:	f7fe fd51 	bl	8001d3c <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e0af      	b.n	800340c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ac:	4b5a      	ldr	r3, [pc, #360]	; (8003418 <HAL_RCC_OscConfig+0x4e8>)
 80032ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1ee      	bne.n	8003296 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032b8:	7dfb      	ldrb	r3, [r7, #23]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d105      	bne.n	80032ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032be:	4b56      	ldr	r3, [pc, #344]	; (8003418 <HAL_RCC_OscConfig+0x4e8>)
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	4a55      	ldr	r2, [pc, #340]	; (8003418 <HAL_RCC_OscConfig+0x4e8>)
 80032c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 809b 	beq.w	800340a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032d4:	4b50      	ldr	r3, [pc, #320]	; (8003418 <HAL_RCC_OscConfig+0x4e8>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 030c 	and.w	r3, r3, #12
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d05c      	beq.n	800339a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d141      	bne.n	800336c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e8:	4b4c      	ldr	r3, [pc, #304]	; (800341c <HAL_RCC_OscConfig+0x4ec>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ee:	f7fe fd25 	bl	8001d3c <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032f6:	f7fe fd21 	bl	8001d3c <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e081      	b.n	800340c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003308:	4b43      	ldr	r3, [pc, #268]	; (8003418 <HAL_RCC_OscConfig+0x4e8>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1f0      	bne.n	80032f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	69da      	ldr	r2, [r3, #28]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	431a      	orrs	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	019b      	lsls	r3, r3, #6
 8003324:	431a      	orrs	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332a:	085b      	lsrs	r3, r3, #1
 800332c:	3b01      	subs	r3, #1
 800332e:	041b      	lsls	r3, r3, #16
 8003330:	431a      	orrs	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003336:	061b      	lsls	r3, r3, #24
 8003338:	4937      	ldr	r1, [pc, #220]	; (8003418 <HAL_RCC_OscConfig+0x4e8>)
 800333a:	4313      	orrs	r3, r2
 800333c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800333e:	4b37      	ldr	r3, [pc, #220]	; (800341c <HAL_RCC_OscConfig+0x4ec>)
 8003340:	2201      	movs	r2, #1
 8003342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003344:	f7fe fcfa 	bl	8001d3c <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800334c:	f7fe fcf6 	bl	8001d3c <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e056      	b.n	800340c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800335e:	4b2e      	ldr	r3, [pc, #184]	; (8003418 <HAL_RCC_OscConfig+0x4e8>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d0f0      	beq.n	800334c <HAL_RCC_OscConfig+0x41c>
 800336a:	e04e      	b.n	800340a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800336c:	4b2b      	ldr	r3, [pc, #172]	; (800341c <HAL_RCC_OscConfig+0x4ec>)
 800336e:	2200      	movs	r2, #0
 8003370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003372:	f7fe fce3 	bl	8001d3c <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800337a:	f7fe fcdf 	bl	8001d3c <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e03f      	b.n	800340c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800338c:	4b22      	ldr	r3, [pc, #136]	; (8003418 <HAL_RCC_OscConfig+0x4e8>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1f0      	bne.n	800337a <HAL_RCC_OscConfig+0x44a>
 8003398:	e037      	b.n	800340a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d101      	bne.n	80033a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e032      	b.n	800340c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033a6:	4b1c      	ldr	r3, [pc, #112]	; (8003418 <HAL_RCC_OscConfig+0x4e8>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d028      	beq.n	8003406 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033be:	429a      	cmp	r2, r3
 80033c0:	d121      	bne.n	8003406 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d11a      	bne.n	8003406 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033d6:	4013      	ands	r3, r2
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033dc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033de:	4293      	cmp	r3, r2
 80033e0:	d111      	bne.n	8003406 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ec:	085b      	lsrs	r3, r3, #1
 80033ee:	3b01      	subs	r3, #1
 80033f0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d107      	bne.n	8003406 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003400:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003402:	429a      	cmp	r2, r3
 8003404:	d001      	beq.n	800340a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e000      	b.n	800340c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3718      	adds	r7, #24
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	40007000 	.word	0x40007000
 8003418:	40023800 	.word	0x40023800
 800341c:	42470060 	.word	0x42470060

08003420 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e0cc      	b.n	80035ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003434:	4b68      	ldr	r3, [pc, #416]	; (80035d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d90c      	bls.n	800345c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003442:	4b65      	ldr	r3, [pc, #404]	; (80035d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800344a:	4b63      	ldr	r3, [pc, #396]	; (80035d8 <HAL_RCC_ClockConfig+0x1b8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	429a      	cmp	r2, r3
 8003456:	d001      	beq.n	800345c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e0b8      	b.n	80035ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d020      	beq.n	80034aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b00      	cmp	r3, #0
 8003472:	d005      	beq.n	8003480 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003474:	4b59      	ldr	r3, [pc, #356]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	4a58      	ldr	r2, [pc, #352]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 800347a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800347e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0308 	and.w	r3, r3, #8
 8003488:	2b00      	cmp	r3, #0
 800348a:	d005      	beq.n	8003498 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800348c:	4b53      	ldr	r3, [pc, #332]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	4a52      	ldr	r2, [pc, #328]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 8003492:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003496:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003498:	4b50      	ldr	r3, [pc, #320]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	494d      	ldr	r1, [pc, #308]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d044      	beq.n	8003540 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d107      	bne.n	80034ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034be:	4b47      	ldr	r3, [pc, #284]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d119      	bne.n	80034fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e07f      	b.n	80035ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d003      	beq.n	80034de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034da:	2b03      	cmp	r3, #3
 80034dc:	d107      	bne.n	80034ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034de:	4b3f      	ldr	r3, [pc, #252]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d109      	bne.n	80034fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e06f      	b.n	80035ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ee:	4b3b      	ldr	r3, [pc, #236]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e067      	b.n	80035ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034fe:	4b37      	ldr	r3, [pc, #220]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f023 0203 	bic.w	r2, r3, #3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	4934      	ldr	r1, [pc, #208]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 800350c:	4313      	orrs	r3, r2
 800350e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003510:	f7fe fc14 	bl	8001d3c <HAL_GetTick>
 8003514:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003516:	e00a      	b.n	800352e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003518:	f7fe fc10 	bl	8001d3c <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	f241 3288 	movw	r2, #5000	; 0x1388
 8003526:	4293      	cmp	r3, r2
 8003528:	d901      	bls.n	800352e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e04f      	b.n	80035ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800352e:	4b2b      	ldr	r3, [pc, #172]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 020c 	and.w	r2, r3, #12
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	429a      	cmp	r2, r3
 800353e:	d1eb      	bne.n	8003518 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003540:	4b25      	ldr	r3, [pc, #148]	; (80035d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0307 	and.w	r3, r3, #7
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	429a      	cmp	r2, r3
 800354c:	d20c      	bcs.n	8003568 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800354e:	4b22      	ldr	r3, [pc, #136]	; (80035d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	b2d2      	uxtb	r2, r2
 8003554:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003556:	4b20      	ldr	r3, [pc, #128]	; (80035d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0307 	and.w	r3, r3, #7
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	429a      	cmp	r2, r3
 8003562:	d001      	beq.n	8003568 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e032      	b.n	80035ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	d008      	beq.n	8003586 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003574:	4b19      	ldr	r3, [pc, #100]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	4916      	ldr	r1, [pc, #88]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 8003582:	4313      	orrs	r3, r2
 8003584:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0308 	and.w	r3, r3, #8
 800358e:	2b00      	cmp	r3, #0
 8003590:	d009      	beq.n	80035a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003592:	4b12      	ldr	r3, [pc, #72]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	490e      	ldr	r1, [pc, #56]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035a6:	f000 f821 	bl	80035ec <HAL_RCC_GetSysClockFreq>
 80035aa:	4602      	mov	r2, r0
 80035ac:	4b0b      	ldr	r3, [pc, #44]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	091b      	lsrs	r3, r3, #4
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	490a      	ldr	r1, [pc, #40]	; (80035e0 <HAL_RCC_ClockConfig+0x1c0>)
 80035b8:	5ccb      	ldrb	r3, [r1, r3]
 80035ba:	fa22 f303 	lsr.w	r3, r2, r3
 80035be:	4a09      	ldr	r2, [pc, #36]	; (80035e4 <HAL_RCC_ClockConfig+0x1c4>)
 80035c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035c2:	4b09      	ldr	r3, [pc, #36]	; (80035e8 <HAL_RCC_ClockConfig+0x1c8>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fe fb74 	bl	8001cb4 <HAL_InitTick>

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	40023c00 	.word	0x40023c00
 80035dc:	40023800 	.word	0x40023800
 80035e0:	0800833c 	.word	0x0800833c
 80035e4:	20000000 	.word	0x20000000
 80035e8:	20000004 	.word	0x20000004

080035ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80035f0:	b084      	sub	sp, #16
 80035f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035f4:	2300      	movs	r3, #0
 80035f6:	607b      	str	r3, [r7, #4]
 80035f8:	2300      	movs	r3, #0
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	2300      	movs	r3, #0
 80035fe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003604:	4b67      	ldr	r3, [pc, #412]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 030c 	and.w	r3, r3, #12
 800360c:	2b08      	cmp	r3, #8
 800360e:	d00d      	beq.n	800362c <HAL_RCC_GetSysClockFreq+0x40>
 8003610:	2b08      	cmp	r3, #8
 8003612:	f200 80bd 	bhi.w	8003790 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003616:	2b00      	cmp	r3, #0
 8003618:	d002      	beq.n	8003620 <HAL_RCC_GetSysClockFreq+0x34>
 800361a:	2b04      	cmp	r3, #4
 800361c:	d003      	beq.n	8003626 <HAL_RCC_GetSysClockFreq+0x3a>
 800361e:	e0b7      	b.n	8003790 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003620:	4b61      	ldr	r3, [pc, #388]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003622:	60bb      	str	r3, [r7, #8]
       break;
 8003624:	e0b7      	b.n	8003796 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003626:	4b61      	ldr	r3, [pc, #388]	; (80037ac <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003628:	60bb      	str	r3, [r7, #8]
      break;
 800362a:	e0b4      	b.n	8003796 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800362c:	4b5d      	ldr	r3, [pc, #372]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003634:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003636:	4b5b      	ldr	r3, [pc, #364]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d04d      	beq.n	80036de <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003642:	4b58      	ldr	r3, [pc, #352]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	099b      	lsrs	r3, r3, #6
 8003648:	461a      	mov	r2, r3
 800364a:	f04f 0300 	mov.w	r3, #0
 800364e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003652:	f04f 0100 	mov.w	r1, #0
 8003656:	ea02 0800 	and.w	r8, r2, r0
 800365a:	ea03 0901 	and.w	r9, r3, r1
 800365e:	4640      	mov	r0, r8
 8003660:	4649      	mov	r1, r9
 8003662:	f04f 0200 	mov.w	r2, #0
 8003666:	f04f 0300 	mov.w	r3, #0
 800366a:	014b      	lsls	r3, r1, #5
 800366c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003670:	0142      	lsls	r2, r0, #5
 8003672:	4610      	mov	r0, r2
 8003674:	4619      	mov	r1, r3
 8003676:	ebb0 0008 	subs.w	r0, r0, r8
 800367a:	eb61 0109 	sbc.w	r1, r1, r9
 800367e:	f04f 0200 	mov.w	r2, #0
 8003682:	f04f 0300 	mov.w	r3, #0
 8003686:	018b      	lsls	r3, r1, #6
 8003688:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800368c:	0182      	lsls	r2, r0, #6
 800368e:	1a12      	subs	r2, r2, r0
 8003690:	eb63 0301 	sbc.w	r3, r3, r1
 8003694:	f04f 0000 	mov.w	r0, #0
 8003698:	f04f 0100 	mov.w	r1, #0
 800369c:	00d9      	lsls	r1, r3, #3
 800369e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036a2:	00d0      	lsls	r0, r2, #3
 80036a4:	4602      	mov	r2, r0
 80036a6:	460b      	mov	r3, r1
 80036a8:	eb12 0208 	adds.w	r2, r2, r8
 80036ac:	eb43 0309 	adc.w	r3, r3, r9
 80036b0:	f04f 0000 	mov.w	r0, #0
 80036b4:	f04f 0100 	mov.w	r1, #0
 80036b8:	0259      	lsls	r1, r3, #9
 80036ba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80036be:	0250      	lsls	r0, r2, #9
 80036c0:	4602      	mov	r2, r0
 80036c2:	460b      	mov	r3, r1
 80036c4:	4610      	mov	r0, r2
 80036c6:	4619      	mov	r1, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	461a      	mov	r2, r3
 80036cc:	f04f 0300 	mov.w	r3, #0
 80036d0:	f7fd fa6c 	bl	8000bac <__aeabi_uldivmod>
 80036d4:	4602      	mov	r2, r0
 80036d6:	460b      	mov	r3, r1
 80036d8:	4613      	mov	r3, r2
 80036da:	60fb      	str	r3, [r7, #12]
 80036dc:	e04a      	b.n	8003774 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036de:	4b31      	ldr	r3, [pc, #196]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	099b      	lsrs	r3, r3, #6
 80036e4:	461a      	mov	r2, r3
 80036e6:	f04f 0300 	mov.w	r3, #0
 80036ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80036ee:	f04f 0100 	mov.w	r1, #0
 80036f2:	ea02 0400 	and.w	r4, r2, r0
 80036f6:	ea03 0501 	and.w	r5, r3, r1
 80036fa:	4620      	mov	r0, r4
 80036fc:	4629      	mov	r1, r5
 80036fe:	f04f 0200 	mov.w	r2, #0
 8003702:	f04f 0300 	mov.w	r3, #0
 8003706:	014b      	lsls	r3, r1, #5
 8003708:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800370c:	0142      	lsls	r2, r0, #5
 800370e:	4610      	mov	r0, r2
 8003710:	4619      	mov	r1, r3
 8003712:	1b00      	subs	r0, r0, r4
 8003714:	eb61 0105 	sbc.w	r1, r1, r5
 8003718:	f04f 0200 	mov.w	r2, #0
 800371c:	f04f 0300 	mov.w	r3, #0
 8003720:	018b      	lsls	r3, r1, #6
 8003722:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003726:	0182      	lsls	r2, r0, #6
 8003728:	1a12      	subs	r2, r2, r0
 800372a:	eb63 0301 	sbc.w	r3, r3, r1
 800372e:	f04f 0000 	mov.w	r0, #0
 8003732:	f04f 0100 	mov.w	r1, #0
 8003736:	00d9      	lsls	r1, r3, #3
 8003738:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800373c:	00d0      	lsls	r0, r2, #3
 800373e:	4602      	mov	r2, r0
 8003740:	460b      	mov	r3, r1
 8003742:	1912      	adds	r2, r2, r4
 8003744:	eb45 0303 	adc.w	r3, r5, r3
 8003748:	f04f 0000 	mov.w	r0, #0
 800374c:	f04f 0100 	mov.w	r1, #0
 8003750:	0299      	lsls	r1, r3, #10
 8003752:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003756:	0290      	lsls	r0, r2, #10
 8003758:	4602      	mov	r2, r0
 800375a:	460b      	mov	r3, r1
 800375c:	4610      	mov	r0, r2
 800375e:	4619      	mov	r1, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	461a      	mov	r2, r3
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	f7fd fa20 	bl	8000bac <__aeabi_uldivmod>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	4613      	mov	r3, r2
 8003772:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003774:	4b0b      	ldr	r3, [pc, #44]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	0c1b      	lsrs	r3, r3, #16
 800377a:	f003 0303 	and.w	r3, r3, #3
 800377e:	3301      	adds	r3, #1
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	fbb2 f3f3 	udiv	r3, r2, r3
 800378c:	60bb      	str	r3, [r7, #8]
      break;
 800378e:	e002      	b.n	8003796 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003790:	4b05      	ldr	r3, [pc, #20]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003792:	60bb      	str	r3, [r7, #8]
      break;
 8003794:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003796:	68bb      	ldr	r3, [r7, #8]
}
 8003798:	4618      	mov	r0, r3
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80037a2:	bf00      	nop
 80037a4:	40023800 	.word	0x40023800
 80037a8:	00f42400 	.word	0x00f42400
 80037ac:	007a1200 	.word	0x007a1200

080037b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037b4:	4b03      	ldr	r3, [pc, #12]	; (80037c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80037b6:	681b      	ldr	r3, [r3, #0]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	20000000 	.word	0x20000000

080037c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037cc:	f7ff fff0 	bl	80037b0 <HAL_RCC_GetHCLKFreq>
 80037d0:	4602      	mov	r2, r0
 80037d2:	4b05      	ldr	r3, [pc, #20]	; (80037e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	0a9b      	lsrs	r3, r3, #10
 80037d8:	f003 0307 	and.w	r3, r3, #7
 80037dc:	4903      	ldr	r1, [pc, #12]	; (80037ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80037de:	5ccb      	ldrb	r3, [r1, r3]
 80037e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40023800 	.word	0x40023800
 80037ec:	0800834c 	.word	0x0800834c

080037f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037f4:	f7ff ffdc 	bl	80037b0 <HAL_RCC_GetHCLKFreq>
 80037f8:	4602      	mov	r2, r0
 80037fa:	4b05      	ldr	r3, [pc, #20]	; (8003810 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	0b5b      	lsrs	r3, r3, #13
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	4903      	ldr	r1, [pc, #12]	; (8003814 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003806:	5ccb      	ldrb	r3, [r1, r3]
 8003808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800380c:	4618      	mov	r0, r3
 800380e:	bd80      	pop	{r7, pc}
 8003810:	40023800 	.word	0x40023800
 8003814:	0800834c 	.word	0x0800834c

08003818 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e07b      	b.n	8003922 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	2b00      	cmp	r3, #0
 8003830:	d108      	bne.n	8003844 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800383a:	d009      	beq.n	8003850 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	61da      	str	r2, [r3, #28]
 8003842:	e005      	b.n	8003850 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d106      	bne.n	8003870 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7fd fe42 	bl	80014f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2202      	movs	r2, #2
 8003874:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003886:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003898:	431a      	orrs	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038a2:	431a      	orrs	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	431a      	orrs	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038c0:	431a      	orrs	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d4:	ea42 0103 	orr.w	r1, r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038dc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	0c1b      	lsrs	r3, r3, #16
 80038ee:	f003 0104 	and.w	r1, r3, #4
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f6:	f003 0210 	and.w	r2, r3, #16
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	69da      	ldr	r2, [r3, #28]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003910:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b088      	sub	sp, #32
 800392e:	af00      	add	r7, sp, #0
 8003930:	60f8      	str	r0, [r7, #12]
 8003932:	60b9      	str	r1, [r7, #8]
 8003934:	603b      	str	r3, [r7, #0]
 8003936:	4613      	mov	r3, r2
 8003938:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003944:	2b01      	cmp	r3, #1
 8003946:	d101      	bne.n	800394c <HAL_SPI_Transmit+0x22>
 8003948:	2302      	movs	r3, #2
 800394a:	e126      	b.n	8003b9a <HAL_SPI_Transmit+0x270>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003954:	f7fe f9f2 	bl	8001d3c <HAL_GetTick>
 8003958:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800395a:	88fb      	ldrh	r3, [r7, #6]
 800395c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b01      	cmp	r3, #1
 8003968:	d002      	beq.n	8003970 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800396a:	2302      	movs	r3, #2
 800396c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800396e:	e10b      	b.n	8003b88 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d002      	beq.n	800397c <HAL_SPI_Transmit+0x52>
 8003976:	88fb      	ldrh	r3, [r7, #6]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d102      	bne.n	8003982 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003980:	e102      	b.n	8003b88 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2203      	movs	r2, #3
 8003986:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	88fa      	ldrh	r2, [r7, #6]
 800399a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	88fa      	ldrh	r2, [r7, #6]
 80039a0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039c8:	d10f      	bne.n	80039ea <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f4:	2b40      	cmp	r3, #64	; 0x40
 80039f6:	d007      	beq.n	8003a08 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a10:	d14b      	bne.n	8003aaa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d002      	beq.n	8003a20 <HAL_SPI_Transmit+0xf6>
 8003a1a:	8afb      	ldrh	r3, [r7, #22]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d13e      	bne.n	8003a9e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a24:	881a      	ldrh	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a30:	1c9a      	adds	r2, r3, #2
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a44:	e02b      	b.n	8003a9e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d112      	bne.n	8003a7a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a58:	881a      	ldrh	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a64:	1c9a      	adds	r2, r3, #2
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	3b01      	subs	r3, #1
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a78:	e011      	b.n	8003a9e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a7a:	f7fe f95f 	bl	8001d3c <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d803      	bhi.n	8003a92 <HAL_SPI_Transmit+0x168>
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a90:	d102      	bne.n	8003a98 <HAL_SPI_Transmit+0x16e>
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d102      	bne.n	8003a9e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a9c:	e074      	b.n	8003b88 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1ce      	bne.n	8003a46 <HAL_SPI_Transmit+0x11c>
 8003aa8:	e04c      	b.n	8003b44 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d002      	beq.n	8003ab8 <HAL_SPI_Transmit+0x18e>
 8003ab2:	8afb      	ldrh	r3, [r7, #22]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d140      	bne.n	8003b3a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	330c      	adds	r3, #12
 8003ac2:	7812      	ldrb	r2, [r2, #0]
 8003ac4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aca:	1c5a      	adds	r2, r3, #1
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003ade:	e02c      	b.n	8003b3a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d113      	bne.n	8003b16 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	330c      	adds	r3, #12
 8003af8:	7812      	ldrb	r2, [r2, #0]
 8003afa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b00:	1c5a      	adds	r2, r3, #1
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b14:	e011      	b.n	8003b3a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b16:	f7fe f911 	bl	8001d3c <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d803      	bhi.n	8003b2e <HAL_SPI_Transmit+0x204>
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b2c:	d102      	bne.n	8003b34 <HAL_SPI_Transmit+0x20a>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d102      	bne.n	8003b3a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b38:	e026      	b.n	8003b88 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1cd      	bne.n	8003ae0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	6839      	ldr	r1, [r7, #0]
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 f8b3 	bl	8003cb4 <SPI_EndRxTxTransaction>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d002      	beq.n	8003b5a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2220      	movs	r2, #32
 8003b58:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10a      	bne.n	8003b78 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b62:	2300      	movs	r3, #0
 8003b64:	613b      	str	r3, [r7, #16]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	613b      	str	r3, [r7, #16]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	613b      	str	r3, [r7, #16]
 8003b76:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	77fb      	strb	r3, [r7, #31]
 8003b84:	e000      	b.n	8003b88 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003b86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b98:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3720      	adds	r7, #32
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
	...

08003ba4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b088      	sub	sp, #32
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	603b      	str	r3, [r7, #0]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003bb4:	f7fe f8c2 	bl	8001d3c <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bbc:	1a9b      	subs	r3, r3, r2
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003bc4:	f7fe f8ba 	bl	8001d3c <HAL_GetTick>
 8003bc8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003bca:	4b39      	ldr	r3, [pc, #228]	; (8003cb0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	015b      	lsls	r3, r3, #5
 8003bd0:	0d1b      	lsrs	r3, r3, #20
 8003bd2:	69fa      	ldr	r2, [r7, #28]
 8003bd4:	fb02 f303 	mul.w	r3, r2, r3
 8003bd8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bda:	e054      	b.n	8003c86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be2:	d050      	beq.n	8003c86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003be4:	f7fe f8aa 	bl	8001d3c <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	69fa      	ldr	r2, [r7, #28]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d902      	bls.n	8003bfa <SPI_WaitFlagStateUntilTimeout+0x56>
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d13d      	bne.n	8003c76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c12:	d111      	bne.n	8003c38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c1c:	d004      	beq.n	8003c28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c26:	d107      	bne.n	8003c38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c40:	d10f      	bne.n	8003c62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c50:	601a      	str	r2, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e017      	b.n	8003ca6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d101      	bne.n	8003c80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	3b01      	subs	r3, #1
 8003c84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	bf0c      	ite	eq
 8003c96:	2301      	moveq	r3, #1
 8003c98:	2300      	movne	r3, #0
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	79fb      	ldrb	r3, [r7, #7]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d19b      	bne.n	8003bdc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3720      	adds	r7, #32
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	20000000 	.word	0x20000000

08003cb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b088      	sub	sp, #32
 8003cb8:	af02      	add	r7, sp, #8
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003cc0:	4b1b      	ldr	r3, [pc, #108]	; (8003d30 <SPI_EndRxTxTransaction+0x7c>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a1b      	ldr	r2, [pc, #108]	; (8003d34 <SPI_EndRxTxTransaction+0x80>)
 8003cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cca:	0d5b      	lsrs	r3, r3, #21
 8003ccc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003cd0:	fb02 f303 	mul.w	r3, r2, r3
 8003cd4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cde:	d112      	bne.n	8003d06 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	2180      	movs	r1, #128	; 0x80
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f7ff ff5a 	bl	8003ba4 <SPI_WaitFlagStateUntilTimeout>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d016      	beq.n	8003d24 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cfa:	f043 0220 	orr.w	r2, r3, #32
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e00f      	b.n	8003d26 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00a      	beq.n	8003d22 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d1c:	2b80      	cmp	r3, #128	; 0x80
 8003d1e:	d0f2      	beq.n	8003d06 <SPI_EndRxTxTransaction+0x52>
 8003d20:	e000      	b.n	8003d24 <SPI_EndRxTxTransaction+0x70>
        break;
 8003d22:	bf00      	nop
  }

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3718      	adds	r7, #24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	20000000 	.word	0x20000000
 8003d34:	165e9f81 	.word	0x165e9f81

08003d38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e041      	b.n	8003dce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d106      	bne.n	8003d64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7fd fe3c 	bl	80019dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2202      	movs	r2, #2
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3304      	adds	r3, #4
 8003d74:	4619      	mov	r1, r3
 8003d76:	4610      	mov	r0, r2
 8003d78:	f000 fa8e 	bl	8004298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
	...

08003dd8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d001      	beq.n	8003df0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e046      	b.n	8003e7e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2202      	movs	r2, #2
 8003df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a23      	ldr	r2, [pc, #140]	; (8003e8c <HAL_TIM_Base_Start+0xb4>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d022      	beq.n	8003e48 <HAL_TIM_Base_Start+0x70>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e0a:	d01d      	beq.n	8003e48 <HAL_TIM_Base_Start+0x70>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a1f      	ldr	r2, [pc, #124]	; (8003e90 <HAL_TIM_Base_Start+0xb8>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d018      	beq.n	8003e48 <HAL_TIM_Base_Start+0x70>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a1e      	ldr	r2, [pc, #120]	; (8003e94 <HAL_TIM_Base_Start+0xbc>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d013      	beq.n	8003e48 <HAL_TIM_Base_Start+0x70>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a1c      	ldr	r2, [pc, #112]	; (8003e98 <HAL_TIM_Base_Start+0xc0>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d00e      	beq.n	8003e48 <HAL_TIM_Base_Start+0x70>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a1b      	ldr	r2, [pc, #108]	; (8003e9c <HAL_TIM_Base_Start+0xc4>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d009      	beq.n	8003e48 <HAL_TIM_Base_Start+0x70>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a19      	ldr	r2, [pc, #100]	; (8003ea0 <HAL_TIM_Base_Start+0xc8>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d004      	beq.n	8003e48 <HAL_TIM_Base_Start+0x70>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a18      	ldr	r2, [pc, #96]	; (8003ea4 <HAL_TIM_Base_Start+0xcc>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d111      	bne.n	8003e6c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f003 0307 	and.w	r3, r3, #7
 8003e52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2b06      	cmp	r3, #6
 8003e58:	d010      	beq.n	8003e7c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f042 0201 	orr.w	r2, r2, #1
 8003e68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e6a:	e007      	b.n	8003e7c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0201 	orr.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	40010000 	.word	0x40010000
 8003e90:	40000400 	.word	0x40000400
 8003e94:	40000800 	.word	0x40000800
 8003e98:	40000c00 	.word	0x40000c00
 8003e9c:	40010400 	.word	0x40010400
 8003ea0:	40014000 	.word	0x40014000
 8003ea4:	40001800 	.word	0x40001800

08003ea8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e097      	b.n	8003fec <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d106      	bne.n	8003ed6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f7fd fd3b 	bl	800194c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2202      	movs	r2, #2
 8003eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6812      	ldr	r2, [r2, #0]
 8003ee8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003eec:	f023 0307 	bic.w	r3, r3, #7
 8003ef0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	3304      	adds	r3, #4
 8003efa:	4619      	mov	r1, r3
 8003efc:	4610      	mov	r0, r2
 8003efe:	f000 f9cb 	bl	8004298 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f2a:	f023 0303 	bic.w	r3, r3, #3
 8003f2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	021b      	lsls	r3, r3, #8
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003f48:	f023 030c 	bic.w	r3, r3, #12
 8003f4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	68da      	ldr	r2, [r3, #12]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	021b      	lsls	r3, r3, #8
 8003f64:	4313      	orrs	r3, r2
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	011a      	lsls	r2, r3, #4
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	031b      	lsls	r3, r3, #12
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003f86:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003f8e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	011b      	lsls	r3, r3, #4
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3718      	adds	r7, #24
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004004:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800400c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004014:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800401c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d110      	bne.n	8004046 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004024:	7bfb      	ldrb	r3, [r7, #15]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d102      	bne.n	8004030 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800402a:	7b7b      	ldrb	r3, [r7, #13]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d001      	beq.n	8004034 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e069      	b.n	8004108 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2202      	movs	r2, #2
 8004038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2202      	movs	r2, #2
 8004040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004044:	e031      	b.n	80040aa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2b04      	cmp	r3, #4
 800404a:	d110      	bne.n	800406e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800404c:	7bbb      	ldrb	r3, [r7, #14]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d102      	bne.n	8004058 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004052:	7b3b      	ldrb	r3, [r7, #12]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d001      	beq.n	800405c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e055      	b.n	8004108 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2202      	movs	r2, #2
 8004060:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2202      	movs	r2, #2
 8004068:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800406c:	e01d      	b.n	80040aa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800406e:	7bfb      	ldrb	r3, [r7, #15]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d108      	bne.n	8004086 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004074:	7bbb      	ldrb	r3, [r7, #14]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d105      	bne.n	8004086 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800407a:	7b7b      	ldrb	r3, [r7, #13]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d102      	bne.n	8004086 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004080:	7b3b      	ldrb	r3, [r7, #12]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d001      	beq.n	800408a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e03e      	b.n	8004108 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2202      	movs	r2, #2
 800408e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2202      	movs	r2, #2
 8004096:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2202      	movs	r2, #2
 800409e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2202      	movs	r2, #2
 80040a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d003      	beq.n	80040b8 <HAL_TIM_Encoder_Start+0xc4>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d008      	beq.n	80040c8 <HAL_TIM_Encoder_Start+0xd4>
 80040b6:	e00f      	b.n	80040d8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2201      	movs	r2, #1
 80040be:	2100      	movs	r1, #0
 80040c0:	4618      	mov	r0, r3
 80040c2:	f000 fa23 	bl	800450c <TIM_CCxChannelCmd>
      break;
 80040c6:	e016      	b.n	80040f6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2201      	movs	r2, #1
 80040ce:	2104      	movs	r1, #4
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 fa1b 	bl	800450c <TIM_CCxChannelCmd>
      break;
 80040d6:	e00e      	b.n	80040f6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2201      	movs	r2, #1
 80040de:	2100      	movs	r1, #0
 80040e0:	4618      	mov	r0, r3
 80040e2:	f000 fa13 	bl	800450c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2201      	movs	r2, #1
 80040ec:	2104      	movs	r1, #4
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 fa0c 	bl	800450c <TIM_CCxChannelCmd>
      break;
 80040f4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f042 0201 	orr.w	r2, r2, #1
 8004104:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004120:	2b01      	cmp	r3, #1
 8004122:	d101      	bne.n	8004128 <HAL_TIM_ConfigClockSource+0x18>
 8004124:	2302      	movs	r3, #2
 8004126:	e0b3      	b.n	8004290 <HAL_TIM_ConfigClockSource+0x180>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2202      	movs	r2, #2
 8004134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004146:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800414e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004160:	d03e      	beq.n	80041e0 <HAL_TIM_ConfigClockSource+0xd0>
 8004162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004166:	f200 8087 	bhi.w	8004278 <HAL_TIM_ConfigClockSource+0x168>
 800416a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800416e:	f000 8085 	beq.w	800427c <HAL_TIM_ConfigClockSource+0x16c>
 8004172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004176:	d87f      	bhi.n	8004278 <HAL_TIM_ConfigClockSource+0x168>
 8004178:	2b70      	cmp	r3, #112	; 0x70
 800417a:	d01a      	beq.n	80041b2 <HAL_TIM_ConfigClockSource+0xa2>
 800417c:	2b70      	cmp	r3, #112	; 0x70
 800417e:	d87b      	bhi.n	8004278 <HAL_TIM_ConfigClockSource+0x168>
 8004180:	2b60      	cmp	r3, #96	; 0x60
 8004182:	d050      	beq.n	8004226 <HAL_TIM_ConfigClockSource+0x116>
 8004184:	2b60      	cmp	r3, #96	; 0x60
 8004186:	d877      	bhi.n	8004278 <HAL_TIM_ConfigClockSource+0x168>
 8004188:	2b50      	cmp	r3, #80	; 0x50
 800418a:	d03c      	beq.n	8004206 <HAL_TIM_ConfigClockSource+0xf6>
 800418c:	2b50      	cmp	r3, #80	; 0x50
 800418e:	d873      	bhi.n	8004278 <HAL_TIM_ConfigClockSource+0x168>
 8004190:	2b40      	cmp	r3, #64	; 0x40
 8004192:	d058      	beq.n	8004246 <HAL_TIM_ConfigClockSource+0x136>
 8004194:	2b40      	cmp	r3, #64	; 0x40
 8004196:	d86f      	bhi.n	8004278 <HAL_TIM_ConfigClockSource+0x168>
 8004198:	2b30      	cmp	r3, #48	; 0x30
 800419a:	d064      	beq.n	8004266 <HAL_TIM_ConfigClockSource+0x156>
 800419c:	2b30      	cmp	r3, #48	; 0x30
 800419e:	d86b      	bhi.n	8004278 <HAL_TIM_ConfigClockSource+0x168>
 80041a0:	2b20      	cmp	r3, #32
 80041a2:	d060      	beq.n	8004266 <HAL_TIM_ConfigClockSource+0x156>
 80041a4:	2b20      	cmp	r3, #32
 80041a6:	d867      	bhi.n	8004278 <HAL_TIM_ConfigClockSource+0x168>
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d05c      	beq.n	8004266 <HAL_TIM_ConfigClockSource+0x156>
 80041ac:	2b10      	cmp	r3, #16
 80041ae:	d05a      	beq.n	8004266 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80041b0:	e062      	b.n	8004278 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6818      	ldr	r0, [r3, #0]
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	6899      	ldr	r1, [r3, #8]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	f000 f983 	bl	80044cc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041d4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	609a      	str	r2, [r3, #8]
      break;
 80041de:	e04e      	b.n	800427e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6818      	ldr	r0, [r3, #0]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	6899      	ldr	r1, [r3, #8]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f000 f96c 	bl	80044cc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689a      	ldr	r2, [r3, #8]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004202:	609a      	str	r2, [r3, #8]
      break;
 8004204:	e03b      	b.n	800427e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6818      	ldr	r0, [r3, #0]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	6859      	ldr	r1, [r3, #4]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	461a      	mov	r2, r3
 8004214:	f000 f8e0 	bl	80043d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2150      	movs	r1, #80	; 0x50
 800421e:	4618      	mov	r0, r3
 8004220:	f000 f939 	bl	8004496 <TIM_ITRx_SetConfig>
      break;
 8004224:	e02b      	b.n	800427e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6818      	ldr	r0, [r3, #0]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	6859      	ldr	r1, [r3, #4]
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	461a      	mov	r2, r3
 8004234:	f000 f8ff 	bl	8004436 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2160      	movs	r1, #96	; 0x60
 800423e:	4618      	mov	r0, r3
 8004240:	f000 f929 	bl	8004496 <TIM_ITRx_SetConfig>
      break;
 8004244:	e01b      	b.n	800427e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6818      	ldr	r0, [r3, #0]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	6859      	ldr	r1, [r3, #4]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	461a      	mov	r2, r3
 8004254:	f000 f8c0 	bl	80043d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2140      	movs	r1, #64	; 0x40
 800425e:	4618      	mov	r0, r3
 8004260:	f000 f919 	bl	8004496 <TIM_ITRx_SetConfig>
      break;
 8004264:	e00b      	b.n	800427e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4619      	mov	r1, r3
 8004270:	4610      	mov	r0, r2
 8004272:	f000 f910 	bl	8004496 <TIM_ITRx_SetConfig>
        break;
 8004276:	e002      	b.n	800427e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004278:	bf00      	nop
 800427a:	e000      	b.n	800427e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800427c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a40      	ldr	r2, [pc, #256]	; (80043ac <TIM_Base_SetConfig+0x114>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d013      	beq.n	80042d8 <TIM_Base_SetConfig+0x40>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b6:	d00f      	beq.n	80042d8 <TIM_Base_SetConfig+0x40>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a3d      	ldr	r2, [pc, #244]	; (80043b0 <TIM_Base_SetConfig+0x118>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d00b      	beq.n	80042d8 <TIM_Base_SetConfig+0x40>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a3c      	ldr	r2, [pc, #240]	; (80043b4 <TIM_Base_SetConfig+0x11c>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d007      	beq.n	80042d8 <TIM_Base_SetConfig+0x40>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a3b      	ldr	r2, [pc, #236]	; (80043b8 <TIM_Base_SetConfig+0x120>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d003      	beq.n	80042d8 <TIM_Base_SetConfig+0x40>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a3a      	ldr	r2, [pc, #232]	; (80043bc <TIM_Base_SetConfig+0x124>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d108      	bne.n	80042ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a2f      	ldr	r2, [pc, #188]	; (80043ac <TIM_Base_SetConfig+0x114>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d02b      	beq.n	800434a <TIM_Base_SetConfig+0xb2>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f8:	d027      	beq.n	800434a <TIM_Base_SetConfig+0xb2>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a2c      	ldr	r2, [pc, #176]	; (80043b0 <TIM_Base_SetConfig+0x118>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d023      	beq.n	800434a <TIM_Base_SetConfig+0xb2>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a2b      	ldr	r2, [pc, #172]	; (80043b4 <TIM_Base_SetConfig+0x11c>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d01f      	beq.n	800434a <TIM_Base_SetConfig+0xb2>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a2a      	ldr	r2, [pc, #168]	; (80043b8 <TIM_Base_SetConfig+0x120>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d01b      	beq.n	800434a <TIM_Base_SetConfig+0xb2>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a29      	ldr	r2, [pc, #164]	; (80043bc <TIM_Base_SetConfig+0x124>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d017      	beq.n	800434a <TIM_Base_SetConfig+0xb2>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a28      	ldr	r2, [pc, #160]	; (80043c0 <TIM_Base_SetConfig+0x128>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d013      	beq.n	800434a <TIM_Base_SetConfig+0xb2>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a27      	ldr	r2, [pc, #156]	; (80043c4 <TIM_Base_SetConfig+0x12c>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d00f      	beq.n	800434a <TIM_Base_SetConfig+0xb2>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a26      	ldr	r2, [pc, #152]	; (80043c8 <TIM_Base_SetConfig+0x130>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d00b      	beq.n	800434a <TIM_Base_SetConfig+0xb2>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a25      	ldr	r2, [pc, #148]	; (80043cc <TIM_Base_SetConfig+0x134>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d007      	beq.n	800434a <TIM_Base_SetConfig+0xb2>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a24      	ldr	r2, [pc, #144]	; (80043d0 <TIM_Base_SetConfig+0x138>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d003      	beq.n	800434a <TIM_Base_SetConfig+0xb2>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a23      	ldr	r2, [pc, #140]	; (80043d4 <TIM_Base_SetConfig+0x13c>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d108      	bne.n	800435c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	4313      	orrs	r3, r2
 800435a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	4313      	orrs	r3, r2
 8004368:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a0a      	ldr	r2, [pc, #40]	; (80043ac <TIM_Base_SetConfig+0x114>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d003      	beq.n	8004390 <TIM_Base_SetConfig+0xf8>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a0c      	ldr	r2, [pc, #48]	; (80043bc <TIM_Base_SetConfig+0x124>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d103      	bne.n	8004398 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	691a      	ldr	r2, [r3, #16]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	615a      	str	r2, [r3, #20]
}
 800439e:	bf00      	nop
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	40010000 	.word	0x40010000
 80043b0:	40000400 	.word	0x40000400
 80043b4:	40000800 	.word	0x40000800
 80043b8:	40000c00 	.word	0x40000c00
 80043bc:	40010400 	.word	0x40010400
 80043c0:	40014000 	.word	0x40014000
 80043c4:	40014400 	.word	0x40014400
 80043c8:	40014800 	.word	0x40014800
 80043cc:	40001800 	.word	0x40001800
 80043d0:	40001c00 	.word	0x40001c00
 80043d4:	40002000 	.word	0x40002000

080043d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043d8:	b480      	push	{r7}
 80043da:	b087      	sub	sp, #28
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	f023 0201 	bic.w	r2, r3, #1
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004402:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	4313      	orrs	r3, r2
 800440c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f023 030a 	bic.w	r3, r3, #10
 8004414:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	4313      	orrs	r3, r2
 800441c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	621a      	str	r2, [r3, #32]
}
 800442a:	bf00      	nop
 800442c:	371c      	adds	r7, #28
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004436:	b480      	push	{r7}
 8004438:	b087      	sub	sp, #28
 800443a:	af00      	add	r7, sp, #0
 800443c:	60f8      	str	r0, [r7, #12]
 800443e:	60b9      	str	r1, [r7, #8]
 8004440:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	f023 0210 	bic.w	r2, r3, #16
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004460:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	031b      	lsls	r3, r3, #12
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	4313      	orrs	r3, r2
 800446a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004472:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	011b      	lsls	r3, r3, #4
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	4313      	orrs	r3, r2
 800447c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	621a      	str	r2, [r3, #32]
}
 800448a:	bf00      	nop
 800448c:	371c      	adds	r7, #28
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004496:	b480      	push	{r7}
 8004498:	b085      	sub	sp, #20
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
 800449e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044ae:	683a      	ldr	r2, [r7, #0]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	f043 0307 	orr.w	r3, r3, #7
 80044b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	609a      	str	r2, [r3, #8]
}
 80044c0:	bf00      	nop
 80044c2:	3714      	adds	r7, #20
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
 80044d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	021a      	lsls	r2, r3, #8
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	431a      	orrs	r2, r3
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	609a      	str	r2, [r3, #8]
}
 8004500:	bf00      	nop
 8004502:	371c      	adds	r7, #28
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800450c:	b480      	push	{r7}
 800450e:	b087      	sub	sp, #28
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f003 031f 	and.w	r3, r3, #31
 800451e:	2201      	movs	r2, #1
 8004520:	fa02 f303 	lsl.w	r3, r2, r3
 8004524:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6a1a      	ldr	r2, [r3, #32]
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	43db      	mvns	r3, r3
 800452e:	401a      	ands	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6a1a      	ldr	r2, [r3, #32]
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f003 031f 	and.w	r3, r3, #31
 800453e:	6879      	ldr	r1, [r7, #4]
 8004540:	fa01 f303 	lsl.w	r3, r1, r3
 8004544:	431a      	orrs	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	621a      	str	r2, [r3, #32]
}
 800454a:	bf00      	nop
 800454c:	371c      	adds	r7, #28
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
	...

08004558 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004568:	2b01      	cmp	r3, #1
 800456a:	d101      	bne.n	8004570 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800456c:	2302      	movs	r3, #2
 800456e:	e05a      	b.n	8004626 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004596:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	4313      	orrs	r3, r2
 80045a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a21      	ldr	r2, [pc, #132]	; (8004634 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d022      	beq.n	80045fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045bc:	d01d      	beq.n	80045fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a1d      	ldr	r2, [pc, #116]	; (8004638 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d018      	beq.n	80045fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a1b      	ldr	r2, [pc, #108]	; (800463c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d013      	beq.n	80045fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a1a      	ldr	r2, [pc, #104]	; (8004640 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d00e      	beq.n	80045fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a18      	ldr	r2, [pc, #96]	; (8004644 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d009      	beq.n	80045fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a17      	ldr	r2, [pc, #92]	; (8004648 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d004      	beq.n	80045fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a15      	ldr	r2, [pc, #84]	; (800464c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d10c      	bne.n	8004614 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004600:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	4313      	orrs	r3, r2
 800460a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3714      	adds	r7, #20
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	40010000 	.word	0x40010000
 8004638:	40000400 	.word	0x40000400
 800463c:	40000800 	.word	0x40000800
 8004640:	40000c00 	.word	0x40000c00
 8004644:	40010400 	.word	0x40010400
 8004648:	40014000 	.word	0x40014000
 800464c:	40001800 	.word	0x40001800

08004650 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e03f      	b.n	80046e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d106      	bne.n	800467c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7fd fa26 	bl	8001ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2224      	movs	r2, #36	; 0x24
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68da      	ldr	r2, [r3, #12]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004692:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 fc99 	bl	8004fcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	691a      	ldr	r2, [r3, #16]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	695a      	ldr	r2, [r3, #20]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68da      	ldr	r2, [r3, #12]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2220      	movs	r2, #32
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2220      	movs	r2, #32
 80046dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b084      	sub	sp, #16
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	60f8      	str	r0, [r7, #12]
 80046f2:	60b9      	str	r1, [r7, #8]
 80046f4:	4613      	mov	r3, r2
 80046f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b20      	cmp	r3, #32
 8004702:	d11d      	bne.n	8004740 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d002      	beq.n	8004710 <HAL_UART_Receive_DMA+0x26>
 800470a:	88fb      	ldrh	r3, [r7, #6]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d101      	bne.n	8004714 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e016      	b.n	8004742 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800471a:	2b01      	cmp	r3, #1
 800471c:	d101      	bne.n	8004722 <HAL_UART_Receive_DMA+0x38>
 800471e:	2302      	movs	r3, #2
 8004720:	e00f      	b.n	8004742 <HAL_UART_Receive_DMA+0x58>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8004730:	88fb      	ldrh	r3, [r7, #6]
 8004732:	461a      	mov	r2, r3
 8004734:	68b9      	ldr	r1, [r7, #8]
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f000 fa8e 	bl	8004c58 <UART_Start_Receive_DMA>
 800473c:	4603      	mov	r3, r0
 800473e:	e000      	b.n	8004742 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004740:	2302      	movs	r3, #2
  }
}
 8004742:	4618      	mov	r0, r3
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
	...

0800474c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b08a      	sub	sp, #40	; 0x28
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800476c:	2300      	movs	r3, #0
 800476e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004770:	2300      	movs	r3, #0
 8004772:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	f003 030f 	and.w	r3, r3, #15
 800477a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10d      	bne.n	800479e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	f003 0320 	and.w	r3, r3, #32
 8004788:	2b00      	cmp	r3, #0
 800478a:	d008      	beq.n	800479e <HAL_UART_IRQHandler+0x52>
 800478c:	6a3b      	ldr	r3, [r7, #32]
 800478e:	f003 0320 	and.w	r3, r3, #32
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 fb81 	bl	8004e9e <UART_Receive_IT>
      return;
 800479c:	e17c      	b.n	8004a98 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 80b1 	beq.w	8004908 <HAL_UART_IRQHandler+0x1bc>
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d105      	bne.n	80047bc <HAL_UART_IRQHandler+0x70>
 80047b0:	6a3b      	ldr	r3, [r7, #32]
 80047b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 80a6 	beq.w	8004908 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00a      	beq.n	80047dc <HAL_UART_IRQHandler+0x90>
 80047c6:	6a3b      	ldr	r3, [r7, #32]
 80047c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d005      	beq.n	80047dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d4:	f043 0201 	orr.w	r2, r3, #1
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047de:	f003 0304 	and.w	r3, r3, #4
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00a      	beq.n	80047fc <HAL_UART_IRQHandler+0xb0>
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d005      	beq.n	80047fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f4:	f043 0202 	orr.w	r2, r3, #2
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00a      	beq.n	800481c <HAL_UART_IRQHandler+0xd0>
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b00      	cmp	r3, #0
 800480e:	d005      	beq.n	800481c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004814:	f043 0204 	orr.w	r2, r3, #4
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	f003 0308 	and.w	r3, r3, #8
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00f      	beq.n	8004846 <HAL_UART_IRQHandler+0xfa>
 8004826:	6a3b      	ldr	r3, [r7, #32]
 8004828:	f003 0320 	and.w	r3, r3, #32
 800482c:	2b00      	cmp	r3, #0
 800482e:	d104      	bne.n	800483a <HAL_UART_IRQHandler+0xee>
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d005      	beq.n	8004846 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	f043 0208 	orr.w	r2, r3, #8
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 811f 	beq.w	8004a8e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004852:	f003 0320 	and.w	r3, r3, #32
 8004856:	2b00      	cmp	r3, #0
 8004858:	d007      	beq.n	800486a <HAL_UART_IRQHandler+0x11e>
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	f003 0320 	and.w	r3, r3, #32
 8004860:	2b00      	cmp	r3, #0
 8004862:	d002      	beq.n	800486a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 fb1a 	bl	8004e9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004874:	2b40      	cmp	r3, #64	; 0x40
 8004876:	bf0c      	ite	eq
 8004878:	2301      	moveq	r3, #1
 800487a:	2300      	movne	r3, #0
 800487c:	b2db      	uxtb	r3, r3
 800487e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004884:	f003 0308 	and.w	r3, r3, #8
 8004888:	2b00      	cmp	r3, #0
 800488a:	d102      	bne.n	8004892 <HAL_UART_IRQHandler+0x146>
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d031      	beq.n	80048f6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 fa5a 	bl	8004d4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a2:	2b40      	cmp	r3, #64	; 0x40
 80048a4:	d123      	bne.n	80048ee <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	695a      	ldr	r2, [r3, #20]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048b4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d013      	beq.n	80048e6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c2:	4a77      	ldr	r2, [pc, #476]	; (8004aa0 <HAL_UART_IRQHandler+0x354>)
 80048c4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fd fed6 	bl	800267c <HAL_DMA_Abort_IT>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d016      	beq.n	8004904 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048e0:	4610      	mov	r0, r2
 80048e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048e4:	e00e      	b.n	8004904 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f8f0 	bl	8004acc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048ec:	e00a      	b.n	8004904 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f8ec 	bl	8004acc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048f4:	e006      	b.n	8004904 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f8e8 	bl	8004acc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004902:	e0c4      	b.n	8004a8e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004904:	bf00      	nop
    return;
 8004906:	e0c2      	b.n	8004a8e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490c:	2b01      	cmp	r3, #1
 800490e:	f040 80a2 	bne.w	8004a56 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004914:	f003 0310 	and.w	r3, r3, #16
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 809c 	beq.w	8004a56 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800491e:	6a3b      	ldr	r3, [r7, #32]
 8004920:	f003 0310 	and.w	r3, r3, #16
 8004924:	2b00      	cmp	r3, #0
 8004926:	f000 8096 	beq.w	8004a56 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800492a:	2300      	movs	r3, #0
 800492c:	60fb      	str	r3, [r7, #12]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	60fb      	str	r3, [r7, #12]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	60fb      	str	r3, [r7, #12]
 800493e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494a:	2b40      	cmp	r3, #64	; 0x40
 800494c:	d14f      	bne.n	80049ee <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004958:	8a3b      	ldrh	r3, [r7, #16]
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 8099 	beq.w	8004a92 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004964:	8a3a      	ldrh	r2, [r7, #16]
 8004966:	429a      	cmp	r2, r3
 8004968:	f080 8093 	bcs.w	8004a92 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	8a3a      	ldrh	r2, [r7, #16]
 8004970:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004976:	69db      	ldr	r3, [r3, #28]
 8004978:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800497c:	d02b      	beq.n	80049d6 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68da      	ldr	r2, [r3, #12]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800498c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	695a      	ldr	r2, [r3, #20]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 0201 	bic.w	r2, r2, #1
 800499c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	695a      	ldr	r2, [r3, #20]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049ac:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2220      	movs	r2, #32
 80049b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68da      	ldr	r2, [r3, #12]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f022 0210 	bic.w	r2, r2, #16
 80049ca:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7fd fde3 	bl	800259c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049de:	b29b      	uxth	r3, r3
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	4619      	mov	r1, r3
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f87a 	bl	8004ae0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80049ec:	e051      	b.n	8004a92 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d047      	beq.n	8004a96 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8004a06:	8a7b      	ldrh	r3, [r7, #18]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d044      	beq.n	8004a96 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68da      	ldr	r2, [r3, #12]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004a1a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	695a      	ldr	r2, [r3, #20]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f022 0201 	bic.w	r2, r2, #1
 8004a2a:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2220      	movs	r2, #32
 8004a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68da      	ldr	r2, [r3, #12]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 0210 	bic.w	r2, r2, #16
 8004a48:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a4a:	8a7b      	ldrh	r3, [r7, #18]
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f846 	bl	8004ae0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004a54:	e01f      	b.n	8004a96 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d008      	beq.n	8004a72 <HAL_UART_IRQHandler+0x326>
 8004a60:	6a3b      	ldr	r3, [r7, #32]
 8004a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f9af 	bl	8004dce <UART_Transmit_IT>
    return;
 8004a70:	e012      	b.n	8004a98 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00d      	beq.n	8004a98 <HAL_UART_IRQHandler+0x34c>
 8004a7c:	6a3b      	ldr	r3, [r7, #32]
 8004a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d008      	beq.n	8004a98 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f9f1 	bl	8004e6e <UART_EndTransmit_IT>
    return;
 8004a8c:	e004      	b.n	8004a98 <HAL_UART_IRQHandler+0x34c>
    return;
 8004a8e:	bf00      	nop
 8004a90:	e002      	b.n	8004a98 <HAL_UART_IRQHandler+0x34c>
      return;
 8004a92:	bf00      	nop
 8004a94:	e000      	b.n	8004a98 <HAL_UART_IRQHandler+0x34c>
      return;
 8004a96:	bf00      	nop
  }
}
 8004a98:	3728      	adds	r7, #40	; 0x28
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	08004da7 	.word	0x08004da7

08004aa4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	460b      	mov	r3, r1
 8004aea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b04:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d12a      	bne.n	8004b6a <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68da      	ldr	r2, [r3, #12]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b28:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	695a      	ldr	r2, [r3, #20]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 0201 	bic.w	r2, r2, #1
 8004b38:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	695a      	ldr	r2, [r3, #20]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b48:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d107      	bne.n	8004b6a <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68da      	ldr	r2, [r3, #12]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f022 0210 	bic.w	r2, r2, #16
 8004b68:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d106      	bne.n	8004b80 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b76:	4619      	mov	r1, r3
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f7ff ffb1 	bl	8004ae0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b7e:	e002      	b.n	8004b86 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f7fc fc23 	bl	80013cc <HAL_UART_RxCpltCallback>
}
 8004b86:	bf00      	nop
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b084      	sub	sp, #16
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d108      	bne.n	8004bb6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ba8:	085b      	lsrs	r3, r3, #1
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	4619      	mov	r1, r3
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f7ff ff96 	bl	8004ae0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004bb4:	e002      	b.n	8004bbc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f7ff ff7e 	bl	8004ab8 <HAL_UART_RxHalfCpltCallback>
}
 8004bbc:	bf00      	nop
 8004bbe:	3710      	adds	r7, #16
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004be0:	2b80      	cmp	r3, #128	; 0x80
 8004be2:	bf0c      	ite	eq
 8004be4:	2301      	moveq	r3, #1
 8004be6:	2300      	movne	r3, #0
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	2b21      	cmp	r3, #33	; 0x21
 8004bf6:	d108      	bne.n	8004c0a <UART_DMAError+0x46>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d005      	beq.n	8004c0a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	2200      	movs	r2, #0
 8004c02:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004c04:	68b8      	ldr	r0, [r7, #8]
 8004c06:	f000 f88b 	bl	8004d20 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c14:	2b40      	cmp	r3, #64	; 0x40
 8004c16:	bf0c      	ite	eq
 8004c18:	2301      	moveq	r3, #1
 8004c1a:	2300      	movne	r3, #0
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	2b22      	cmp	r3, #34	; 0x22
 8004c2a:	d108      	bne.n	8004c3e <UART_DMAError+0x7a>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d005      	beq.n	8004c3e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	2200      	movs	r2, #0
 8004c36:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004c38:	68b8      	ldr	r0, [r7, #8]
 8004c3a:	f000 f887 	bl	8004d4c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c42:	f043 0210 	orr.w	r2, r3, #16
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c4a:	68b8      	ldr	r0, [r7, #8]
 8004c4c:	f7ff ff3e 	bl	8004acc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c50:	bf00      	nop
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b086      	sub	sp, #24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	4613      	mov	r3, r2
 8004c64:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	88fa      	ldrh	r2, [r7, #6]
 8004c70:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2222      	movs	r2, #34	; 0x22
 8004c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c84:	4a23      	ldr	r2, [pc, #140]	; (8004d14 <UART_Start_Receive_DMA+0xbc>)
 8004c86:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8c:	4a22      	ldr	r2, [pc, #136]	; (8004d18 <UART_Start_Receive_DMA+0xc0>)
 8004c8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c94:	4a21      	ldr	r2, [pc, #132]	; (8004d1c <UART_Start_Receive_DMA+0xc4>)
 8004c96:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004ca0:	f107 0308 	add.w	r3, r7, #8
 8004ca4:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	3304      	adds	r3, #4
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	88fb      	ldrh	r3, [r7, #6]
 8004cb8:	f7fd fc18 	bl	80024ec <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	613b      	str	r3, [r7, #16]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	613b      	str	r3, [r7, #16]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	613b      	str	r3, [r7, #16]
 8004cd0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68da      	ldr	r2, [r3, #12]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ce8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	695a      	ldr	r2, [r3, #20]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f042 0201 	orr.w	r2, r2, #1
 8004cf8:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	695a      	ldr	r2, [r3, #20]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d08:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3718      	adds	r7, #24
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	08004af9 	.word	0x08004af9
 8004d18:	08004b8f 	.word	0x08004b8f
 8004d1c:	08004bc5 	.word	0x08004bc5

08004d20 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68da      	ldr	r2, [r3, #12]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004d36:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004d40:	bf00      	nop
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68da      	ldr	r2, [r3, #12]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004d62:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	695a      	ldr	r2, [r3, #20]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 0201 	bic.w	r2, r2, #1
 8004d72:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d107      	bne.n	8004d8c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68da      	ldr	r2, [r3, #12]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f022 0210 	bic.w	r2, r2, #16
 8004d8a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d9a:	bf00      	nop
 8004d9c:	370c      	adds	r7, #12
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr

08004da6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b084      	sub	sp, #16
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f7ff fe83 	bl	8004acc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dc6:	bf00      	nop
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b085      	sub	sp, #20
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b21      	cmp	r3, #33	; 0x21
 8004de0:	d13e      	bne.n	8004e60 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dea:	d114      	bne.n	8004e16 <UART_Transmit_IT+0x48>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d110      	bne.n	8004e16 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	881b      	ldrh	r3, [r3, #0]
 8004dfe:	461a      	mov	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e08:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	1c9a      	adds	r2, r3, #2
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	621a      	str	r2, [r3, #32]
 8004e14:	e008      	b.n	8004e28 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	1c59      	adds	r1, r3, #1
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	6211      	str	r1, [r2, #32]
 8004e20:	781a      	ldrb	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	4619      	mov	r1, r3
 8004e36:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10f      	bne.n	8004e5c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68da      	ldr	r2, [r3, #12]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e4a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68da      	ldr	r2, [r3, #12]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e5a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	e000      	b.n	8004e62 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e60:	2302      	movs	r3, #2
  }
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3714      	adds	r7, #20
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr

08004e6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b082      	sub	sp, #8
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68da      	ldr	r2, [r3, #12]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2220      	movs	r2, #32
 8004e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7ff fe08 	bl	8004aa4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3708      	adds	r7, #8
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b084      	sub	sp, #16
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b22      	cmp	r3, #34	; 0x22
 8004eb0:	f040 8087 	bne.w	8004fc2 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ebc:	d117      	bne.n	8004eee <UART_Receive_IT+0x50>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d113      	bne.n	8004eee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ece:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee6:	1c9a      	adds	r2, r3, #2
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	629a      	str	r2, [r3, #40]	; 0x28
 8004eec:	e026      	b.n	8004f3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef2:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f00:	d007      	beq.n	8004f12 <UART_Receive_IT+0x74>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10a      	bne.n	8004f20 <UART_Receive_IT+0x82>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d106      	bne.n	8004f20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	b2da      	uxtb	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	701a      	strb	r2, [r3, #0]
 8004f1e:	e008      	b.n	8004f32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f36:	1c5a      	adds	r2, r3, #1
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	3b01      	subs	r3, #1
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	4619      	mov	r1, r3
 8004f4a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d136      	bne.n	8004fbe <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68da      	ldr	r2, [r3, #12]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f022 0220 	bic.w	r2, r2, #32
 8004f5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68da      	ldr	r2, [r3, #12]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	695a      	ldr	r2, [r3, #20]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f022 0201 	bic.w	r2, r2, #1
 8004f7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2220      	movs	r2, #32
 8004f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d10e      	bne.n	8004fae <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68da      	ldr	r2, [r3, #12]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f022 0210 	bic.w	r2, r2, #16
 8004f9e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f7ff fd9a 	bl	8004ae0 <HAL_UARTEx_RxEventCallback>
 8004fac:	e002      	b.n	8004fb4 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7fc fa0c 	bl	80013cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	e002      	b.n	8004fc4 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	e000      	b.n	8004fc4 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004fc2:	2302      	movs	r3, #2
  }
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fd0:	b09f      	sub	sp, #124	; 0x7c
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fe2:	68d9      	ldr	r1, [r3, #12]
 8004fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	ea40 0301 	orr.w	r3, r0, r1
 8004fec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ff0:	689a      	ldr	r2, [r3, #8]
 8004ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	431a      	orrs	r2, r3
 8004ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	4313      	orrs	r3, r2
 8005004:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005010:	f021 010c 	bic.w	r1, r1, #12
 8005014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800501a:	430b      	orrs	r3, r1
 800501c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800501e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	695b      	ldr	r3, [r3, #20]
 8005024:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800502a:	6999      	ldr	r1, [r3, #24]
 800502c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	ea40 0301 	orr.w	r3, r0, r1
 8005034:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	4bc5      	ldr	r3, [pc, #788]	; (8005350 <UART_SetConfig+0x384>)
 800503c:	429a      	cmp	r2, r3
 800503e:	d004      	beq.n	800504a <UART_SetConfig+0x7e>
 8005040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	4bc3      	ldr	r3, [pc, #780]	; (8005354 <UART_SetConfig+0x388>)
 8005046:	429a      	cmp	r2, r3
 8005048:	d103      	bne.n	8005052 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800504a:	f7fe fbd1 	bl	80037f0 <HAL_RCC_GetPCLK2Freq>
 800504e:	6778      	str	r0, [r7, #116]	; 0x74
 8005050:	e002      	b.n	8005058 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005052:	f7fe fbb9 	bl	80037c8 <HAL_RCC_GetPCLK1Freq>
 8005056:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800505a:	69db      	ldr	r3, [r3, #28]
 800505c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005060:	f040 80b6 	bne.w	80051d0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005064:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005066:	461c      	mov	r4, r3
 8005068:	f04f 0500 	mov.w	r5, #0
 800506c:	4622      	mov	r2, r4
 800506e:	462b      	mov	r3, r5
 8005070:	1891      	adds	r1, r2, r2
 8005072:	6439      	str	r1, [r7, #64]	; 0x40
 8005074:	415b      	adcs	r3, r3
 8005076:	647b      	str	r3, [r7, #68]	; 0x44
 8005078:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800507c:	1912      	adds	r2, r2, r4
 800507e:	eb45 0303 	adc.w	r3, r5, r3
 8005082:	f04f 0000 	mov.w	r0, #0
 8005086:	f04f 0100 	mov.w	r1, #0
 800508a:	00d9      	lsls	r1, r3, #3
 800508c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005090:	00d0      	lsls	r0, r2, #3
 8005092:	4602      	mov	r2, r0
 8005094:	460b      	mov	r3, r1
 8005096:	1911      	adds	r1, r2, r4
 8005098:	6639      	str	r1, [r7, #96]	; 0x60
 800509a:	416b      	adcs	r3, r5
 800509c:	667b      	str	r3, [r7, #100]	; 0x64
 800509e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	461a      	mov	r2, r3
 80050a4:	f04f 0300 	mov.w	r3, #0
 80050a8:	1891      	adds	r1, r2, r2
 80050aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80050ac:	415b      	adcs	r3, r3
 80050ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80050b4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80050b8:	f7fb fd78 	bl	8000bac <__aeabi_uldivmod>
 80050bc:	4602      	mov	r2, r0
 80050be:	460b      	mov	r3, r1
 80050c0:	4ba5      	ldr	r3, [pc, #660]	; (8005358 <UART_SetConfig+0x38c>)
 80050c2:	fba3 2302 	umull	r2, r3, r3, r2
 80050c6:	095b      	lsrs	r3, r3, #5
 80050c8:	011e      	lsls	r6, r3, #4
 80050ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050cc:	461c      	mov	r4, r3
 80050ce:	f04f 0500 	mov.w	r5, #0
 80050d2:	4622      	mov	r2, r4
 80050d4:	462b      	mov	r3, r5
 80050d6:	1891      	adds	r1, r2, r2
 80050d8:	6339      	str	r1, [r7, #48]	; 0x30
 80050da:	415b      	adcs	r3, r3
 80050dc:	637b      	str	r3, [r7, #52]	; 0x34
 80050de:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80050e2:	1912      	adds	r2, r2, r4
 80050e4:	eb45 0303 	adc.w	r3, r5, r3
 80050e8:	f04f 0000 	mov.w	r0, #0
 80050ec:	f04f 0100 	mov.w	r1, #0
 80050f0:	00d9      	lsls	r1, r3, #3
 80050f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050f6:	00d0      	lsls	r0, r2, #3
 80050f8:	4602      	mov	r2, r0
 80050fa:	460b      	mov	r3, r1
 80050fc:	1911      	adds	r1, r2, r4
 80050fe:	65b9      	str	r1, [r7, #88]	; 0x58
 8005100:	416b      	adcs	r3, r5
 8005102:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	461a      	mov	r2, r3
 800510a:	f04f 0300 	mov.w	r3, #0
 800510e:	1891      	adds	r1, r2, r2
 8005110:	62b9      	str	r1, [r7, #40]	; 0x28
 8005112:	415b      	adcs	r3, r3
 8005114:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005116:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800511a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800511e:	f7fb fd45 	bl	8000bac <__aeabi_uldivmod>
 8005122:	4602      	mov	r2, r0
 8005124:	460b      	mov	r3, r1
 8005126:	4b8c      	ldr	r3, [pc, #560]	; (8005358 <UART_SetConfig+0x38c>)
 8005128:	fba3 1302 	umull	r1, r3, r3, r2
 800512c:	095b      	lsrs	r3, r3, #5
 800512e:	2164      	movs	r1, #100	; 0x64
 8005130:	fb01 f303 	mul.w	r3, r1, r3
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	3332      	adds	r3, #50	; 0x32
 800513a:	4a87      	ldr	r2, [pc, #540]	; (8005358 <UART_SetConfig+0x38c>)
 800513c:	fba2 2303 	umull	r2, r3, r2, r3
 8005140:	095b      	lsrs	r3, r3, #5
 8005142:	005b      	lsls	r3, r3, #1
 8005144:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005148:	441e      	add	r6, r3
 800514a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800514c:	4618      	mov	r0, r3
 800514e:	f04f 0100 	mov.w	r1, #0
 8005152:	4602      	mov	r2, r0
 8005154:	460b      	mov	r3, r1
 8005156:	1894      	adds	r4, r2, r2
 8005158:	623c      	str	r4, [r7, #32]
 800515a:	415b      	adcs	r3, r3
 800515c:	627b      	str	r3, [r7, #36]	; 0x24
 800515e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005162:	1812      	adds	r2, r2, r0
 8005164:	eb41 0303 	adc.w	r3, r1, r3
 8005168:	f04f 0400 	mov.w	r4, #0
 800516c:	f04f 0500 	mov.w	r5, #0
 8005170:	00dd      	lsls	r5, r3, #3
 8005172:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005176:	00d4      	lsls	r4, r2, #3
 8005178:	4622      	mov	r2, r4
 800517a:	462b      	mov	r3, r5
 800517c:	1814      	adds	r4, r2, r0
 800517e:	653c      	str	r4, [r7, #80]	; 0x50
 8005180:	414b      	adcs	r3, r1
 8005182:	657b      	str	r3, [r7, #84]	; 0x54
 8005184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	461a      	mov	r2, r3
 800518a:	f04f 0300 	mov.w	r3, #0
 800518e:	1891      	adds	r1, r2, r2
 8005190:	61b9      	str	r1, [r7, #24]
 8005192:	415b      	adcs	r3, r3
 8005194:	61fb      	str	r3, [r7, #28]
 8005196:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800519a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800519e:	f7fb fd05 	bl	8000bac <__aeabi_uldivmod>
 80051a2:	4602      	mov	r2, r0
 80051a4:	460b      	mov	r3, r1
 80051a6:	4b6c      	ldr	r3, [pc, #432]	; (8005358 <UART_SetConfig+0x38c>)
 80051a8:	fba3 1302 	umull	r1, r3, r3, r2
 80051ac:	095b      	lsrs	r3, r3, #5
 80051ae:	2164      	movs	r1, #100	; 0x64
 80051b0:	fb01 f303 	mul.w	r3, r1, r3
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	00db      	lsls	r3, r3, #3
 80051b8:	3332      	adds	r3, #50	; 0x32
 80051ba:	4a67      	ldr	r2, [pc, #412]	; (8005358 <UART_SetConfig+0x38c>)
 80051bc:	fba2 2303 	umull	r2, r3, r2, r3
 80051c0:	095b      	lsrs	r3, r3, #5
 80051c2:	f003 0207 	and.w	r2, r3, #7
 80051c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4432      	add	r2, r6
 80051cc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80051ce:	e0b9      	b.n	8005344 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051d2:	461c      	mov	r4, r3
 80051d4:	f04f 0500 	mov.w	r5, #0
 80051d8:	4622      	mov	r2, r4
 80051da:	462b      	mov	r3, r5
 80051dc:	1891      	adds	r1, r2, r2
 80051de:	6139      	str	r1, [r7, #16]
 80051e0:	415b      	adcs	r3, r3
 80051e2:	617b      	str	r3, [r7, #20]
 80051e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80051e8:	1912      	adds	r2, r2, r4
 80051ea:	eb45 0303 	adc.w	r3, r5, r3
 80051ee:	f04f 0000 	mov.w	r0, #0
 80051f2:	f04f 0100 	mov.w	r1, #0
 80051f6:	00d9      	lsls	r1, r3, #3
 80051f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051fc:	00d0      	lsls	r0, r2, #3
 80051fe:	4602      	mov	r2, r0
 8005200:	460b      	mov	r3, r1
 8005202:	eb12 0804 	adds.w	r8, r2, r4
 8005206:	eb43 0905 	adc.w	r9, r3, r5
 800520a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	4618      	mov	r0, r3
 8005210:	f04f 0100 	mov.w	r1, #0
 8005214:	f04f 0200 	mov.w	r2, #0
 8005218:	f04f 0300 	mov.w	r3, #0
 800521c:	008b      	lsls	r3, r1, #2
 800521e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005222:	0082      	lsls	r2, r0, #2
 8005224:	4640      	mov	r0, r8
 8005226:	4649      	mov	r1, r9
 8005228:	f7fb fcc0 	bl	8000bac <__aeabi_uldivmod>
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	4b49      	ldr	r3, [pc, #292]	; (8005358 <UART_SetConfig+0x38c>)
 8005232:	fba3 2302 	umull	r2, r3, r3, r2
 8005236:	095b      	lsrs	r3, r3, #5
 8005238:	011e      	lsls	r6, r3, #4
 800523a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800523c:	4618      	mov	r0, r3
 800523e:	f04f 0100 	mov.w	r1, #0
 8005242:	4602      	mov	r2, r0
 8005244:	460b      	mov	r3, r1
 8005246:	1894      	adds	r4, r2, r2
 8005248:	60bc      	str	r4, [r7, #8]
 800524a:	415b      	adcs	r3, r3
 800524c:	60fb      	str	r3, [r7, #12]
 800524e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005252:	1812      	adds	r2, r2, r0
 8005254:	eb41 0303 	adc.w	r3, r1, r3
 8005258:	f04f 0400 	mov.w	r4, #0
 800525c:	f04f 0500 	mov.w	r5, #0
 8005260:	00dd      	lsls	r5, r3, #3
 8005262:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005266:	00d4      	lsls	r4, r2, #3
 8005268:	4622      	mov	r2, r4
 800526a:	462b      	mov	r3, r5
 800526c:	1814      	adds	r4, r2, r0
 800526e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005270:	414b      	adcs	r3, r1
 8005272:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	4618      	mov	r0, r3
 800527a:	f04f 0100 	mov.w	r1, #0
 800527e:	f04f 0200 	mov.w	r2, #0
 8005282:	f04f 0300 	mov.w	r3, #0
 8005286:	008b      	lsls	r3, r1, #2
 8005288:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800528c:	0082      	lsls	r2, r0, #2
 800528e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005292:	f7fb fc8b 	bl	8000bac <__aeabi_uldivmod>
 8005296:	4602      	mov	r2, r0
 8005298:	460b      	mov	r3, r1
 800529a:	4b2f      	ldr	r3, [pc, #188]	; (8005358 <UART_SetConfig+0x38c>)
 800529c:	fba3 1302 	umull	r1, r3, r3, r2
 80052a0:	095b      	lsrs	r3, r3, #5
 80052a2:	2164      	movs	r1, #100	; 0x64
 80052a4:	fb01 f303 	mul.w	r3, r1, r3
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	011b      	lsls	r3, r3, #4
 80052ac:	3332      	adds	r3, #50	; 0x32
 80052ae:	4a2a      	ldr	r2, [pc, #168]	; (8005358 <UART_SetConfig+0x38c>)
 80052b0:	fba2 2303 	umull	r2, r3, r2, r3
 80052b4:	095b      	lsrs	r3, r3, #5
 80052b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052ba:	441e      	add	r6, r3
 80052bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052be:	4618      	mov	r0, r3
 80052c0:	f04f 0100 	mov.w	r1, #0
 80052c4:	4602      	mov	r2, r0
 80052c6:	460b      	mov	r3, r1
 80052c8:	1894      	adds	r4, r2, r2
 80052ca:	603c      	str	r4, [r7, #0]
 80052cc:	415b      	adcs	r3, r3
 80052ce:	607b      	str	r3, [r7, #4]
 80052d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052d4:	1812      	adds	r2, r2, r0
 80052d6:	eb41 0303 	adc.w	r3, r1, r3
 80052da:	f04f 0400 	mov.w	r4, #0
 80052de:	f04f 0500 	mov.w	r5, #0
 80052e2:	00dd      	lsls	r5, r3, #3
 80052e4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80052e8:	00d4      	lsls	r4, r2, #3
 80052ea:	4622      	mov	r2, r4
 80052ec:	462b      	mov	r3, r5
 80052ee:	eb12 0a00 	adds.w	sl, r2, r0
 80052f2:	eb43 0b01 	adc.w	fp, r3, r1
 80052f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f04f 0100 	mov.w	r1, #0
 8005300:	f04f 0200 	mov.w	r2, #0
 8005304:	f04f 0300 	mov.w	r3, #0
 8005308:	008b      	lsls	r3, r1, #2
 800530a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800530e:	0082      	lsls	r2, r0, #2
 8005310:	4650      	mov	r0, sl
 8005312:	4659      	mov	r1, fp
 8005314:	f7fb fc4a 	bl	8000bac <__aeabi_uldivmod>
 8005318:	4602      	mov	r2, r0
 800531a:	460b      	mov	r3, r1
 800531c:	4b0e      	ldr	r3, [pc, #56]	; (8005358 <UART_SetConfig+0x38c>)
 800531e:	fba3 1302 	umull	r1, r3, r3, r2
 8005322:	095b      	lsrs	r3, r3, #5
 8005324:	2164      	movs	r1, #100	; 0x64
 8005326:	fb01 f303 	mul.w	r3, r1, r3
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	011b      	lsls	r3, r3, #4
 800532e:	3332      	adds	r3, #50	; 0x32
 8005330:	4a09      	ldr	r2, [pc, #36]	; (8005358 <UART_SetConfig+0x38c>)
 8005332:	fba2 2303 	umull	r2, r3, r2, r3
 8005336:	095b      	lsrs	r3, r3, #5
 8005338:	f003 020f 	and.w	r2, r3, #15
 800533c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4432      	add	r2, r6
 8005342:	609a      	str	r2, [r3, #8]
}
 8005344:	bf00      	nop
 8005346:	377c      	adds	r7, #124	; 0x7c
 8005348:	46bd      	mov	sp, r7
 800534a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800534e:	bf00      	nop
 8005350:	40011000 	.word	0x40011000
 8005354:	40011400 	.word	0x40011400
 8005358:	51eb851f 	.word	0x51eb851f

0800535c <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 800535c:	b580      	push	{r7, lr}
 800535e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8005360:	2200      	movs	r2, #0
 8005362:	2180      	movs	r1, #128	; 0x80
 8005364:	4802      	ldr	r0, [pc, #8]	; (8005370 <ST7735_Select+0x14>)
 8005366:	f7fd fdb1 	bl	8002ecc <HAL_GPIO_WritePin>
}
 800536a:	bf00      	nop
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	40020c00 	.word	0x40020c00

08005374 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8005374:	b580      	push	{r7, lr}
 8005376:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8005378:	2201      	movs	r2, #1
 800537a:	2180      	movs	r1, #128	; 0x80
 800537c:	4802      	ldr	r0, [pc, #8]	; (8005388 <ST7735_Unselect+0x14>)
 800537e:	f7fd fda5 	bl	8002ecc <HAL_GPIO_WritePin>
}
 8005382:	bf00      	nop
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	40020c00 	.word	0x40020c00

0800538c <ST7735_Reset>:

void ST7735_Reset()
{
 800538c:	b580      	push	{r7, lr}
 800538e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8005390:	2200      	movs	r2, #0
 8005392:	2120      	movs	r1, #32
 8005394:	4806      	ldr	r0, [pc, #24]	; (80053b0 <ST7735_Reset+0x24>)
 8005396:	f7fd fd99 	bl	8002ecc <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800539a:	2005      	movs	r0, #5
 800539c:	f7fc fcda 	bl	8001d54 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 80053a0:	2201      	movs	r2, #1
 80053a2:	2120      	movs	r1, #32
 80053a4:	4802      	ldr	r0, [pc, #8]	; (80053b0 <ST7735_Reset+0x24>)
 80053a6:	f7fd fd91 	bl	8002ecc <HAL_GPIO_WritePin>
}
 80053aa:	bf00      	nop
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	40020c00 	.word	0x40020c00

080053b4 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	4603      	mov	r3, r0
 80053bc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80053be:	2200      	movs	r2, #0
 80053c0:	2140      	movs	r1, #64	; 0x40
 80053c2:	4807      	ldr	r0, [pc, #28]	; (80053e0 <ST7735_WriteCommand+0x2c>)
 80053c4:	f7fd fd82 	bl	8002ecc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80053c8:	1df9      	adds	r1, r7, #7
 80053ca:	f04f 33ff 	mov.w	r3, #4294967295
 80053ce:	2201      	movs	r2, #1
 80053d0:	4804      	ldr	r0, [pc, #16]	; (80053e4 <ST7735_WriteCommand+0x30>)
 80053d2:	f7fe faaa 	bl	800392a <HAL_SPI_Transmit>
}
 80053d6:	bf00      	nop
 80053d8:	3708      	adds	r7, #8
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	40020c00 	.word	0x40020c00
 80053e4:	200013c0 	.word	0x200013c0

080053e8 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80053f2:	2201      	movs	r2, #1
 80053f4:	2140      	movs	r1, #64	; 0x40
 80053f6:	4807      	ldr	r0, [pc, #28]	; (8005414 <ST7735_WriteData+0x2c>)
 80053f8:	f7fd fd68 	bl	8002ecc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	b29a      	uxth	r2, r3
 8005400:	f04f 33ff 	mov.w	r3, #4294967295
 8005404:	6879      	ldr	r1, [r7, #4]
 8005406:	4804      	ldr	r0, [pc, #16]	; (8005418 <ST7735_WriteData+0x30>)
 8005408:	f7fe fa8f 	bl	800392a <HAL_SPI_Transmit>
}
 800540c:	bf00      	nop
 800540e:	3708      	adds	r7, #8
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	40020c00 	.word	0x40020c00
 8005418:	200013c0 	.word	0x200013c0

0800541c <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	1c5a      	adds	r2, r3, #1
 8005428:	607a      	str	r2, [r7, #4]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800542e:	e034      	b.n	800549a <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	1c5a      	adds	r2, r3, #1
 8005434:	607a      	str	r2, [r7, #4]
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800543a:	7afb      	ldrb	r3, [r7, #11]
 800543c:	4618      	mov	r0, r3
 800543e:	f7ff ffb9 	bl	80053b4 <ST7735_WriteCommand>

        numArgs = *addr++;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	1c5a      	adds	r2, r3, #1
 8005446:	607a      	str	r2, [r7, #4]
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 800544c:	7abb      	ldrb	r3, [r7, #10]
 800544e:	b29b      	uxth	r3, r3
 8005450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005454:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8005456:	7abb      	ldrb	r3, [r7, #10]
 8005458:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800545c:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800545e:	7abb      	ldrb	r3, [r7, #10]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d008      	beq.n	8005476 <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8005464:	7abb      	ldrb	r3, [r7, #10]
 8005466:	4619      	mov	r1, r3
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f7ff ffbd 	bl	80053e8 <ST7735_WriteData>
            addr += numArgs;
 800546e:	7abb      	ldrb	r3, [r7, #10]
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	4413      	add	r3, r2
 8005474:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8005476:	89bb      	ldrh	r3, [r7, #12]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00e      	beq.n	800549a <DisplayInit+0x7e>
            ms = *addr++;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	1c5a      	adds	r2, r3, #1
 8005480:	607a      	str	r2, [r7, #4]
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8005486:	89bb      	ldrh	r3, [r7, #12]
 8005488:	2bff      	cmp	r3, #255	; 0xff
 800548a:	d102      	bne.n	8005492 <DisplayInit+0x76>
 800548c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005490:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8005492:	89bb      	ldrh	r3, [r7, #12]
 8005494:	4618      	mov	r0, r3
 8005496:	f7fc fc5d 	bl	8001d54 <HAL_Delay>
    while(numCommands--) {
 800549a:	7bfb      	ldrb	r3, [r7, #15]
 800549c:	1e5a      	subs	r2, r3, #1
 800549e:	73fa      	strb	r2, [r7, #15]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1c5      	bne.n	8005430 <DisplayInit+0x14>
        }
    }
}
 80054a4:	bf00      	nop
 80054a6:	bf00      	nop
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
	...

080054b0 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80054b0:	b590      	push	{r4, r7, lr}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	4604      	mov	r4, r0
 80054b8:	4608      	mov	r0, r1
 80054ba:	4611      	mov	r1, r2
 80054bc:	461a      	mov	r2, r3
 80054be:	4623      	mov	r3, r4
 80054c0:	71fb      	strb	r3, [r7, #7]
 80054c2:	4603      	mov	r3, r0
 80054c4:	71bb      	strb	r3, [r7, #6]
 80054c6:	460b      	mov	r3, r1
 80054c8:	717b      	strb	r3, [r7, #5]
 80054ca:	4613      	mov	r3, r2
 80054cc:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80054ce:	202a      	movs	r0, #42	; 0x2a
 80054d0:	f7ff ff70 	bl	80053b4 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 80054d4:	2300      	movs	r3, #0
 80054d6:	733b      	strb	r3, [r7, #12]
 80054d8:	4b17      	ldr	r3, [pc, #92]	; (8005538 <ST7735_SetAddressWindow+0x88>)
 80054da:	781a      	ldrb	r2, [r3, #0]
 80054dc:	79fb      	ldrb	r3, [r7, #7]
 80054de:	4413      	add	r3, r2
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	737b      	strb	r3, [r7, #13]
 80054e4:	2300      	movs	r3, #0
 80054e6:	73bb      	strb	r3, [r7, #14]
 80054e8:	4b13      	ldr	r3, [pc, #76]	; (8005538 <ST7735_SetAddressWindow+0x88>)
 80054ea:	781a      	ldrb	r2, [r3, #0]
 80054ec:	797b      	ldrb	r3, [r7, #5]
 80054ee:	4413      	add	r3, r2
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80054f4:	f107 030c 	add.w	r3, r7, #12
 80054f8:	2104      	movs	r1, #4
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7ff ff74 	bl	80053e8 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8005500:	202b      	movs	r0, #43	; 0x2b
 8005502:	f7ff ff57 	bl	80053b4 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8005506:	4b0d      	ldr	r3, [pc, #52]	; (800553c <ST7735_SetAddressWindow+0x8c>)
 8005508:	781a      	ldrb	r2, [r3, #0]
 800550a:	79bb      	ldrb	r3, [r7, #6]
 800550c:	4413      	add	r3, r2
 800550e:	b2db      	uxtb	r3, r3
 8005510:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8005512:	4b0a      	ldr	r3, [pc, #40]	; (800553c <ST7735_SetAddressWindow+0x8c>)
 8005514:	781a      	ldrb	r2, [r3, #0]
 8005516:	793b      	ldrb	r3, [r7, #4]
 8005518:	4413      	add	r3, r2
 800551a:	b2db      	uxtb	r3, r3
 800551c:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800551e:	f107 030c 	add.w	r3, r7, #12
 8005522:	2104      	movs	r1, #4
 8005524:	4618      	mov	r0, r3
 8005526:	f7ff ff5f 	bl	80053e8 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800552a:	202c      	movs	r0, #44	; 0x2c
 800552c:	f7ff ff42 	bl	80053b4 <ST7735_WriteCommand>
}
 8005530:	bf00      	nop
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	bd90      	pop	{r4, r7, pc}
 8005538:	20000238 	.word	0x20000238
 800553c:	2000104c 	.word	0x2000104c

08005540 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	4603      	mov	r3, r0
 8005548:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 800554a:	f7ff ff07 	bl	800535c <ST7735_Select>
    ST7735_Reset();
 800554e:	f7ff ff1d 	bl	800538c <ST7735_Reset>
    DisplayInit(init_cmds1);
 8005552:	480c      	ldr	r0, [pc, #48]	; (8005584 <ST7735_Init+0x44>)
 8005554:	f7ff ff62 	bl	800541c <DisplayInit>
    DisplayInit(init_cmds2);
 8005558:	480b      	ldr	r0, [pc, #44]	; (8005588 <ST7735_Init+0x48>)
 800555a:	f7ff ff5f 	bl	800541c <DisplayInit>
    DisplayInit(init_cmds3);
 800555e:	480b      	ldr	r0, [pc, #44]	; (800558c <ST7735_Init+0x4c>)
 8005560:	f7ff ff5c 	bl	800541c <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8005564:	4b0a      	ldr	r3, [pc, #40]	; (8005590 <ST7735_Init+0x50>)
 8005566:	2200      	movs	r2, #0
 8005568:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 800556a:	4b0a      	ldr	r3, [pc, #40]	; (8005594 <ST7735_Init+0x54>)
 800556c:	2200      	movs	r2, #0
 800556e:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8005570:	79fb      	ldrb	r3, [r7, #7]
 8005572:	4618      	mov	r0, r3
 8005574:	f000 f810 	bl	8005598 <ST7735_SetRotation>
    ST7735_Unselect();
 8005578:	f7ff fefc 	bl	8005374 <ST7735_Unselect>

}
 800557c:	bf00      	nop
 800557e:	3708      	adds	r7, #8
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	0800835c 	.word	0x0800835c
 8005588:	08008394 	.word	0x08008394
 800558c:	080083a4 	.word	0x080083a4
 8005590:	2000037c 	.word	0x2000037c
 8005594:	2000104d 	.word	0x2000104d

08005598 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	4603      	mov	r3, r0
 80055a0:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 80055a2:	2300      	movs	r3, #0
 80055a4:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 80055a6:	79fb      	ldrb	r3, [r7, #7]
 80055a8:	f003 0303 	and.w	r3, r3, #3
 80055ac:	b2da      	uxtb	r2, r3
 80055ae:	4b33      	ldr	r3, [pc, #204]	; (800567c <ST7735_SetRotation+0xe4>)
 80055b0:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 80055b2:	4b32      	ldr	r3, [pc, #200]	; (800567c <ST7735_SetRotation+0xe4>)
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	2b03      	cmp	r3, #3
 80055b8:	d84e      	bhi.n	8005658 <ST7735_SetRotation+0xc0>
 80055ba:	a201      	add	r2, pc, #4	; (adr r2, 80055c0 <ST7735_SetRotation+0x28>)
 80055bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c0:	080055d1 	.word	0x080055d1
 80055c4:	080055f3 	.word	0x080055f3
 80055c8:	08005615 	.word	0x08005615
 80055cc:	08005637 	.word	0x08005637
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 80055d0:	23c0      	movs	r3, #192	; 0xc0
 80055d2:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 80055d4:	4b2a      	ldr	r3, [pc, #168]	; (8005680 <ST7735_SetRotation+0xe8>)
 80055d6:	22a1      	movs	r2, #161	; 0xa1
 80055d8:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80055da:	4b2a      	ldr	r3, [pc, #168]	; (8005684 <ST7735_SetRotation+0xec>)
 80055dc:	2282      	movs	r2, #130	; 0x82
 80055de:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 80055e0:	4b29      	ldr	r3, [pc, #164]	; (8005688 <ST7735_SetRotation+0xf0>)
 80055e2:	781a      	ldrb	r2, [r3, #0]
 80055e4:	4b29      	ldr	r3, [pc, #164]	; (800568c <ST7735_SetRotation+0xf4>)
 80055e6:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 80055e8:	4b29      	ldr	r3, [pc, #164]	; (8005690 <ST7735_SetRotation+0xf8>)
 80055ea:	781a      	ldrb	r2, [r3, #0]
 80055ec:	4b29      	ldr	r3, [pc, #164]	; (8005694 <ST7735_SetRotation+0xfc>)
 80055ee:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80055f0:	e032      	b.n	8005658 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80055f2:	23a0      	movs	r3, #160	; 0xa0
 80055f4:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 80055f6:	4b23      	ldr	r3, [pc, #140]	; (8005684 <ST7735_SetRotation+0xec>)
 80055f8:	22a1      	movs	r2, #161	; 0xa1
 80055fa:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80055fc:	4b20      	ldr	r3, [pc, #128]	; (8005680 <ST7735_SetRotation+0xe8>)
 80055fe:	2282      	movs	r2, #130	; 0x82
 8005600:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8005602:	4b21      	ldr	r3, [pc, #132]	; (8005688 <ST7735_SetRotation+0xf0>)
 8005604:	781a      	ldrb	r2, [r3, #0]
 8005606:	4b23      	ldr	r3, [pc, #140]	; (8005694 <ST7735_SetRotation+0xfc>)
 8005608:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800560a:	4b21      	ldr	r3, [pc, #132]	; (8005690 <ST7735_SetRotation+0xf8>)
 800560c:	781a      	ldrb	r2, [r3, #0]
 800560e:	4b1f      	ldr	r3, [pc, #124]	; (800568c <ST7735_SetRotation+0xf4>)
 8005610:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8005612:	e021      	b.n	8005658 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8005614:	2300      	movs	r3, #0
 8005616:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8005618:	4b19      	ldr	r3, [pc, #100]	; (8005680 <ST7735_SetRotation+0xe8>)
 800561a:	22a1      	movs	r2, #161	; 0xa1
 800561c:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800561e:	4b19      	ldr	r3, [pc, #100]	; (8005684 <ST7735_SetRotation+0xec>)
 8005620:	2282      	movs	r2, #130	; 0x82
 8005622:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8005624:	4b18      	ldr	r3, [pc, #96]	; (8005688 <ST7735_SetRotation+0xf0>)
 8005626:	781a      	ldrb	r2, [r3, #0]
 8005628:	4b18      	ldr	r3, [pc, #96]	; (800568c <ST7735_SetRotation+0xf4>)
 800562a:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 800562c:	4b18      	ldr	r3, [pc, #96]	; (8005690 <ST7735_SetRotation+0xf8>)
 800562e:	781a      	ldrb	r2, [r3, #0]
 8005630:	4b18      	ldr	r3, [pc, #96]	; (8005694 <ST7735_SetRotation+0xfc>)
 8005632:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8005634:	e010      	b.n	8005658 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8005636:	2360      	movs	r3, #96	; 0x60
 8005638:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 800563a:	4b12      	ldr	r3, [pc, #72]	; (8005684 <ST7735_SetRotation+0xec>)
 800563c:	22a1      	movs	r2, #161	; 0xa1
 800563e:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8005640:	4b0f      	ldr	r3, [pc, #60]	; (8005680 <ST7735_SetRotation+0xe8>)
 8005642:	2282      	movs	r2, #130	; 0x82
 8005644:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8005646:	4b10      	ldr	r3, [pc, #64]	; (8005688 <ST7735_SetRotation+0xf0>)
 8005648:	781a      	ldrb	r2, [r3, #0]
 800564a:	4b12      	ldr	r3, [pc, #72]	; (8005694 <ST7735_SetRotation+0xfc>)
 800564c:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800564e:	4b10      	ldr	r3, [pc, #64]	; (8005690 <ST7735_SetRotation+0xf8>)
 8005650:	781a      	ldrb	r2, [r3, #0]
 8005652:	4b0e      	ldr	r3, [pc, #56]	; (800568c <ST7735_SetRotation+0xf4>)
 8005654:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8005656:	bf00      	nop
  }
  ST7735_Select();
 8005658:	f7ff fe80 	bl	800535c <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 800565c:	2036      	movs	r0, #54	; 0x36
 800565e:	f7ff fea9 	bl	80053b4 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8005662:	f107 030f 	add.w	r3, r7, #15
 8005666:	2101      	movs	r1, #1
 8005668:	4618      	mov	r0, r3
 800566a:	f7ff febd 	bl	80053e8 <ST7735_WriteData>
  ST7735_Unselect();
 800566e:	f7ff fe81 	bl	8005374 <ST7735_Unselect>
}
 8005672:	bf00      	nop
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	20001060 	.word	0x20001060
 8005680:	2000127c 	.word	0x2000127c
 8005684:	2000116c 	.word	0x2000116c
 8005688:	2000037c 	.word	0x2000037c
 800568c:	20000238 	.word	0x20000238
 8005690:	2000104d 	.word	0x2000104d
 8005694:	2000104c 	.word	0x2000104c

08005698 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	4603      	mov	r3, r0
 80056a0:	80fb      	strh	r3, [r7, #6]
 80056a2:	460b      	mov	r3, r1
 80056a4:	80bb      	strh	r3, [r7, #4]
 80056a6:	4613      	mov	r3, r2
 80056a8:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 80056aa:	88fb      	ldrh	r3, [r7, #6]
 80056ac:	4a17      	ldr	r2, [pc, #92]	; (800570c <ST7735_DrawPixel+0x74>)
 80056ae:	f9b2 2000 	ldrsh.w	r2, [r2]
 80056b2:	4293      	cmp	r3, r2
 80056b4:	da26      	bge.n	8005704 <ST7735_DrawPixel+0x6c>
 80056b6:	88bb      	ldrh	r3, [r7, #4]
 80056b8:	4a15      	ldr	r2, [pc, #84]	; (8005710 <ST7735_DrawPixel+0x78>)
 80056ba:	f9b2 2000 	ldrsh.w	r2, [r2]
 80056be:	4293      	cmp	r3, r2
 80056c0:	da20      	bge.n	8005704 <ST7735_DrawPixel+0x6c>
        return;

    ST7735_Select();
 80056c2:	f7ff fe4b 	bl	800535c <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 80056c6:	88fb      	ldrh	r3, [r7, #6]
 80056c8:	b2d8      	uxtb	r0, r3
 80056ca:	88bb      	ldrh	r3, [r7, #4]
 80056cc:	b2d9      	uxtb	r1, r3
 80056ce:	88fb      	ldrh	r3, [r7, #6]
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	3301      	adds	r3, #1
 80056d4:	b2da      	uxtb	r2, r3
 80056d6:	88bb      	ldrh	r3, [r7, #4]
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	3301      	adds	r3, #1
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	f7ff fee7 	bl	80054b0 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 80056e2:	887b      	ldrh	r3, [r7, #2]
 80056e4:	0a1b      	lsrs	r3, r3, #8
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	733b      	strb	r3, [r7, #12]
 80056ec:	887b      	ldrh	r3, [r7, #2]
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 80056f2:	f107 030c 	add.w	r3, r7, #12
 80056f6:	2102      	movs	r1, #2
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7ff fe75 	bl	80053e8 <ST7735_WriteData>

    ST7735_Unselect();
 80056fe:	f7ff fe39 	bl	8005374 <ST7735_Unselect>
 8005702:	e000      	b.n	8005706 <ST7735_DrawPixel+0x6e>
        return;
 8005704:	bf00      	nop
}
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	2000116c 	.word	0x2000116c
 8005710:	2000127c 	.word	0x2000127c

08005714 <HAL_GPIO_EXTI_Callback>:
#include "stm32f4xx_hal.h"
#include "stdbool.h"
#include "tim.h"

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	4603      	mov	r3, r0
 800571c:	80fb      	strh	r3, [r7, #6]
	if ( GPIO_Pin == ENCODER_1_BTN ) {
 800571e:	88fb      	ldrh	r3, [r7, #6]
 8005720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005724:	d103      	bne.n	800572e <HAL_GPIO_EXTI_Callback+0x1a>
		encoder_toggle_button (&encoder_1);
 8005726:	4804      	ldr	r0, [pc, #16]	; (8005738 <HAL_GPIO_EXTI_Callback+0x24>)
 8005728:	f000 f83d 	bl	80057a6 <encoder_toggle_button>
 800572c:	e000      	b.n	8005730 <HAL_GPIO_EXTI_Callback+0x1c>
	}
	else {
		return;
 800572e:	bf00      	nop
	}
}
 8005730:	3708      	adds	r7, #8
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	20001050 	.word	0x20001050

0800573c <encoder_struct_init>:

void encoder_struct_init(struct encoder *enc, TIM_HandleTypeDef *htim) {
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
	encoder_reset_flags(enc);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 f80a 	bl	8005760 <encoder_reset_flags>
	enc->ptr = htim;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	683a      	ldr	r2, [r7, #0]
 8005750:	60da      	str	r2, [r3, #12]
	encoder_check_counter (enc);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f817 	bl	8005786 <encoder_check_counter>
}
 8005758:	bf00      	nop
 800575a:	3708      	adds	r7, #8
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <encoder_reset_flags>:

void encoder_reset_flags(struct encoder *enc) {
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
	enc->step_clockwise = false;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	721a      	strb	r2, [r3, #8]
	enc->step_counterclockwise = false;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	725a      	strb	r2, [r3, #9]
	enc->enter = false;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	729a      	strb	r2, [r3, #10]
}
 800577a:	bf00      	nop
 800577c:	370c      	adds	r7, #12
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr

08005786 <encoder_check_counter>:

void encoder_check_counter (struct encoder *enc) {
 8005786:	b480      	push	{r7}
 8005788:	b083      	sub	sp, #12
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]

	enc->encoderState = __HAL_TIM_GET_COUNTER( enc->ptr );
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	605a      	str	r2, [r3, #4]
}
 800579a:	bf00      	nop
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <encoder_toggle_button>:

void encoder_toggle_button (struct encoder *enc) {
 80057a6:	b480      	push	{r7}
 80057a8:	b083      	sub	sp, #12
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]

	if ( enc->enter == true) {
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	7a9b      	ldrb	r3, [r3, #10]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d003      	beq.n	80057be <encoder_toggle_button+0x18>
		enc->enter = false;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	729a      	strb	r2, [r3, #10]
	else {
		enc->enter = true;
	}


}
 80057bc:	e002      	b.n	80057c4 <encoder_toggle_button+0x1e>
		enc->enter = true;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	729a      	strb	r2, [r3, #10]
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <encoder_check_direction>:

void encoder_check_direction(struct encoder *enc) {
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]

	encoder_check_counter (enc);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f7ff ffd4 	bl	8005786 <encoder_check_counter>

	int8_t state = (enc->lastEncoderState - enc->encoderState);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	b2da      	uxtb	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	73fb      	strb	r3, [r7, #15]

	if( state == 1 ) {
 80057f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d107      	bne.n	8005808 <encoder_check_direction+0x38>
		enc->lastEncoderState = enc->encoderState;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	601a      	str	r2, [r3, #0]
		enc->step_clockwise = true;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	721a      	strb	r2, [r3, #8]
	}
	else {
		enc->lastEncoderState = enc->encoderState;

	}
}
 8005806:	e03f      	b.n	8005888 <encoder_check_direction+0xb8>
	else if (state == -1){
 8005808:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800580c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005810:	d107      	bne.n	8005822 <encoder_check_direction+0x52>
		enc->lastEncoderState = enc->encoderState;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685a      	ldr	r2, [r3, #4]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	601a      	str	r2, [r3, #0]
		enc->step_counterclockwise = true;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	725a      	strb	r2, [r3, #9]
}
 8005820:	e032      	b.n	8005888 <encoder_check_direction+0xb8>
	else if ( (state == enc->lastEncoderState) && (enc->lastEncoderState == htim1.Init.Period) && (enc->encoderState == 0) ) {
 8005822:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	429a      	cmp	r2, r3
 800582c:	d111      	bne.n	8005852 <encoder_check_direction+0x82>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	4b17      	ldr	r3, [pc, #92]	; (8005890 <encoder_check_direction+0xc0>)
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	429a      	cmp	r2, r3
 8005838:	d10b      	bne.n	8005852 <encoder_check_direction+0x82>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d107      	bne.n	8005852 <encoder_check_direction+0x82>
		enc->lastEncoderState = enc->encoderState;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	601a      	str	r2, [r3, #0]
		enc->step_counterclockwise = true;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2201      	movs	r2, #1
 800584e:	725a      	strb	r2, [r3, #9]
 8005850:	e01a      	b.n	8005888 <encoder_check_direction+0xb8>
	else if ( (state < 0) && (enc->lastEncoderState == 0) && (enc->encoderState == htim1.Init.Period)) {
 8005852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005856:	2b00      	cmp	r3, #0
 8005858:	da11      	bge.n	800587e <encoder_check_direction+0xae>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10d      	bne.n	800587e <encoder_check_direction+0xae>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	4b0a      	ldr	r3, [pc, #40]	; (8005890 <encoder_check_direction+0xc0>)
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	429a      	cmp	r2, r3
 800586c:	d107      	bne.n	800587e <encoder_check_direction+0xae>
		enc->lastEncoderState = enc->encoderState;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685a      	ldr	r2, [r3, #4]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	601a      	str	r2, [r3, #0]
		enc->step_clockwise = true;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	721a      	strb	r2, [r3, #8]
 800587c:	e004      	b.n	8005888 <encoder_check_direction+0xb8>
		enc->lastEncoderState = enc->encoderState;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685a      	ldr	r2, [r3, #4]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	601a      	str	r2, [r3, #0]
}
 8005886:	e7ff      	b.n	8005888 <encoder_check_direction+0xb8>
 8005888:	bf00      	nop
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	20001460 	.word	0x20001460

08005894 <encoder_step_clockwise>:

_Bool encoder_step_clockwise(struct encoder *enc) {
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
	encoder_check_direction(enc);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f7ff ff97 	bl	80057d0 <encoder_check_direction>
	if(enc->step_clockwise == true) {
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	7a1b      	ldrb	r3, [r3, #8]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d004      	beq.n	80058b4 <encoder_step_clockwise+0x20>
		encoder_reset_flags(enc);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7ff ff58 	bl	8005760 <encoder_reset_flags>
		return true;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e000      	b.n	80058b6 <encoder_step_clockwise+0x22>
	}
	else {
		return false;
 80058b4:	2300      	movs	r3, #0
	}

}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3708      	adds	r7, #8
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <encoder_step_counterclockwise>:

_Bool encoder_step_counterclockwise(struct encoder *enc) {
 80058be:	b580      	push	{r7, lr}
 80058c0:	b082      	sub	sp, #8
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
	encoder_check_direction(enc);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f7ff ff82 	bl	80057d0 <encoder_check_direction>
	if(enc->step_counterclockwise == true) {
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	7a5b      	ldrb	r3, [r3, #9]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d004      	beq.n	80058de <encoder_step_counterclockwise+0x20>
		encoder_reset_flags(enc);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f7ff ff43 	bl	8005760 <encoder_reset_flags>
		return true;
 80058da:	2301      	movs	r3, #1
 80058dc:	e000      	b.n	80058e0 <encoder_step_counterclockwise+0x22>
	}
	else {
		return false;
 80058de:	2300      	movs	r3, #0
	}
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3708      	adds	r7, #8
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <encoder_enter>:

_Bool encoder_enter(struct encoder *enc) {
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
	if(enc->enter == true) {
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	7a9b      	ldrb	r3, [r3, #10]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d007      	beq.n	8005908 <encoder_enter+0x20>
		HAL_Delay(200);
 80058f8:	20c8      	movs	r0, #200	; 0xc8
 80058fa:	f7fc fa2b 	bl	8001d54 <HAL_Delay>
		encoder_reset_flags(enc);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7ff ff2e 	bl	8005760 <encoder_reset_flags>
		return true;
 8005904:	2301      	movs	r3, #1
 8005906:	e000      	b.n	800590a <encoder_enter+0x22>
	}
	else {
		return false;
 8005908:	2300      	movs	r3, #0
	}
}
 800590a:	4618      	mov	r0, r3
 800590c:	3708      	adds	r7, #8
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
	...

08005914 <Menu_GetMenuItemsNo>:
static const  struct menuitem *currMenuPtr = &menu_link;   //Bie¿¹ca pozycja menu
static int8_t menuindex;                                    //Numer aktualnie wybrane pozycji menu
static int8_t menufirstpos;                                 //Numer pozycji menu wyœwietlanej w górnym rzêdzie

uint8_t Menu_GetMenuItemsNo()            //Policz ile dane menu ma pozycji
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
	const struct menuitem *tmpmenuitem=currMenuPtr;
 800591a:	4b0b      	ldr	r3, [pc, #44]	; (8005948 <Menu_GetMenuItemsNo+0x34>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	607b      	str	r3, [r7, #4]
	uint8_t index=0;
 8005920:	2300      	movs	r3, #0
 8005922:	70fb      	strb	r3, [r7, #3]

	while(tmpmenuitem)
 8005924:	e005      	b.n	8005932 <Menu_GetMenuItemsNo+0x1e>
	{
		tmpmenuitem=tmpmenuitem->next;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	607b      	str	r3, [r7, #4]
		index++;
 800592c:	78fb      	ldrb	r3, [r7, #3]
 800592e:	3301      	adds	r3, #1
 8005930:	70fb      	strb	r3, [r7, #3]
	while(tmpmenuitem)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d1f6      	bne.n	8005926 <Menu_GetMenuItemsNo+0x12>
	}
	return index;
 8005938:	78fb      	ldrb	r3, [r7, #3]
}
 800593a:	4618      	mov	r0, r3
 800593c:	370c      	adds	r7, #12
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	2000000c 	.word	0x2000000c

0800594c <Menu_GetMenuItem>:

const struct menuitem *Menu_GetMenuItem(uint8_t index)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	4603      	mov	r3, r0
 8005954:	71fb      	strb	r3, [r7, #7]
	const struct menuitem *tmpmenuitem=currMenuPtr;
 8005956:	4b0b      	ldr	r3, [pc, #44]	; (8005984 <Menu_GetMenuItem+0x38>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	60fb      	str	r3, [r7, #12]

	while((tmpmenuitem) && (index>0)) {
 800595c:	e005      	b.n	800596a <Menu_GetMenuItem+0x1e>
	 tmpmenuitem=tmpmenuitem->next;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	60fb      	str	r3, [r7, #12]
	 index--;
 8005964:	79fb      	ldrb	r3, [r7, #7]
 8005966:	3b01      	subs	r3, #1
 8005968:	71fb      	strb	r3, [r7, #7]
	while((tmpmenuitem) && (index>0)) {
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d002      	beq.n	8005976 <Menu_GetMenuItem+0x2a>
 8005970:	79fb      	ldrb	r3, [r7, #7]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1f3      	bne.n	800595e <Menu_GetMenuItem+0x12>
	}
	return tmpmenuitem;
 8005976:	68fb      	ldr	r3, [r7, #12]
}
 8005978:	4618      	mov	r0, r3
 800597a:	3714      	adds	r7, #20
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr
 8005984:	2000000c 	.word	0x2000000c

08005988 <Menu_GetMenuRows>:

uint8_t Menu_GetMenuRows()
{
 8005988:	b480      	push	{r7}
 800598a:	af00      	add	r7, sp, #0
	return 5;
 800598c:	2305      	movs	r3, #5
}
 800598e:	4618      	mov	r0, r3
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <Menu_Show>:

void Menu_Show()
{
 8005998:	b590      	push	{r4, r7, lr}
 800599a:	b085      	sub	sp, #20
 800599c:	af02      	add	r7, sp, #8
	const struct menuitem *tmpmenuitem=Menu_GetMenuItem(menufirstpos);
 800599e:	4b64      	ldr	r3, [pc, #400]	; (8005b30 <Menu_Show+0x198>)
 80059a0:	f993 3000 	ldrsb.w	r3, [r3]
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7ff ffd0 	bl	800594c <Menu_GetMenuItem>
 80059ac:	6078      	str	r0, [r7, #4]
	uint8_t menuitemsno=Menu_GetMenuItemsNo();
 80059ae:	f7ff ffb1 	bl	8005914 <Menu_GetMenuItemsNo>
 80059b2:	4603      	mov	r3, r0
 80059b4:	70bb      	strb	r3, [r7, #2]

	//UG_FillFrame(0, 10+(i*10), UG_GetXDim(), (gui1.font.char_height)+(10+(i*10)), C_BLACK);
	for(uint8_t i=0; i < Menu_GetMenuRows(); i++) {
 80059b6:	2300      	movs	r3, #0
 80059b8:	70fb      	strb	r3, [r7, #3]
 80059ba:	e0aa      	b.n	8005b12 <Menu_Show+0x17a>
		if(menuindex == ((menufirstpos + i) % menuitemsno)) {
 80059bc:	4b5d      	ldr	r3, [pc, #372]	; (8005b34 <Menu_Show+0x19c>)
 80059be:	f993 3000 	ldrsb.w	r3, [r3]
 80059c2:	4618      	mov	r0, r3
 80059c4:	4b5a      	ldr	r3, [pc, #360]	; (8005b30 <Menu_Show+0x198>)
 80059c6:	f993 3000 	ldrsb.w	r3, [r3]
 80059ca:	461a      	mov	r2, r3
 80059cc:	78fb      	ldrb	r3, [r7, #3]
 80059ce:	4413      	add	r3, r2
 80059d0:	78ba      	ldrb	r2, [r7, #2]
 80059d2:	fb93 f1f2 	sdiv	r1, r3, r2
 80059d6:	fb02 f201 	mul.w	r2, r2, r1
 80059da:	1a9b      	subs	r3, r3, r2
 80059dc:	4298      	cmp	r0, r3
 80059de:	d131      	bne.n	8005a44 <Menu_Show+0xac>
			UG_FillFrame(0, 10+(i*10), UG_GetXDim(), (gui1.font.char_height)+(10+(i*10)), C_BLUE);
 80059e0:	78fb      	ldrb	r3, [r7, #3]
 80059e2:	3301      	adds	r3, #1
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	461a      	mov	r2, r3
 80059e8:	0092      	lsls	r2, r2, #2
 80059ea:	4413      	add	r3, r2
 80059ec:	005b      	lsls	r3, r3, #1
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	b21c      	sxth	r4, r3
 80059f2:	f000 ffd1 	bl	8006998 <UG_GetXDim>
 80059f6:	4603      	mov	r3, r0
 80059f8:	4618      	mov	r0, r3
 80059fa:	4b4f      	ldr	r3, [pc, #316]	; (8005b38 <Menu_Show+0x1a0>)
 80059fc:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8005a00:	b29a      	uxth	r2, r3
 8005a02:	78fb      	ldrb	r3, [r7, #3]
 8005a04:	3301      	adds	r3, #1
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	4619      	mov	r1, r3
 8005a0a:	0089      	lsls	r1, r1, #2
 8005a0c:	440b      	add	r3, r1
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	4413      	add	r3, r2
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	b21b      	sxth	r3, r3
 8005a18:	22ff      	movs	r2, #255	; 0xff
 8005a1a:	9200      	str	r2, [sp, #0]
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	4621      	mov	r1, r4
 8005a20:	2000      	movs	r0, #0
 8005a22:	f000 fdb5 	bl	8006590 <UG_FillFrame>
			UG_PutString( 2, 10+(i*10), ">" );
 8005a26:	78fb      	ldrb	r3, [r7, #3]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	0092      	lsls	r2, r2, #2
 8005a30:	4413      	add	r3, r2
 8005a32:	005b      	lsls	r3, r3, #1
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	b21b      	sxth	r3, r3
 8005a38:	4a40      	ldr	r2, [pc, #256]	; (8005b3c <Menu_Show+0x1a4>)
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	2002      	movs	r0, #2
 8005a3e:	f000 fe17 	bl	8006670 <UG_PutString>
 8005a42:	e030      	b.n	8005aa6 <Menu_Show+0x10e>
		}
		else {
			UG_FillFrame(0, 10+(i*10), UG_GetXDim(), (gui1.font.char_height)+(10+(i*10)), C_BLACK);
 8005a44:	78fb      	ldrb	r3, [r7, #3]
 8005a46:	3301      	adds	r3, #1
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	0092      	lsls	r2, r2, #2
 8005a4e:	4413      	add	r3, r2
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	b21c      	sxth	r4, r3
 8005a56:	f000 ff9f 	bl	8006998 <UG_GetXDim>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	4b36      	ldr	r3, [pc, #216]	; (8005b38 <Menu_Show+0x1a0>)
 8005a60:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	78fb      	ldrb	r3, [r7, #3]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	0089      	lsls	r1, r1, #2
 8005a70:	440b      	add	r3, r1
 8005a72:	005b      	lsls	r3, r3, #1
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	4413      	add	r3, r2
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	b21b      	sxth	r3, r3
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	9200      	str	r2, [sp, #0]
 8005a80:	4602      	mov	r2, r0
 8005a82:	4621      	mov	r1, r4
 8005a84:	2000      	movs	r0, #0
 8005a86:	f000 fd83 	bl	8006590 <UG_FillFrame>
			UG_PutString( 2, 10+(i*10), " " );  //Dana pozycja menu jest zaznaczona
 8005a8a:	78fb      	ldrb	r3, [r7, #3]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	461a      	mov	r2, r3
 8005a92:	0092      	lsls	r2, r2, #2
 8005a94:	4413      	add	r3, r2
 8005a96:	005b      	lsls	r3, r3, #1
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	b21b      	sxth	r3, r3
 8005a9c:	4a28      	ldr	r2, [pc, #160]	; (8005b40 <Menu_Show+0x1a8>)
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	2002      	movs	r0, #2
 8005aa2:	f000 fde5 	bl	8006670 <UG_PutString>
		}

		UG_PutString( 30, 10+(i*10), tmpmenuitem->text); //Wyœwietl pozycjê menu
 8005aa6:	78fb      	ldrb	r3, [r7, #3]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	461a      	mov	r2, r3
 8005aae:	0092      	lsls	r2, r2, #2
 8005ab0:	4413      	add	r3, r2
 8005ab2:	005b      	lsls	r3, r3, #1
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	b219      	sxth	r1, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	461a      	mov	r2, r3
 8005abe:	201e      	movs	r0, #30
 8005ac0:	f000 fdd6 	bl	8006670 <UG_PutString>

		if(tmpmenuitem->submenu) {
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00d      	beq.n	8005ae8 <Menu_Show+0x150>
			UG_PutString( 2, 10+(i*10), "*"); //Zaznacz, ze mamy submenu
 8005acc:	78fb      	ldrb	r3, [r7, #3]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	0092      	lsls	r2, r2, #2
 8005ad6:	4413      	add	r3, r2
 8005ad8:	005b      	lsls	r3, r3, #1
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	b21b      	sxth	r3, r3
 8005ade:	4a19      	ldr	r2, [pc, #100]	; (8005b44 <Menu_Show+0x1ac>)
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	2002      	movs	r0, #2
 8005ae4:	f000 fdc4 	bl	8006670 <UG_PutString>
		}

		tmpmenuitem = tmpmenuitem->next;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	607b      	str	r3, [r7, #4]

		if(tmpmenuitem == NULL)  //Koniec listy
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d10b      	bne.n	8005b0c <Menu_Show+0x174>
		{
			if(Menu_GetMenuItemsNo() > Menu_GetMenuRows()){
 8005af4:	f7ff ff0e 	bl	8005914 <Menu_GetMenuItemsNo>
 8005af8:	4603      	mov	r3, r0
 8005afa:	461c      	mov	r4, r3
 8005afc:	f7ff ff44 	bl	8005988 <Menu_GetMenuRows>
 8005b00:	4603      	mov	r3, r0
 8005b02:	429c      	cmp	r4, r3
 8005b04:	d90e      	bls.n	8005b24 <Menu_Show+0x18c>
				tmpmenuitem=currMenuPtr; //Zawijamy listê jeœli jest d³u¿sza ni¿ liczba wyœwietlanych pozycji
 8005b06:	4b10      	ldr	r3, [pc, #64]	; (8005b48 <Menu_Show+0x1b0>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	607b      	str	r3, [r7, #4]
	for(uint8_t i=0; i < Menu_GetMenuRows(); i++) {
 8005b0c:	78fb      	ldrb	r3, [r7, #3]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	70fb      	strb	r3, [r7, #3]
 8005b12:	f7ff ff39 	bl	8005988 <Menu_GetMenuRows>
 8005b16:	4603      	mov	r3, r0
 8005b18:	461a      	mov	r2, r3
 8005b1a:	78fb      	ldrb	r3, [r7, #3]
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	f4ff af4d 	bcc.w	80059bc <Menu_Show+0x24>
			else {
				break;   //lub koñczymy, ¿eby unikn¹æ powtarzania elementów
			}
		}
	}
}
 8005b22:	e000      	b.n	8005b26 <Menu_Show+0x18e>
				break;   //lub koñczymy, ¿eby unikn¹æ powtarzania elementów
 8005b24:	bf00      	nop
}
 8005b26:	bf00      	nop
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd90      	pop	{r4, r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	200000f9 	.word	0x200000f9
 8005b34:	200000f8 	.word	0x200000f8
 8005b38:	200001dc 	.word	0x200001dc
 8005b3c:	08008300 	.word	0x08008300
 8005b40:	08008304 	.word	0x08008304
 8005b44:	08008308 	.word	0x08008308
 8005b48:	2000000c 	.word	0x2000000c

08005b4c <Menu_SelectNext>:

void Menu_SelectNext()
{
 8005b4c:	b590      	push	{r4, r7, lr}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
	uint8_t no = Menu_GetMenuItemsNo();
 8005b52:	f7ff fedf 	bl	8005914 <Menu_GetMenuItemsNo>
 8005b56:	4603      	mov	r3, r0
 8005b58:	71bb      	strb	r3, [r7, #6]
	menuindex++;
 8005b5a:	4b31      	ldr	r3, [pc, #196]	; (8005c20 <Menu_SelectNext+0xd4>)
 8005b5c:	f993 3000 	ldrsb.w	r3, [r3]
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	3301      	adds	r3, #1
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	b25a      	sxtb	r2, r3
 8005b68:	4b2d      	ldr	r3, [pc, #180]	; (8005c20 <Menu_SelectNext+0xd4>)
 8005b6a:	701a      	strb	r2, [r3, #0]
	if(no > Menu_GetMenuRows())        //Czy liczba pozycji menu jest wiêksza ni¿ liczba wyœwietlanych pozycji?
 8005b6c:	f7ff ff0c 	bl	8005988 <Menu_GetMenuRows>
 8005b70:	4603      	mov	r3, r0
 8005b72:	461a      	mov	r2, r3
 8005b74:	79bb      	ldrb	r3, [r7, #6]
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d931      	bls.n	8005bde <Menu_SelectNext+0x92>
		{
			int8_t dist;               //Odleg³oœæ pomiêdzy pierwsz¹ wyœwietlan¹ pozycj¹, a pozycj¹ podœwietlon¹
			if(menuindex < menufirstpos) dist = no - menufirstpos + menuindex; //Jest zale¿na od tego, któa z pozycji jest wiêksza
 8005b7a:	4b29      	ldr	r3, [pc, #164]	; (8005c20 <Menu_SelectNext+0xd4>)
 8005b7c:	f993 2000 	ldrsb.w	r2, [r3]
 8005b80:	4b28      	ldr	r3, [pc, #160]	; (8005c24 <Menu_SelectNext+0xd8>)
 8005b82:	f993 3000 	ldrsb.w	r3, [r3]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	da0e      	bge.n	8005ba8 <Menu_SelectNext+0x5c>
 8005b8a:	4b26      	ldr	r3, [pc, #152]	; (8005c24 <Menu_SelectNext+0xd8>)
 8005b8c:	f993 3000 	ldrsb.w	r3, [r3]
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	79ba      	ldrb	r2, [r7, #6]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	b2da      	uxtb	r2, r3
 8005b98:	4b21      	ldr	r3, [pc, #132]	; (8005c20 <Menu_SelectNext+0xd4>)
 8005b9a:	f993 3000 	ldrsb.w	r3, [r3]
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	4413      	add	r3, r2
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	71fb      	strb	r3, [r7, #7]
 8005ba6:	e00a      	b.n	8005bbe <Menu_SelectNext+0x72>
			   else dist=menuindex-menufirstpos;
 8005ba8:	4b1d      	ldr	r3, [pc, #116]	; (8005c20 <Menu_SelectNext+0xd4>)
 8005baa:	f993 3000 	ldrsb.w	r3, [r3]
 8005bae:	b2da      	uxtb	r2, r3
 8005bb0:	4b1c      	ldr	r3, [pc, #112]	; (8005c24 <Menu_SelectNext+0xd8>)
 8005bb2:	f993 3000 	ldrsb.w	r3, [r3]
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	71fb      	strb	r3, [r7, #7]
			if(dist >= Menu_GetMenuRows()) menufirstpos++;  //Koniec ekranu, trzeba przewijaæ
 8005bbe:	f997 4007 	ldrsb.w	r4, [r7, #7]
 8005bc2:	f7ff fee1 	bl	8005988 <Menu_GetMenuRows>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	429c      	cmp	r4, r3
 8005bca:	db08      	blt.n	8005bde <Menu_SelectNext+0x92>
 8005bcc:	4b15      	ldr	r3, [pc, #84]	; (8005c24 <Menu_SelectNext+0xd8>)
 8005bce:	f993 3000 	ldrsb.w	r3, [r3]
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	b25a      	sxtb	r2, r3
 8005bda:	4b12      	ldr	r3, [pc, #72]	; (8005c24 <Menu_SelectNext+0xd8>)
 8005bdc:	701a      	strb	r2, [r3, #0]
		}

	menuindex %= no;     //Liczymy wszysko modulo liczba pozycji w menu
 8005bde:	4b10      	ldr	r3, [pc, #64]	; (8005c20 <Menu_SelectNext+0xd4>)
 8005be0:	f993 3000 	ldrsb.w	r3, [r3]
 8005be4:	461a      	mov	r2, r3
 8005be6:	79bb      	ldrb	r3, [r7, #6]
 8005be8:	fb92 f1f3 	sdiv	r1, r2, r3
 8005bec:	fb03 f301 	mul.w	r3, r3, r1
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	b25a      	sxtb	r2, r3
 8005bf4:	4b0a      	ldr	r3, [pc, #40]	; (8005c20 <Menu_SelectNext+0xd4>)
 8005bf6:	701a      	strb	r2, [r3, #0]
	menufirstpos %= no;
 8005bf8:	4b0a      	ldr	r3, [pc, #40]	; (8005c24 <Menu_SelectNext+0xd8>)
 8005bfa:	f993 3000 	ldrsb.w	r3, [r3]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	79bb      	ldrb	r3, [r7, #6]
 8005c02:	fb92 f1f3 	sdiv	r1, r2, r3
 8005c06:	fb03 f301 	mul.w	r3, r3, r1
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	b25a      	sxtb	r2, r3
 8005c0e:	4b05      	ldr	r3, [pc, #20]	; (8005c24 <Menu_SelectNext+0xd8>)
 8005c10:	701a      	strb	r2, [r3, #0]
	Menu_Show();      //Wyœwietl menu
 8005c12:	f7ff fec1 	bl	8005998 <Menu_Show>
}
 8005c16:	bf00      	nop
 8005c18:	370c      	adds	r7, #12
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd90      	pop	{r4, r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	200000f8 	.word	0x200000f8
 8005c24:	200000f9 	.word	0x200000f9

08005c28 <Menu_SelectPrev>:

void Menu_SelectPrev()
{
 8005c28:	b598      	push	{r3, r4, r7, lr}
 8005c2a:	af00      	add	r7, sp, #0
	if(menuindex > 0)
 8005c2c:	4b23      	ldr	r3, [pc, #140]	; (8005cbc <Menu_SelectPrev+0x94>)
 8005c2e:	f993 3000 	ldrsb.w	r3, [r3]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	dd1a      	ble.n	8005c6c <Menu_SelectPrev+0x44>
	{
		if(menuindex == menufirstpos) menufirstpos--;
 8005c36:	4b21      	ldr	r3, [pc, #132]	; (8005cbc <Menu_SelectPrev+0x94>)
 8005c38:	f993 2000 	ldrsb.w	r2, [r3]
 8005c3c:	4b20      	ldr	r3, [pc, #128]	; (8005cc0 <Menu_SelectPrev+0x98>)
 8005c3e:	f993 3000 	ldrsb.w	r3, [r3]
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d108      	bne.n	8005c58 <Menu_SelectPrev+0x30>
 8005c46:	4b1e      	ldr	r3, [pc, #120]	; (8005cc0 <Menu_SelectPrev+0x98>)
 8005c48:	f993 3000 	ldrsb.w	r3, [r3]
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	b25a      	sxtb	r2, r3
 8005c54:	4b1a      	ldr	r3, [pc, #104]	; (8005cc0 <Menu_SelectPrev+0x98>)
 8005c56:	701a      	strb	r2, [r3, #0]
		menuindex--;               //Poprzedni element
 8005c58:	4b18      	ldr	r3, [pc, #96]	; (8005cbc <Menu_SelectPrev+0x94>)
 8005c5a:	f993 3000 	ldrsb.w	r3, [r3]
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	3b01      	subs	r3, #1
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	b25a      	sxtb	r2, r3
 8005c66:	4b15      	ldr	r3, [pc, #84]	; (8005cbc <Menu_SelectPrev+0x94>)
 8005c68:	701a      	strb	r2, [r3, #0]
 8005c6a:	e023      	b.n	8005cb4 <Menu_SelectPrev+0x8c>
	}
	 else
	{
		if(menufirstpos == 0)
 8005c6c:	4b14      	ldr	r3, [pc, #80]	; (8005cc0 <Menu_SelectPrev+0x98>)
 8005c6e:	f993 3000 	ldrsb.w	r3, [r3]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d116      	bne.n	8005ca4 <Menu_SelectPrev+0x7c>
		{
			menuindex=Menu_GetMenuItemsNo()-1;  //Zawijamy menu
 8005c76:	f7ff fe4d 	bl	8005914 <Menu_GetMenuItemsNo>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	b25a      	sxtb	r2, r3
 8005c82:	4b0e      	ldr	r3, [pc, #56]	; (8005cbc <Menu_SelectPrev+0x94>)
 8005c84:	701a      	strb	r2, [r3, #0]
			if(Menu_GetMenuItemsNo()>Menu_GetMenuRows()) menufirstpos = menuindex;  //Jezeli mamy mniej pozycji menu niz linii na LCD to nie zmieniamy numeru pierwszej pozycji menu
 8005c86:	f7ff fe45 	bl	8005914 <Menu_GetMenuItemsNo>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	461c      	mov	r4, r3
 8005c8e:	f7ff fe7b 	bl	8005988 <Menu_GetMenuRows>
 8005c92:	4603      	mov	r3, r0
 8005c94:	429c      	cmp	r4, r3
 8005c96:	d90d      	bls.n	8005cb4 <Menu_SelectPrev+0x8c>
 8005c98:	4b08      	ldr	r3, [pc, #32]	; (8005cbc <Menu_SelectPrev+0x94>)
 8005c9a:	f993 2000 	ldrsb.w	r2, [r3]
 8005c9e:	4b08      	ldr	r3, [pc, #32]	; (8005cc0 <Menu_SelectPrev+0x98>)
 8005ca0:	701a      	strb	r2, [r3, #0]
 8005ca2:	e007      	b.n	8005cb4 <Menu_SelectPrev+0x8c>
		} else menuindex = Menu_GetMenuItemsNo()-1;
 8005ca4:	f7ff fe36 	bl	8005914 <Menu_GetMenuItemsNo>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	3b01      	subs	r3, #1
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	b25a      	sxtb	r2, r3
 8005cb0:	4b02      	ldr	r3, [pc, #8]	; (8005cbc <Menu_SelectPrev+0x94>)
 8005cb2:	701a      	strb	r2, [r3, #0]
	}
	Menu_Show();     //Wyswietl menu
 8005cb4:	f7ff fe70 	bl	8005998 <Menu_Show>
}
 8005cb8:	bf00      	nop
 8005cba:	bd98      	pop	{r3, r4, r7, pc}
 8005cbc:	200000f8 	.word	0x200000f8
 8005cc0:	200000f9 	.word	0x200000f9

08005cc4 <Menu_Back>:

void Menu_Back()
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	af00      	add	r7, sp, #0
	menufirstpos = 0;
 8005cc8:	4b07      	ldr	r3, [pc, #28]	; (8005ce8 <Menu_Back+0x24>)
 8005cca:	2200      	movs	r2, #0
 8005ccc:	701a      	strb	r2, [r3, #0]
	menuindex = 0;
 8005cce:	4b07      	ldr	r3, [pc, #28]	; (8005cec <Menu_Back+0x28>)
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	701a      	strb	r2, [r3, #0]
	currMenuPtr = currMenuPtr->parent;
 8005cd4:	4b06      	ldr	r3, [pc, #24]	; (8005cf0 <Menu_Back+0x2c>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	4a05      	ldr	r2, [pc, #20]	; (8005cf0 <Menu_Back+0x2c>)
 8005cdc:	6013      	str	r3, [r2, #0]
}
 8005cde:	bf00      	nop
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr
 8005ce8:	200000f9 	.word	0x200000f9
 8005cec:	200000f8 	.word	0x200000f8
 8005cf0:	2000000c 	.word	0x2000000c

08005cf4 <Menu_Click>:

void Menu_Click()
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
  const struct menuitem *tmpmenuitem = Menu_GetMenuItem(menuindex);
 8005cfa:	4b14      	ldr	r3, [pc, #80]	; (8005d4c <Menu_Click+0x58>)
 8005cfc:	f993 3000 	ldrsb.w	r3, [r3]
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7ff fe22 	bl	800594c <Menu_GetMenuItem>
 8005d08:	60f8      	str	r0, [r7, #12]
  const struct menuitem *submenu = tmpmenuitem->submenu;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	60bb      	str	r3, [r7, #8]

  menuitemfuncptr mfptr = tmpmenuitem->menuitemfunc;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	607b      	str	r3, [r7, #4]
  if(mfptr) (*mfptr)();
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d001      	beq.n	8005d20 <Menu_Click+0x2c>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4798      	blx	r3
  if(submenu) {
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d008      	beq.n	8005d38 <Menu_Click+0x44>
	  currMenuPtr = submenu;
 8005d26:	4a0a      	ldr	r2, [pc, #40]	; (8005d50 <Menu_Click+0x5c>)
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	6013      	str	r3, [r2, #0]
	  menuindex = 0;
 8005d2c:	4b07      	ldr	r3, [pc, #28]	; (8005d4c <Menu_Click+0x58>)
 8005d2e:	2200      	movs	r2, #0
 8005d30:	701a      	strb	r2, [r3, #0]
	  menufirstpos = 0;
 8005d32:	4b08      	ldr	r3, [pc, #32]	; (8005d54 <Menu_Click+0x60>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	701a      	strb	r2, [r3, #0]
   }
  UG_FillScreen( C_BLACK );
 8005d38:	2000      	movs	r0, #0
 8005d3a:	f000 fc07 	bl	800654c <UG_FillScreen>
  Menu_Show();
 8005d3e:	f7ff fe2b 	bl	8005998 <Menu_Show>
}
 8005d42:	bf00      	nop
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	200000f8 	.word	0x200000f8
 8005d50:	2000000c 	.word	0x2000000c
 8005d54:	200000f9 	.word	0x200000f9

08005d58 <GUI_init>:

void GUI_init(void) {
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	af00      	add	r7, sp, #0

  /* -------------------------------------------------------------------------------- */
  /* Define µGUI structure (ST7735 128x160)                              			  */
  /* -------------------------------------------------------------------------------- */
  UG_Init(&gui1,(void(*)(UG_S16,UG_S16,UG_COLOR))ST7735_DrawPixel,ST7735_HEIGHT,ST7735_WIDTH);
 8005d5c:	2382      	movs	r3, #130	; 0x82
 8005d5e:	22a1      	movs	r2, #161	; 0xa1
 8005d60:	4909      	ldr	r1, [pc, #36]	; (8005d88 <GUI_init+0x30>)
 8005d62:	480a      	ldr	r0, [pc, #40]	; (8005d8c <GUI_init+0x34>)
 8005d64:	f000 fb4e 	bl	8006404 <UG_Init>
  /* Clear Screen */
  UG_FillScreen( C_BLACK );
 8005d68:	2000      	movs	r0, #0
 8005d6a:	f000 fbef 	bl	800654c <UG_FillScreen>
  UG_FontSelect ( &FONT_6X8 ) ;UG_SetBackcolor ( C_BLACK ) ;UG_SetForecolor ( C_CYAN ) ;
 8005d6e:	4808      	ldr	r0, [pc, #32]	; (8005d90 <GUI_init+0x38>)
 8005d70:	f000 fbce 	bl	8006510 <UG_FontSelect>
 8005d74:	2000      	movs	r0, #0
 8005d76:	f000 fdff 	bl	8006978 <UG_SetBackcolor>
 8005d7a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005d7e:	f000 fdeb 	bl	8006958 <UG_SetForecolor>
//  /* Show Window 1 */
//  UG_WindowShow( &window_1 );
//  UG_Update();
//  UG_WindowShow( &window_2 );
//  UG_Update();
}
 8005d82:	bf00      	nop
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	08005699 	.word	0x08005699
 8005d8c:	200001dc 	.word	0x200001dc
 8005d90:	08008c70 	.word	0x08008c70

08005d94 <func_A1>:
////  button1_1->str =
////  UG_OBJECT* obj = _UG_SearchObject( UG_WINDOW* wnd, UG_U8 type, UG_U8 id );
//}
//

void func_A1() {
 8005d94:	b580      	push	{r7, lr}
 8005d96:	af00      	add	r7, sp, #0
	 CHANGE_temperature(&ramp);
 8005d98:	4802      	ldr	r0, [pc, #8]	; (8005da4 <func_A1+0x10>)
 8005d9a:	f000 f8fd 	bl	8005f98 <CHANGE_temperature>
}
 8005d9e:	bf00      	nop
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	20000cc0 	.word	0x20000cc0

08005da8 <func_A2>:
void func_A2() {
 8005da8:	b480      	push	{r7}
 8005daa:	af00      	add	r7, sp, #0
	// CHANGE_amplitude(&ramp);
}
 8005dac:	bf00      	nop
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
	...

08005db8 <func_B1>:

void func_B1(){
 8005db8:	b580      	push	{r7, lr}
 8005dba:	af00      	add	r7, sp, #0
	 CHANGE_temperature(&sine);
 8005dbc:	4802      	ldr	r0, [pc, #8]	; (8005dc8 <func_B1+0x10>)
 8005dbe:	f000 f8eb 	bl	8005f98 <CHANGE_temperature>
}
 8005dc2:	bf00      	nop
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	20000fa0 	.word	0x20000fa0

08005dcc <func_B2>:

void func_B2() {
 8005dcc:	b480      	push	{r7}
 8005dce:	af00      	add	r7, sp, #0
	 //CHANGE_frequency(&sine);
}
 8005dd0:	bf00      	nop
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
	...

08005ddc <waveform_struct_init>:
							TIM_HandleTypeDef *htim,
							uint32_t *LUT,
							uint32_t samples,
							float freq,
							uint8_t vpp,
							uint8_t offset) {
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6178      	str	r0, [r7, #20]
 8005de4:	6139      	str	r1, [r7, #16]
 8005de6:	60fa      	str	r2, [r7, #12]
 8005de8:	60bb      	str	r3, [r7, #8]
 8005dea:	ed87 0a01 	vstr	s0, [r7, #4]

	wf->enableWaveform = true;
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	2201      	movs	r2, #1
 8005df2:	701a      	strb	r2, [r3, #0]
	wf->TIM_ptr = htim;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	605a      	str	r2, [r3, #4]
	wf->LUT = LUT;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	609a      	str	r2, [r3, #8]
	wf->samples = samples;
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	60da      	str	r2, [r3, #12]
	wf->frequency = freq * 100;
 8005e06:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e0a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8005e3c <waveform_struct_init+0x60>
 8005e0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e16:	ee17 2a90 	vmov	r2, s15
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	611a      	str	r2, [r3, #16]
	SET_wave_ARR(wf);
 8005e1e:	6978      	ldr	r0, [r7, #20]
 8005e20:	f000 f80e 	bl	8005e40 <SET_wave_ARR>
	wf->voltage_pp = vpp;
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005e2a:	751a      	strb	r2, [r3, #20]
	wf->offset = offset;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8005e32:	755a      	strb	r2, [r3, #21]
}
 8005e34:	bf00      	nop
 8005e36:	3718      	adds	r7, #24
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	42c80000 	.word	0x42c80000

08005e40 <SET_wave_ARR>:

void SET_wave_ARR(struct waveform *wf) {
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b088      	sub	sp, #32
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]

	if(wf->frequency < 1000000 && wf->frequency > 1) {
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	4a2e      	ldr	r2, [pc, #184]	; (8005f08 <SET_wave_ARR+0xc8>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d845      	bhi.n	8005ede <SET_wave_ARR+0x9e>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d941      	bls.n	8005ede <SET_wave_ARR+0x9e>
		uint64_t trigger_frequency = (wf->frequency / 100) * wf->samples;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	4a2b      	ldr	r2, [pc, #172]	; (8005f0c <SET_wave_ARR+0xcc>)
 8005e60:	fba2 2303 	umull	r2, r3, r2, r3
 8005e64:	095b      	lsrs	r3, r3, #5
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	68d2      	ldr	r2, [r2, #12]
 8005e6a:	fb02 f303 	mul.w	r3, r2, r3
 8005e6e:	461a      	mov	r2, r3
 8005e70:	f04f 0300 	mov.w	r3, #0
 8005e74:	e9c7 2306 	strd	r2, r3, [r7, #24]
		double TIMx_ARR;
		TIMx_ARR = APB1_TIM_CLK / trigger_frequency;
 8005e78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e7c:	a120      	add	r1, pc, #128	; (adr r1, 8005f00 <SET_wave_ARR+0xc0>)
 8005e7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e82:	f7fa fe93 	bl	8000bac <__aeabi_uldivmod>
 8005e86:	4602      	mov	r2, r0
 8005e88:	460b      	mov	r3, r1
 8005e8a:	4610      	mov	r0, r2
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	f7fa fb75 	bl	800057c <__aeabi_ul2d>
 8005e92:	4602      	mov	r2, r0
 8005e94:	460b      	mov	r3, r1
 8005e96:	e9c7 2304 	strd	r2, r3, [r7, #16]
		TIMx_ARR = TIMx_ARR/(TIM2_PRESCALER);
		TIMx_ARR = TIMx_ARR - 1;
 8005e9a:	f04f 0200 	mov.w	r2, #0
 8005e9e:	4b1c      	ldr	r3, [pc, #112]	; (8005f10 <SET_wave_ARR+0xd0>)
 8005ea0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005ea4:	f7fa f9e8 	bl	8000278 <__aeabi_dsub>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	460b      	mov	r3, r1
 8005eac:	e9c7 2304 	strd	r2, r3, [r7, #16]

//		double TIMx_ARR = ( APB1_TIM_CLK - trigger_frequency - (trigger_frequency * TIM2_PRESCALER) ) / ( (trigger_frequency * TIM2_PRESCALER) + trigger_frequency );
		uint64_t TIMx_ARR2 = TIMx_ARR;
 8005eb0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005eb4:	f7fa fe92 	bl	8000bdc <__aeabi_d2ulz>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	460b      	mov	r3, r1
 8005ebc:	e9c7 2302 	strd	r2, r3, [r7, #8]
		//wf->TIM_ptr->Init.Period = TIMx_ARR;
		__HAL_TIM_SET_AUTORELOAD(wf->TIM_ptr, TIMx_ARR2-1);
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	3a01      	subs	r2, #1
 8005eca:	62da      	str	r2, [r3, #44]	; 0x2c
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	3a01      	subs	r2, #1
 8005ed4:	60da      	str	r2, [r3, #12]
		HAL_Delay(20);
 8005ed6:	2014      	movs	r0, #20
 8005ed8:	f7fb ff3c 	bl	8001d54 <HAL_Delay>
	if(wf->frequency < 1000000 && wf->frequency > 1) {
 8005edc:	e00c      	b.n	8005ef8 <SET_wave_ARR+0xb8>
	}
	else {
		__HAL_TIM_SET_AUTORELOAD(wf->TIM_ptr, 1);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	62da      	str	r2, [r3, #44]	; 0x2c
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	2201      	movs	r2, #1
 8005eee:	60da      	str	r2, [r3, #12]
		HAL_Delay(20);
 8005ef0:	2014      	movs	r0, #20
 8005ef2:	f7fb ff2f 	bl	8001d54 <HAL_Delay>
	}

}
 8005ef6:	bf00      	nop
 8005ef8:	bf00      	nop
 8005efa:	3720      	adds	r7, #32
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	0280de80 	.word	0x0280de80
 8005f04:	00000000 	.word	0x00000000
 8005f08:	000f423f 	.word	0x000f423f
 8005f0c:	51eb851f 	.word	0x51eb851f
 8005f10:	3ff00000 	.word	0x3ff00000

08005f14 <CHANGE_cursor>:

void CHANGE_cursor(struct waveform *wf) {
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]


	while(encoder_enter(&encoder_1) == false) {
 8005f1c:	e02b      	b.n	8005f76 <CHANGE_cursor+0x62>

		if (encoder_step_clockwise(&encoder_1) == true)
 8005f1e:	481d      	ldr	r0, [pc, #116]	; (8005f94 <CHANGE_cursor+0x80>)
 8005f20:	f7ff fcb8 	bl	8005894 <encoder_step_clockwise>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00e      	beq.n	8005f48 <CHANGE_cursor+0x34>
		{
			if((wf->place_value == 0)) {
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	7d9b      	ldrb	r3, [r3, #22]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d103      	bne.n	8005f3a <CHANGE_cursor+0x26>
				wf->place_value = 8;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2208      	movs	r2, #8
 8005f36:	759a      	strb	r2, [r3, #22]
 8005f38:	e01a      	b.n	8005f70 <CHANGE_cursor+0x5c>
			}
			else{
				(wf->place_value)--;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	7d9b      	ldrb	r3, [r3, #22]
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	b2da      	uxtb	r2, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	759a      	strb	r2, [r3, #22]
 8005f46:	e013      	b.n	8005f70 <CHANGE_cursor+0x5c>
			}
		}
		else if (encoder_step_counterclockwise(&encoder_1) == true)
 8005f48:	4812      	ldr	r0, [pc, #72]	; (8005f94 <CHANGE_cursor+0x80>)
 8005f4a:	f7ff fcb8 	bl	80058be <encoder_step_counterclockwise>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00d      	beq.n	8005f70 <CHANGE_cursor+0x5c>
		{
			if( (wf->place_value == 8) ) {
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	7d9b      	ldrb	r3, [r3, #22]
 8005f58:	2b08      	cmp	r3, #8
 8005f5a:	d103      	bne.n	8005f64 <CHANGE_cursor+0x50>
				wf->place_value = 0;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	759a      	strb	r2, [r3, #22]
 8005f62:	e005      	b.n	8005f70 <CHANGE_cursor+0x5c>
			}
			else {
				(wf->place_value)++;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	7d9b      	ldrb	r3, [r3, #22]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	b2da      	uxtb	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	759a      	strb	r2, [r3, #22]
			}

		}

		SHOW_cursor(wf);
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 f969 	bl	8006248 <SHOW_cursor>
	while(encoder_enter(&encoder_1) == false) {
 8005f76:	4807      	ldr	r0, [pc, #28]	; (8005f94 <CHANGE_cursor+0x80>)
 8005f78:	f7ff fcb6 	bl	80058e8 <encoder_enter>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	f083 0301 	eor.w	r3, r3, #1
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1ca      	bne.n	8005f1e <CHANGE_cursor+0xa>
	}
}
 8005f88:	bf00      	nop
 8005f8a:	bf00      	nop
 8005f8c:	3708      	adds	r7, #8
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	20001050 	.word	0x20001050

08005f98 <CHANGE_temperature>:

void CHANGE_temperature(struct waveform *wf) {
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
	UG_FillScreen( C_BLACK );
 8005fa0:	2000      	movs	r0, #0
 8005fa2:	f000 fad3 	bl	800654c <UG_FillScreen>
	SHOW_temperature(wf->frequency);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f000 f8d6 	bl	800615c <SHOW_temperature>
	SHOW_cursor(wf);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 f949 	bl	8006248 <SHOW_cursor>
	CHANGE_cursor(wf);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7ff ffac 	bl	8005f14 <CHANGE_cursor>

	if(wf->place_value != 8){
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	7d9b      	ldrb	r3, [r3, #22]
 8005fc0:	2b08      	cmp	r3, #8
 8005fc2:	d03e      	beq.n	8006042 <CHANGE_temperature+0xaa>
		while(encoder_enter(&encoder_1) == false) {
 8005fc4:	e030      	b.n	8006028 <CHANGE_temperature+0x90>

			if (encoder_step_clockwise(&encoder_1) == true)
 8005fc6:	4822      	ldr	r0, [pc, #136]	; (8006050 <CHANGE_temperature+0xb8>)
 8005fc8:	f7ff fc64 	bl	8005894 <encoder_step_clockwise>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d011      	beq.n	8005ff6 <CHANGE_temperature+0x5e>
			{
				wf->frequency = CALC_temperature(wf->frequency, 1, wf->place_value);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	7d9b      	ldrb	r3, [r3, #22]
 8005fdc:	461a      	mov	r2, r3
 8005fde:	2101      	movs	r1, #1
 8005fe0:	f000 f838 	bl	8006054 <CALC_temperature>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	611a      	str	r2, [r3, #16]
				SHOW_temperature(wf->frequency);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f000 f8b3 	bl	800615c <SHOW_temperature>
			}
			if (encoder_step_counterclockwise(&encoder_1) == true)
 8005ff6:	4816      	ldr	r0, [pc, #88]	; (8006050 <CHANGE_temperature+0xb8>)
 8005ff8:	f7ff fc61 	bl	80058be <encoder_step_counterclockwise>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d012      	beq.n	8006028 <CHANGE_temperature+0x90>
			{
				wf->frequency = CALC_temperature(wf->frequency, -1,  wf->place_value);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	4618      	mov	r0, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	7d9b      	ldrb	r3, [r3, #22]
 800600c:	461a      	mov	r2, r3
 800600e:	f04f 31ff 	mov.w	r1, #4294967295
 8006012:	f000 f81f 	bl	8006054 <CALC_temperature>
 8006016:	4603      	mov	r3, r0
 8006018:	461a      	mov	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	611a      	str	r2, [r3, #16]
				SHOW_temperature(wf->frequency);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	4618      	mov	r0, r3
 8006024:	f000 f89a 	bl	800615c <SHOW_temperature>
		while(encoder_enter(&encoder_1) == false) {
 8006028:	4809      	ldr	r0, [pc, #36]	; (8006050 <CHANGE_temperature+0xb8>)
 800602a:	f7ff fc5d 	bl	80058e8 <encoder_enter>
 800602e:	4603      	mov	r3, r0
 8006030:	f083 0301 	eor.w	r3, r3, #1
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1c5      	bne.n	8005fc6 <CHANGE_temperature+0x2e>
			}
		}
		CHANGE_temperature(wf);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7ff ffac 	bl	8005f98 <CHANGE_temperature>

		SET_wave_ARR(wf);
	}


}
 8006040:	e002      	b.n	8006048 <CHANGE_temperature+0xb0>
		SET_wave_ARR(wf);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f7ff fefc 	bl	8005e40 <SET_wave_ARR>
}
 8006048:	bf00      	nop
 800604a:	3708      	adds	r7, #8
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	20001050 	.word	0x20001050

08006054 <CALC_temperature>:
//					sprintf(buff, "offset    %d", offset-25);
//					ST7735_PutStr5x7(2, 1, 110,"             ", COLOR565_WHITE, COLOR565_DARK_BLUE);
//					ST7735_PutStr5x7(2, 1, 110,buff, COLOR565_WHITE, COLOR565_DARK_BLUE);
//}

int32_t CALC_temperature(int32_t freq_in, int8_t direction, uint8_t dec) {
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	460b      	mov	r3, r1
 800605e:	70fb      	strb	r3, [r7, #3]
 8006060:	4613      	mov	r3, r2
 8006062:	70bb      	strb	r3, [r7, #2]
	int32_t freq_out = 0;
 8006064:	2300      	movs	r3, #0
 8006066:	60fb      	str	r3, [r7, #12]

	switch (dec)
 8006068:	78bb      	ldrb	r3, [r7, #2]
 800606a:	2b07      	cmp	r3, #7
 800606c:	d85b      	bhi.n	8006126 <CALC_temperature+0xd2>
 800606e:	a201      	add	r2, pc, #4	; (adr r2, 8006074 <CALC_temperature+0x20>)
 8006070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006074:	08006095 	.word	0x08006095
 8006078:	080060a1 	.word	0x080060a1
 800607c:	080060b7 	.word	0x080060b7
 8006080:	080060c9 	.word	0x080060c9
 8006084:	080060dd 	.word	0x080060dd
 8006088:	080060f1 	.word	0x080060f1
 800608c:	08006103 	.word	0x08006103
 8006090:	08006115 	.word	0x08006115
	{
	case 0:
		freq_out = freq_in + (direction * 1);
 8006094:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	4413      	add	r3, r2
 800609c:	60fb      	str	r3, [r7, #12]
		break;
 800609e:	e043      	b.n	8006128 <CALC_temperature+0xd4>
	case 1:
		freq_out = freq_in + (direction * 10);
 80060a0:	f997 2003 	ldrsb.w	r2, [r7, #3]
 80060a4:	4613      	mov	r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	4413      	add	r3, r2
 80060aa:	005b      	lsls	r3, r3, #1
 80060ac:	461a      	mov	r2, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4413      	add	r3, r2
 80060b2:	60fb      	str	r3, [r7, #12]
		break;
 80060b4:	e038      	b.n	8006128 <CALC_temperature+0xd4>
	case 2:
		freq_out = freq_in + (direction * 100);
 80060b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060ba:	2264      	movs	r2, #100	; 0x64
 80060bc:	fb02 f303 	mul.w	r3, r2, r3
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	4413      	add	r3, r2
 80060c4:	60fb      	str	r3, [r7, #12]
		break;
 80060c6:	e02f      	b.n	8006128 <CALC_temperature+0xd4>
	case 3:
		freq_out = freq_in + (direction * 1000);
 80060c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80060d0:	fb02 f303 	mul.w	r3, r2, r3
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	4413      	add	r3, r2
 80060d8:	60fb      	str	r3, [r7, #12]
		break;
 80060da:	e025      	b.n	8006128 <CALC_temperature+0xd4>
	case 4:
		freq_out = freq_in + (direction * 10000);
 80060dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060e0:	f242 7210 	movw	r2, #10000	; 0x2710
 80060e4:	fb02 f303 	mul.w	r3, r2, r3
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	4413      	add	r3, r2
 80060ec:	60fb      	str	r3, [r7, #12]
		break;
 80060ee:	e01b      	b.n	8006128 <CALC_temperature+0xd4>
	case 5:
		freq_out = freq_in + (direction * 100000);
 80060f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060f4:	4a15      	ldr	r2, [pc, #84]	; (800614c <CALC_temperature+0xf8>)
 80060f6:	fb02 f303 	mul.w	r3, r2, r3
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	4413      	add	r3, r2
 80060fe:	60fb      	str	r3, [r7, #12]
		break;
 8006100:	e012      	b.n	8006128 <CALC_temperature+0xd4>
	case 6:
		freq_out = freq_in + (direction * 1000000);
 8006102:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006106:	4a12      	ldr	r2, [pc, #72]	; (8006150 <CALC_temperature+0xfc>)
 8006108:	fb02 f303 	mul.w	r3, r2, r3
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	4413      	add	r3, r2
 8006110:	60fb      	str	r3, [r7, #12]
		break;
 8006112:	e009      	b.n	8006128 <CALC_temperature+0xd4>
	case 7:
		freq_out = freq_in + (direction * 10000000);
 8006114:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006118:	4a0e      	ldr	r2, [pc, #56]	; (8006154 <CALC_temperature+0x100>)
 800611a:	fb02 f303 	mul.w	r3, r2, r3
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	4413      	add	r3, r2
 8006122:	60fb      	str	r3, [r7, #12]
		break;
 8006124:	e000      	b.n	8006128 <CALC_temperature+0xd4>
	default:
		break;
 8006126:	bf00      	nop
	}
	if (freq_out < 0) freq_out = 0;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2b00      	cmp	r3, #0
 800612c:	da01      	bge.n	8006132 <CALC_temperature+0xde>
 800612e:	2300      	movs	r3, #0
 8006130:	60fb      	str	r3, [r7, #12]
	if (freq_out > 99999999) freq_out = 99999999;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	4a08      	ldr	r2, [pc, #32]	; (8006158 <CALC_temperature+0x104>)
 8006136:	4293      	cmp	r3, r2
 8006138:	dd01      	ble.n	800613e <CALC_temperature+0xea>
 800613a:	4b07      	ldr	r3, [pc, #28]	; (8006158 <CALC_temperature+0x104>)
 800613c:	60fb      	str	r3, [r7, #12]
	return freq_out;
 800613e:	68fb      	ldr	r3, [r7, #12]
}
 8006140:	4618      	mov	r0, r3
 8006142:	3714      	adds	r7, #20
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr
 800614c:	000186a0 	.word	0x000186a0
 8006150:	000f4240 	.word	0x000f4240
 8006154:	00989680 	.word	0x00989680
 8006158:	05f5e0ff 	.word	0x05f5e0ff

0800615c <SHOW_temperature>:

void SHOW_temperature(uint32_t freq) {
 800615c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800615e:	b091      	sub	sp, #68	; 0x44
 8006160:	af06      	add	r7, sp, #24
 8006162:	6078      	str	r0, [r7, #4]
	char buffer[20];
	uint8_t cijfer[8];

	if (freq <= 99999999)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a33      	ldr	r2, [pc, #204]	; (8006234 <SHOW_temperature+0xd8>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d85a      	bhi.n	8006222 <SHOW_temperature+0xc6>
	{
		for (uint8_t i = 0; i < 8; i++)
 800616c:	2300      	movs	r3, #0
 800616e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006172:	e01e      	b.n	80061b2 <SHOW_temperature+0x56>
		{
			cijfer[i] = (uint8_t) (freq % 10) + 48;
 8006174:	6879      	ldr	r1, [r7, #4]
 8006176:	4b30      	ldr	r3, [pc, #192]	; (8006238 <SHOW_temperature+0xdc>)
 8006178:	fba3 2301 	umull	r2, r3, r3, r1
 800617c:	08da      	lsrs	r2, r3, #3
 800617e:	4613      	mov	r3, r2
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	4413      	add	r3, r2
 8006184:	005b      	lsls	r3, r3, #1
 8006186:	1aca      	subs	r2, r1, r3
 8006188:	b2d2      	uxtb	r2, r2
 800618a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800618e:	3230      	adds	r2, #48	; 0x30
 8006190:	b2d2      	uxtb	r2, r2
 8006192:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006196:	440b      	add	r3, r1
 8006198:	f803 2c20 	strb.w	r2, [r3, #-32]
			freq /= 10;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a26      	ldr	r2, [pc, #152]	; (8006238 <SHOW_temperature+0xdc>)
 80061a0:	fba2 2303 	umull	r2, r3, r2, r3
 80061a4:	08db      	lsrs	r3, r3, #3
 80061a6:	607b      	str	r3, [r7, #4]
		for (uint8_t i = 0; i < 8; i++)
 80061a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061ac:	3301      	adds	r3, #1
 80061ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80061b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061b6:	2b07      	cmp	r3, #7
 80061b8:	d9dc      	bls.n	8006174 <SHOW_temperature+0x18>
		}
		sprintf(buffer, "%c%c%c %c%c%c.%c%c Hz", cijfer[7], cijfer[6], cijfer[5], cijfer[4], cijfer[3], cijfer[2], cijfer[1], cijfer[0]);
 80061ba:	7bfb      	ldrb	r3, [r7, #15]
 80061bc:	469c      	mov	ip, r3
 80061be:	7bbb      	ldrb	r3, [r7, #14]
 80061c0:	469e      	mov	lr, r3
 80061c2:	7b7b      	ldrb	r3, [r7, #13]
 80061c4:	7b3a      	ldrb	r2, [r7, #12]
 80061c6:	7af9      	ldrb	r1, [r7, #11]
 80061c8:	7ab8      	ldrb	r0, [r7, #10]
 80061ca:	4604      	mov	r4, r0
 80061cc:	7a78      	ldrb	r0, [r7, #9]
 80061ce:	4605      	mov	r5, r0
 80061d0:	7a38      	ldrb	r0, [r7, #8]
 80061d2:	4606      	mov	r6, r0
 80061d4:	f107 0010 	add.w	r0, r7, #16
 80061d8:	9605      	str	r6, [sp, #20]
 80061da:	9504      	str	r5, [sp, #16]
 80061dc:	9403      	str	r4, [sp, #12]
 80061de:	9102      	str	r1, [sp, #8]
 80061e0:	9201      	str	r2, [sp, #4]
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	4673      	mov	r3, lr
 80061e6:	4662      	mov	r2, ip
 80061e8:	4914      	ldr	r1, [pc, #80]	; (800623c <SHOW_temperature+0xe0>)
 80061ea:	f000 fc15 	bl	8006a18 <siprintf>
		UG_FillFrame(0, 10+(0*10), UG_GetXDim(), (gui1.font.char_height)+(10+(0*10)), C_BLACK);
 80061ee:	f000 fbd3 	bl	8006998 <UG_GetXDim>
 80061f2:	4603      	mov	r3, r0
 80061f4:	4619      	mov	r1, r3
 80061f6:	4b12      	ldr	r3, [pc, #72]	; (8006240 <SHOW_temperature+0xe4>)
 80061f8:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	330a      	adds	r3, #10
 8006200:	b29b      	uxth	r3, r3
 8006202:	b21b      	sxth	r3, r3
 8006204:	2200      	movs	r2, #0
 8006206:	9200      	str	r2, [sp, #0]
 8006208:	460a      	mov	r2, r1
 800620a:	210a      	movs	r1, #10
 800620c:	2000      	movs	r0, #0
 800620e:	f000 f9bf 	bl	8006590 <UG_FillFrame>
		UG_PutString(2, 10+(0*10), buffer );
 8006212:	f107 0310 	add.w	r3, r7, #16
 8006216:	461a      	mov	r2, r3
 8006218:	210a      	movs	r1, #10
 800621a:	2002      	movs	r0, #2
 800621c:	f000 fa28 	bl	8006670 <UG_PutString>
	else {
		UG_PutString( 2, 50, "   Error");

	}

}
 8006220:	e004      	b.n	800622c <SHOW_temperature+0xd0>
		UG_PutString( 2, 50, "   Error");
 8006222:	4a08      	ldr	r2, [pc, #32]	; (8006244 <SHOW_temperature+0xe8>)
 8006224:	2132      	movs	r1, #50	; 0x32
 8006226:	2002      	movs	r0, #2
 8006228:	f000 fa22 	bl	8006670 <UG_PutString>
}
 800622c:	bf00      	nop
 800622e:	372c      	adds	r7, #44	; 0x2c
 8006230:	46bd      	mov	sp, r7
 8006232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006234:	05f5e0ff 	.word	0x05f5e0ff
 8006238:	cccccccd 	.word	0xcccccccd
 800623c:	0800830c 	.word	0x0800830c
 8006240:	200001dc 	.word	0x200001dc
 8006244:	08008324 	.word	0x08008324

08006248 <SHOW_cursor>:

void SHOW_cursor(struct waveform *wf) {
 8006248:	b580      	push	{r7, lr}
 800624a:	b086      	sub	sp, #24
 800624c:	af02      	add	r7, sp, #8
 800624e:	6078      	str	r0, [r7, #4]
	uint8_t cursor_position = 0;
 8006250:	2300      	movs	r3, #0
 8006252:	73fb      	strb	r3, [r7, #15]

	switch (wf->place_value)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	7d9b      	ldrb	r3, [r3, #22]
 8006258:	2b08      	cmp	r3, #8
 800625a:	f200 8091 	bhi.w	8006380 <SHOW_cursor+0x138>
 800625e:	a201      	add	r2, pc, #4	; (adr r2, 8006264 <SHOW_cursor+0x1c>)
 8006260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006264:	08006289 	.word	0x08006289
 8006268:	080062ab 	.word	0x080062ab
 800626c:	080062c9 	.word	0x080062c9
 8006270:	080062ed 	.word	0x080062ed
 8006274:	0800630f 	.word	0x0800630f
 8006278:	0800632d 	.word	0x0800632d
 800627c:	0800634b 	.word	0x0800634b
 8006280:	08006365 	.word	0x08006365
 8006284:	08006373 	.word	0x08006373
	{
	case 0:
		cursor_position = 2+(9*gui1.font.char_width+gui1.font.char_h_space);
 8006288:	4b5b      	ldr	r3, [pc, #364]	; (80063f8 <SHOW_cursor+0x1b0>)
 800628a:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800628e:	b2db      	uxtb	r3, r3
 8006290:	461a      	mov	r2, r3
 8006292:	00d2      	lsls	r2, r2, #3
 8006294:	4413      	add	r3, r2
 8006296:	b2da      	uxtb	r2, r3
 8006298:	4b57      	ldr	r3, [pc, #348]	; (80063f8 <SHOW_cursor+0x1b0>)
 800629a:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	4413      	add	r3, r2
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	3302      	adds	r3, #2
 80062a6:	73fb      	strb	r3, [r7, #15]
		break;
 80062a8:	e06b      	b.n	8006382 <SHOW_cursor+0x13a>
	case 1:
		cursor_position = 2+(8*gui1.font.char_width+gui1.font.char_h_space);
 80062aa:	4b53      	ldr	r3, [pc, #332]	; (80063f8 <SHOW_cursor+0x1b0>)
 80062ac:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	00db      	lsls	r3, r3, #3
 80062b4:	b2da      	uxtb	r2, r3
 80062b6:	4b50      	ldr	r3, [pc, #320]	; (80063f8 <SHOW_cursor+0x1b0>)
 80062b8:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	4413      	add	r3, r2
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	3302      	adds	r3, #2
 80062c4:	73fb      	strb	r3, [r7, #15]
		break;
 80062c6:	e05c      	b.n	8006382 <SHOW_cursor+0x13a>
	case 2:
		cursor_position = 2+(6*gui1.font.char_width+gui1.font.char_h_space);
 80062c8:	4b4b      	ldr	r3, [pc, #300]	; (80063f8 <SHOW_cursor+0x1b0>)
 80062ca:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	461a      	mov	r2, r3
 80062d2:	0052      	lsls	r2, r2, #1
 80062d4:	4413      	add	r3, r2
 80062d6:	005b      	lsls	r3, r3, #1
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	4b47      	ldr	r3, [pc, #284]	; (80063f8 <SHOW_cursor+0x1b0>)
 80062dc:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	4413      	add	r3, r2
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	3302      	adds	r3, #2
 80062e8:	73fb      	strb	r3, [r7, #15]
		break;
 80062ea:	e04a      	b.n	8006382 <SHOW_cursor+0x13a>
	case 3:
		cursor_position = 2+(5*gui1.font.char_width+gui1.font.char_h_space);
 80062ec:	4b42      	ldr	r3, [pc, #264]	; (80063f8 <SHOW_cursor+0x1b0>)
 80062ee:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	461a      	mov	r2, r3
 80062f6:	0092      	lsls	r2, r2, #2
 80062f8:	4413      	add	r3, r2
 80062fa:	b2da      	uxtb	r2, r3
 80062fc:	4b3e      	ldr	r3, [pc, #248]	; (80063f8 <SHOW_cursor+0x1b0>)
 80062fe:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8006302:	b2db      	uxtb	r3, r3
 8006304:	4413      	add	r3, r2
 8006306:	b2db      	uxtb	r3, r3
 8006308:	3302      	adds	r3, #2
 800630a:	73fb      	strb	r3, [r7, #15]
		break;
 800630c:	e039      	b.n	8006382 <SHOW_cursor+0x13a>
	case 4:
		cursor_position = 2+(4*gui1.font.char_width+gui1.font.char_h_space);
 800630e:	4b3a      	ldr	r3, [pc, #232]	; (80063f8 <SHOW_cursor+0x1b0>)
 8006310:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8006314:	b2db      	uxtb	r3, r3
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	b2da      	uxtb	r2, r3
 800631a:	4b37      	ldr	r3, [pc, #220]	; (80063f8 <SHOW_cursor+0x1b0>)
 800631c:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8006320:	b2db      	uxtb	r3, r3
 8006322:	4413      	add	r3, r2
 8006324:	b2db      	uxtb	r3, r3
 8006326:	3302      	adds	r3, #2
 8006328:	73fb      	strb	r3, [r7, #15]
		break;
 800632a:	e02a      	b.n	8006382 <SHOW_cursor+0x13a>
	case 5:
		cursor_position = 2+(2*gui1.font.char_width+gui1.font.char_h_space);
 800632c:	4b32      	ldr	r3, [pc, #200]	; (80063f8 <SHOW_cursor+0x1b0>)
 800632e:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8006332:	b2db      	uxtb	r3, r3
 8006334:	005b      	lsls	r3, r3, #1
 8006336:	b2da      	uxtb	r2, r3
 8006338:	4b2f      	ldr	r3, [pc, #188]	; (80063f8 <SHOW_cursor+0x1b0>)
 800633a:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800633e:	b2db      	uxtb	r3, r3
 8006340:	4413      	add	r3, r2
 8006342:	b2db      	uxtb	r3, r3
 8006344:	3302      	adds	r3, #2
 8006346:	73fb      	strb	r3, [r7, #15]
		break;
 8006348:	e01b      	b.n	8006382 <SHOW_cursor+0x13a>
	case 6:
		cursor_position = 2+(1*gui1.font.char_width+gui1.font.char_h_space);
 800634a:	4b2b      	ldr	r3, [pc, #172]	; (80063f8 <SHOW_cursor+0x1b0>)
 800634c:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8006350:	b2da      	uxtb	r2, r3
 8006352:	4b29      	ldr	r3, [pc, #164]	; (80063f8 <SHOW_cursor+0x1b0>)
 8006354:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8006358:	b2db      	uxtb	r3, r3
 800635a:	4413      	add	r3, r2
 800635c:	b2db      	uxtb	r3, r3
 800635e:	3302      	adds	r3, #2
 8006360:	73fb      	strb	r3, [r7, #15]
		break;
 8006362:	e00e      	b.n	8006382 <SHOW_cursor+0x13a>
	case 7:
		cursor_position = 2+(0*gui1.font.char_width+gui1.font.char_h_space);
 8006364:	4b24      	ldr	r3, [pc, #144]	; (80063f8 <SHOW_cursor+0x1b0>)
 8006366:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800636a:	b2db      	uxtb	r3, r3
 800636c:	3302      	adds	r3, #2
 800636e:	73fb      	strb	r3, [r7, #15]
		break;
 8006370:	e007      	b.n	8006382 <SHOW_cursor+0x13a>
	case 8:
		cursor_position = 2+(0*gui1.font.char_width+gui1.font.char_h_space);
 8006372:	4b21      	ldr	r3, [pc, #132]	; (80063f8 <SHOW_cursor+0x1b0>)
 8006374:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8006378:	b2db      	uxtb	r3, r3
 800637a:	3302      	adds	r3, #2
 800637c:	73fb      	strb	r3, [r7, #15]
		break;
 800637e:	e000      	b.n	8006382 <SHOW_cursor+0x13a>
	default:
		break;
 8006380:	bf00      	nop
	}

	if(wf->place_value != wf->previous_place_value) {
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	7d9a      	ldrb	r2, [r3, #22]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	7ddb      	ldrb	r3, [r3, #23]
 800638a:	429a      	cmp	r2, r3
 800638c:	d01d      	beq.n	80063ca <SHOW_cursor+0x182>
		UG_FillFrame(0, 10+(1*10), UG_GetXDim(), (gui1.font.char_height)+(10+(1*10)), C_BLACK);
 800638e:	f000 fb03 	bl	8006998 <UG_GetXDim>
 8006392:	4603      	mov	r3, r0
 8006394:	4619      	mov	r1, r3
 8006396:	4b18      	ldr	r3, [pc, #96]	; (80063f8 <SHOW_cursor+0x1b0>)
 8006398:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800639c:	b29b      	uxth	r3, r3
 800639e:	3314      	adds	r3, #20
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	b21b      	sxth	r3, r3
 80063a4:	2200      	movs	r2, #0
 80063a6:	9200      	str	r2, [sp, #0]
 80063a8:	460a      	mov	r2, r1
 80063aa:	2114      	movs	r1, #20
 80063ac:	2000      	movs	r0, #0
 80063ae:	f000 f8ef 	bl	8006590 <UG_FillFrame>
		UG_PutString( cursor_position, 10+(1*10), "^" );
 80063b2:	7bfb      	ldrb	r3, [r7, #15]
 80063b4:	b21b      	sxth	r3, r3
 80063b6:	4a11      	ldr	r2, [pc, #68]	; (80063fc <SHOW_cursor+0x1b4>)
 80063b8:	2114      	movs	r1, #20
 80063ba:	4618      	mov	r0, r3
 80063bc:	f000 f958 	bl	8006670 <UG_PutString>
		wf->previous_place_value = wf->place_value;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	7d9a      	ldrb	r2, [r3, #22]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	75da      	strb	r2, [r3, #23]
	}
	else {
		UG_PutString( cursor_position, 10+(1*10), "^" );
	}

}
 80063c8:	e012      	b.n	80063f0 <SHOW_cursor+0x1a8>
	else if(wf->place_value == 8) {
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	7d9b      	ldrb	r3, [r3, #22]
 80063ce:	2b08      	cmp	r3, #8
 80063d0:	d107      	bne.n	80063e2 <SHOW_cursor+0x19a>
		UG_PutString( cursor_position, 10+(1*10), "<Back>" );
 80063d2:	7bfb      	ldrb	r3, [r7, #15]
 80063d4:	b21b      	sxth	r3, r3
 80063d6:	4a0a      	ldr	r2, [pc, #40]	; (8006400 <SHOW_cursor+0x1b8>)
 80063d8:	2114      	movs	r1, #20
 80063da:	4618      	mov	r0, r3
 80063dc:	f000 f948 	bl	8006670 <UG_PutString>
}
 80063e0:	e006      	b.n	80063f0 <SHOW_cursor+0x1a8>
		UG_PutString( cursor_position, 10+(1*10), "^" );
 80063e2:	7bfb      	ldrb	r3, [r7, #15]
 80063e4:	b21b      	sxth	r3, r3
 80063e6:	4a05      	ldr	r2, [pc, #20]	; (80063fc <SHOW_cursor+0x1b4>)
 80063e8:	2114      	movs	r1, #20
 80063ea:	4618      	mov	r0, r3
 80063ec:	f000 f940 	bl	8006670 <UG_PutString>
}
 80063f0:	bf00      	nop
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	200001dc 	.word	0x200001dc
 80063fc:	08008330 	.word	0x08008330
 8006400:	08008334 	.word	0x08008334

08006404 <UG_Init>:
#endif



UG_S16 UG_Init( UG_GUI* g, void (*p)(UG_S16,UG_S16,UG_COLOR), UG_S16 x, UG_S16 y )
{
 8006404:	b480      	push	{r7}
 8006406:	b087      	sub	sp, #28
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	4611      	mov	r1, r2
 8006410:	461a      	mov	r2, r3
 8006412:	460b      	mov	r3, r1
 8006414:	80fb      	strh	r3, [r7, #6]
 8006416:	4613      	mov	r3, r2
 8006418:	80bb      	strh	r3, [r7, #4]
   UG_U8 i;

   g->pset = (void(*)(UG_S16,UG_S16,UG_COLOR))p;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	68ba      	ldr	r2, [r7, #8]
 800641e:	601a      	str	r2, [r3, #0]
   g->x_dim = x;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	88fa      	ldrh	r2, [r7, #6]
 8006424:	809a      	strh	r2, [r3, #4]
   g->y_dim = y;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	88ba      	ldrh	r2, [r7, #4]
 800642a:	80da      	strh	r2, [r3, #6]
   g->console.x_start = 4;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2204      	movs	r2, #4
 8006430:	841a      	strh	r2, [r3, #32]
   g->console.y_start = 4;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2204      	movs	r2, #4
 8006436:	845a      	strh	r2, [r3, #34]	; 0x22
   g->console.x_end = g->x_dim - g->console.x_start-1;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800643e:	b29a      	uxth	r2, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8006446:	b29b      	uxth	r3, r3
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	b29b      	uxth	r3, r3
 800644c:	3b01      	subs	r3, #1
 800644e:	b29b      	uxth	r3, r3
 8006450:	b21a      	sxth	r2, r3
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	849a      	strh	r2, [r3, #36]	; 0x24
   g->console.y_end = g->y_dim - g->console.x_start-1;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800645c:	b29a      	uxth	r2, r3
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8006464:	b29b      	uxth	r3, r3
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	b29b      	uxth	r3, r3
 800646a:	3b01      	subs	r3, #1
 800646c:	b29b      	uxth	r3, r3
 800646e:	b21a      	sxth	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	84da      	strh	r2, [r3, #38]	; 0x26
   g->console.x_pos = g->console.x_end;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	839a      	strh	r2, [r3, #28]
   g->console.y_pos = g->console.y_end;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	83da      	strh	r2, [r3, #30]
   g->font.char_h_space = 1;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
   g->font.char_v_space = 1;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   g->font.p = NULL;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	631a      	str	r2, [r3, #48]	; 0x30
   g->desktop_color = C_DARK_GRAY;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	4a19      	ldr	r2, [pc, #100]	; (8006508 <UG_Init+0x104>)
 80064a2:	645a      	str	r2, [r3, #68]	; 0x44
   g->fore_color = C_WHITE;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80064aa:	63da      	str	r2, [r3, #60]	; 0x3c
   g->back_color = C_BLACK;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	641a      	str	r2, [r3, #64]	; 0x40
   g->next_window = NULL;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	611a      	str	r2, [r3, #16]
   g->active_window = NULL;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	615a      	str	r2, [r3, #20]
   g->last_window = NULL;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	619a      	str	r2, [r3, #24]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 80064c4:	2300      	movs	r3, #0
 80064c6:	75fb      	strb	r3, [r7, #23]
 80064c8:	e010      	b.n	80064ec <UG_Init+0xe8>
   {
      g->driver[i].driver = NULL;
 80064ca:	7dfb      	ldrb	r3, [r7, #23]
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	3309      	adds	r3, #9
 80064d0:	00db      	lsls	r3, r3, #3
 80064d2:	4413      	add	r3, r2
 80064d4:	2200      	movs	r2, #0
 80064d6:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 80064d8:	7dfb      	ldrb	r3, [r7, #23]
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	3309      	adds	r3, #9
 80064de:	00db      	lsls	r3, r3, #3
 80064e0:	4413      	add	r3, r2
 80064e2:	2200      	movs	r2, #0
 80064e4:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 80064e6:	7dfb      	ldrb	r3, [r7, #23]
 80064e8:	3301      	adds	r3, #1
 80064ea:	75fb      	strb	r3, [r7, #23]
 80064ec:	7dfb      	ldrb	r3, [r7, #23]
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d9eb      	bls.n	80064ca <UG_Init+0xc6>
   }
   // assignment of gui structrue passed to the function to the pointer gui, declared at the top of ugui.c
   gui = g;
 80064f2:	4a06      	ldr	r2, [pc, #24]	; (800650c <UG_Init+0x108>)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6013      	str	r3, [r2, #0]
   return 1;
 80064f8:	2301      	movs	r3, #1
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	371c      	adds	r7, #28
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	00a9a9a9 	.word	0x00a9a9a9
 800650c:	200000fc 	.word	0x200000fc

08006510 <UG_FontSelect>:
   gui = g;
   return 1;
}

void UG_FontSelect( const UG_FONT* font )
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
   gui->font.p = font->p;
 8006518:	4b0b      	ldr	r3, [pc, #44]	; (8006548 <UG_FontSelect+0x38>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	6812      	ldr	r2, [r2, #0]
 8006520:	631a      	str	r2, [r3, #48]	; 0x30
   gui->font.char_width = font->char_width;
 8006522:	4b09      	ldr	r3, [pc, #36]	; (8006548 <UG_FontSelect+0x38>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800652c:	869a      	strh	r2, [r3, #52]	; 0x34
   gui->font.char_height = font->char_height;
 800652e:	4b06      	ldr	r3, [pc, #24]	; (8006548 <UG_FontSelect+0x38>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8006538:	86da      	strh	r2, [r3, #54]	; 0x36
}
 800653a:	bf00      	nop
 800653c:	370c      	adds	r7, #12
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	200000fc 	.word	0x200000fc

0800654c <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af02      	add	r7, sp, #8
 8006552:	6078      	str	r0, [r7, #4]
   UG_FillFrame(0,0,gui->x_dim-1,gui->y_dim-1,c);
 8006554:	4b0d      	ldr	r3, [pc, #52]	; (800658c <UG_FillScreen+0x40>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800655c:	b29b      	uxth	r3, r3
 800655e:	3b01      	subs	r3, #1
 8006560:	b29b      	uxth	r3, r3
 8006562:	b21a      	sxth	r2, r3
 8006564:	4b09      	ldr	r3, [pc, #36]	; (800658c <UG_FillScreen+0x40>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800656c:	b29b      	uxth	r3, r3
 800656e:	3b01      	subs	r3, #1
 8006570:	b29b      	uxth	r3, r3
 8006572:	b219      	sxth	r1, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	9300      	str	r3, [sp, #0]
 8006578:	460b      	mov	r3, r1
 800657a:	2100      	movs	r1, #0
 800657c:	2000      	movs	r0, #0
 800657e:	f000 f807 	bl	8006590 <UG_FillFrame>
}
 8006582:	bf00      	nop
 8006584:	3708      	adds	r7, #8
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	200000fc 	.word	0x200000fc

08006590 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8006590:	b5b0      	push	{r4, r5, r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af02      	add	r7, sp, #8
 8006596:	4604      	mov	r4, r0
 8006598:	4608      	mov	r0, r1
 800659a:	4611      	mov	r1, r2
 800659c:	461a      	mov	r2, r3
 800659e:	4623      	mov	r3, r4
 80065a0:	80fb      	strh	r3, [r7, #6]
 80065a2:	4603      	mov	r3, r0
 80065a4:	80bb      	strh	r3, [r7, #4]
 80065a6:	460b      	mov	r3, r1
 80065a8:	807b      	strh	r3, [r7, #2]
 80065aa:	4613      	mov	r3, r2
 80065ac:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 80065ae:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80065b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	da05      	bge.n	80065c6 <UG_FillFrame+0x36>
   {
      n = x2;
 80065ba:	887b      	ldrh	r3, [r7, #2]
 80065bc:	81fb      	strh	r3, [r7, #14]
      x2 = x1;
 80065be:	88fb      	ldrh	r3, [r7, #6]
 80065c0:	807b      	strh	r3, [r7, #2]
      x1 = n;
 80065c2:	89fb      	ldrh	r3, [r7, #14]
 80065c4:	80fb      	strh	r3, [r7, #6]
   }
   if ( y2 < y1 )
 80065c6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80065ca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	da05      	bge.n	80065de <UG_FillFrame+0x4e>
   {
      n = y2;
 80065d2:	883b      	ldrh	r3, [r7, #0]
 80065d4:	81fb      	strh	r3, [r7, #14]
      y2 = y1;
 80065d6:	88bb      	ldrh	r3, [r7, #4]
 80065d8:	803b      	strh	r3, [r7, #0]
      y1 = n;
 80065da:	89fb      	ldrh	r3, [r7, #14]
 80065dc:	80bb      	strh	r3, [r7, #4]
   }

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 80065de:	4b23      	ldr	r3, [pc, #140]	; (800666c <UG_FillFrame+0xdc>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80065e6:	f003 0302 	and.w	r3, r3, #2
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d012      	beq.n	8006614 <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 80065ee:	4b1f      	ldr	r3, [pc, #124]	; (800666c <UG_FillFrame+0xdc>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f4:	461d      	mov	r5, r3
 80065f6:	f9b7 4000 	ldrsh.w	r4, [r7]
 80065fa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80065fe:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006602:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006606:	6a3b      	ldr	r3, [r7, #32]
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	4623      	mov	r3, r4
 800660c:	47a8      	blx	r5
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d027      	beq.n	8006664 <UG_FillFrame+0xd4>
   }

   for( m=y1; m<=y2; m++ )
 8006614:	88bb      	ldrh	r3, [r7, #4]
 8006616:	81bb      	strh	r3, [r7, #12]
 8006618:	e01d      	b.n	8006656 <UG_FillFrame+0xc6>
   {
      for( n=x1; n<=x2; n++ )
 800661a:	88fb      	ldrh	r3, [r7, #6]
 800661c:	81fb      	strh	r3, [r7, #14]
 800661e:	e00e      	b.n	800663e <UG_FillFrame+0xae>
      {
         gui->pset(n,m,c);
 8006620:	4b12      	ldr	r3, [pc, #72]	; (800666c <UG_FillFrame+0xdc>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800662a:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800662e:	6a3a      	ldr	r2, [r7, #32]
 8006630:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 8006632:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006636:	b29b      	uxth	r3, r3
 8006638:	3301      	adds	r3, #1
 800663a:	b29b      	uxth	r3, r3
 800663c:	81fb      	strh	r3, [r7, #14]
 800663e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006642:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006646:	429a      	cmp	r2, r3
 8006648:	ddea      	ble.n	8006620 <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 800664a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800664e:	b29b      	uxth	r3, r3
 8006650:	3301      	adds	r3, #1
 8006652:	b29b      	uxth	r3, r3
 8006654:	81bb      	strh	r3, [r7, #12]
 8006656:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800665a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800665e:	429a      	cmp	r2, r3
 8006660:	dddb      	ble.n	800661a <UG_FillFrame+0x8a>
 8006662:	e000      	b.n	8006666 <UG_FillFrame+0xd6>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8006664:	bf00      	nop
      }
   }
}
 8006666:	3710      	adds	r7, #16
 8006668:	46bd      	mov	sp, r7
 800666a:	bdb0      	pop	{r4, r5, r7, pc}
 800666c:	200000fc 	.word	0x200000fc

08006670 <UG_PutString>:
      }
   }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 8006670:	b590      	push	{r4, r7, lr}
 8006672:	b087      	sub	sp, #28
 8006674:	af02      	add	r7, sp, #8
 8006676:	4603      	mov	r3, r0
 8006678:	603a      	str	r2, [r7, #0]
 800667a:	80fb      	strh	r3, [r7, #6]
 800667c:	460b      	mov	r3, r1
 800667e:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp;
   char chr;

   xp=x;
 8006680:	88fb      	ldrh	r3, [r7, #6]
 8006682:	81fb      	strh	r3, [r7, #14]
   yp=y;
 8006684:	88bb      	ldrh	r3, [r7, #4]
 8006686:	81bb      	strh	r3, [r7, #12]

   while ( *str != 0 )
 8006688:	e04f      	b.n	800672a <UG_PutString+0xba>
   {
      chr = *str;
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	72fb      	strb	r3, [r7, #11]
      if ( chr == '\n' )
 8006690:	7afb      	ldrb	r3, [r7, #11]
 8006692:	2b0a      	cmp	r3, #10
 8006694:	d107      	bne.n	80066a6 <UG_PutString+0x36>
      {
         xp = gui->x_dim;
 8006696:	4b29      	ldr	r3, [pc, #164]	; (800673c <UG_PutString+0xcc>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	889b      	ldrh	r3, [r3, #4]
 800669c:	81fb      	strh	r3, [r7, #14]
         str++;
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	3301      	adds	r3, #1
 80066a2:	603b      	str	r3, [r7, #0]
         continue;
 80066a4:	e041      	b.n	800672a <UG_PutString+0xba>
      }

      if ( xp+gui->font.char_width > gui->x_dim - 1 )
 80066a6:	4b25      	ldr	r3, [pc, #148]	; (800673c <UG_PutString+0xcc>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80066ae:	4619      	mov	r1, r3
 80066b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80066b4:	4a21      	ldr	r2, [pc, #132]	; (800673c <UG_PutString+0xcc>)
 80066b6:	6812      	ldr	r2, [r2, #0]
 80066b8:	f9b2 2034 	ldrsh.w	r2, [r2, #52]	; 0x34
 80066bc:	4413      	add	r3, r2
 80066be:	4299      	cmp	r1, r3
 80066c0:	dc11      	bgt.n	80066e6 <UG_PutString+0x76>
      {
         xp = x;
 80066c2:	88fb      	ldrh	r3, [r7, #6]
 80066c4:	81fb      	strh	r3, [r7, #14]
         yp += gui->font.char_height+gui->font.char_v_space;
 80066c6:	4b1d      	ldr	r3, [pc, #116]	; (800673c <UG_PutString+0xcc>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	4b1a      	ldr	r3, [pc, #104]	; (800673c <UG_PutString+0xcc>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80066d8:	b29b      	uxth	r3, r3
 80066da:	4413      	add	r3, r2
 80066dc:	b29a      	uxth	r2, r3
 80066de:	89bb      	ldrh	r3, [r7, #12]
 80066e0:	4413      	add	r3, r2
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	81bb      	strh	r3, [r7, #12]
      }

      UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 80066e6:	4b15      	ldr	r3, [pc, #84]	; (800673c <UG_PutString+0xcc>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80066ec:	4b13      	ldr	r3, [pc, #76]	; (800673c <UG_PutString+0xcc>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80066f6:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80066fa:	7af8      	ldrb	r0, [r7, #11]
 80066fc:	9300      	str	r3, [sp, #0]
 80066fe:	4623      	mov	r3, r4
 8006700:	f000 f81e 	bl	8006740 <UG_PutChar>

      xp += gui->font.char_width+gui->font.char_h_space;
 8006704:	4b0d      	ldr	r3, [pc, #52]	; (800673c <UG_PutString+0xcc>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800670c:	b29a      	uxth	r2, r3
 800670e:	4b0b      	ldr	r3, [pc, #44]	; (800673c <UG_PutString+0xcc>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8006716:	b29b      	uxth	r3, r3
 8006718:	4413      	add	r3, r2
 800671a:	b29a      	uxth	r2, r3
 800671c:	89fb      	ldrh	r3, [r7, #14]
 800671e:	4413      	add	r3, r2
 8006720:	b29b      	uxth	r3, r3
 8006722:	81fb      	strh	r3, [r7, #14]
      str++;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	3301      	adds	r3, #1
 8006728:	603b      	str	r3, [r7, #0]
   while ( *str != 0 )
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1ab      	bne.n	800668a <UG_PutString+0x1a>
   }
}
 8006732:	bf00      	nop
 8006734:	bf00      	nop
 8006736:	3714      	adds	r7, #20
 8006738:	46bd      	mov	sp, r7
 800673a:	bd90      	pop	{r4, r7, pc}
 800673c:	200000fc 	.word	0x200000fc

08006740 <UG_PutChar>:

void UG_PutChar( char chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc )
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b08a      	sub	sp, #40	; 0x28
 8006744:	af00      	add	r7, sp, #0
 8006746:	607b      	str	r3, [r7, #4]
 8006748:	4603      	mov	r3, r0
 800674a:	73fb      	strb	r3, [r7, #15]
 800674c:	460b      	mov	r3, r1
 800674e:	81bb      	strh	r3, [r7, #12]
 8006750:	4613      	mov	r3, r2
 8006752:	817b      	strh	r3, [r7, #10]
   UG_U16 i,j,k,xo,yo,c,bn;
   UG_U8 b,bt;
   unsigned char* p;

   bt = (UG_U8)chr;
 8006754:	7bfb      	ldrb	r3, [r7, #15]
 8006756:	763b      	strb	r3, [r7, #24]

   switch ( bt )
 8006758:	7e3b      	ldrb	r3, [r7, #24]
 800675a:	2bfc      	cmp	r3, #252	; 0xfc
 800675c:	dc76      	bgt.n	800684c <UG_PutChar+0x10c>
 800675e:	2bd6      	cmp	r3, #214	; 0xd6
 8006760:	da08      	bge.n	8006774 <UG_PutChar+0x34>
 8006762:	2bc4      	cmp	r3, #196	; 0xc4
 8006764:	d069      	beq.n	800683a <UG_PutChar+0xfa>
 8006766:	2bc4      	cmp	r3, #196	; 0xc4
 8006768:	dc70      	bgt.n	800684c <UG_PutChar+0x10c>
 800676a:	2bb0      	cmp	r3, #176	; 0xb0
 800676c:	d06b      	beq.n	8006846 <UG_PutChar+0x106>
 800676e:	2bb5      	cmp	r3, #181	; 0xb5
 8006770:	d066      	beq.n	8006840 <UG_PutChar+0x100>
 8006772:	e06b      	b.n	800684c <UG_PutChar+0x10c>
 8006774:	3bd6      	subs	r3, #214	; 0xd6
 8006776:	2b26      	cmp	r3, #38	; 0x26
 8006778:	d868      	bhi.n	800684c <UG_PutChar+0x10c>
 800677a:	a201      	add	r2, pc, #4	; (adr r2, 8006780 <UG_PutChar+0x40>)
 800677c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006780:	08006823 	.word	0x08006823
 8006784:	0800684d 	.word	0x0800684d
 8006788:	0800684d 	.word	0x0800684d
 800678c:	0800684d 	.word	0x0800684d
 8006790:	0800684d 	.word	0x0800684d
 8006794:	0800684d 	.word	0x0800684d
 8006798:	0800682f 	.word	0x0800682f
 800679c:	0800684d 	.word	0x0800684d
 80067a0:	0800684d 	.word	0x0800684d
 80067a4:	0800684d 	.word	0x0800684d
 80067a8:	0800684d 	.word	0x0800684d
 80067ac:	0800684d 	.word	0x0800684d
 80067b0:	0800684d 	.word	0x0800684d
 80067b4:	0800684d 	.word	0x0800684d
 80067b8:	08006835 	.word	0x08006835
 80067bc:	0800684d 	.word	0x0800684d
 80067c0:	0800684d 	.word	0x0800684d
 80067c4:	0800684d 	.word	0x0800684d
 80067c8:	0800684d 	.word	0x0800684d
 80067cc:	0800684d 	.word	0x0800684d
 80067d0:	0800684d 	.word	0x0800684d
 80067d4:	0800684d 	.word	0x0800684d
 80067d8:	0800684d 	.word	0x0800684d
 80067dc:	0800684d 	.word	0x0800684d
 80067e0:	0800684d 	.word	0x0800684d
 80067e4:	0800684d 	.word	0x0800684d
 80067e8:	0800684d 	.word	0x0800684d
 80067ec:	0800684d 	.word	0x0800684d
 80067f0:	0800684d 	.word	0x0800684d
 80067f4:	0800684d 	.word	0x0800684d
 80067f8:	0800684d 	.word	0x0800684d
 80067fc:	0800684d 	.word	0x0800684d
 8006800:	0800681d 	.word	0x0800681d
 8006804:	0800684d 	.word	0x0800684d
 8006808:	0800684d 	.word	0x0800684d
 800680c:	0800684d 	.word	0x0800684d
 8006810:	0800684d 	.word	0x0800684d
 8006814:	0800684d 	.word	0x0800684d
 8006818:	08006829 	.word	0x08006829
   {
      case 0xF6: bt = 0x94; break; // �
 800681c:	2394      	movs	r3, #148	; 0x94
 800681e:	763b      	strb	r3, [r7, #24]
 8006820:	e014      	b.n	800684c <UG_PutChar+0x10c>
      case 0xD6: bt = 0x99; break; // �
 8006822:	2399      	movs	r3, #153	; 0x99
 8006824:	763b      	strb	r3, [r7, #24]
 8006826:	e011      	b.n	800684c <UG_PutChar+0x10c>
      case 0xFC: bt = 0x81; break; // �
 8006828:	2381      	movs	r3, #129	; 0x81
 800682a:	763b      	strb	r3, [r7, #24]
 800682c:	e00e      	b.n	800684c <UG_PutChar+0x10c>
      case 0xDC: bt = 0x9A; break; // �
 800682e:	239a      	movs	r3, #154	; 0x9a
 8006830:	763b      	strb	r3, [r7, #24]
 8006832:	e00b      	b.n	800684c <UG_PutChar+0x10c>
      case 0xE4: bt = 0x84; break; // �
 8006834:	2384      	movs	r3, #132	; 0x84
 8006836:	763b      	strb	r3, [r7, #24]
 8006838:	e008      	b.n	800684c <UG_PutChar+0x10c>
      case 0xC4: bt = 0x8E; break; // �
 800683a:	238e      	movs	r3, #142	; 0x8e
 800683c:	763b      	strb	r3, [r7, #24]
 800683e:	e005      	b.n	800684c <UG_PutChar+0x10c>
      case 0xB5: bt = 0xE6; break; // �
 8006840:	23e6      	movs	r3, #230	; 0xe6
 8006842:	763b      	strb	r3, [r7, #24]
 8006844:	e002      	b.n	800684c <UG_PutChar+0x10c>
      case 0xB0: bt = 0xF8; break; // �
 8006846:	23f8      	movs	r3, #248	; 0xf8
 8006848:	763b      	strb	r3, [r7, #24]
 800684a:	bf00      	nop
   }

   yo = y;
 800684c:	897b      	ldrh	r3, [r7, #10]
 800684e:	83fb      	strh	r3, [r7, #30]
   bn = gui->font.char_width;
 8006850:	4b40      	ldr	r3, [pc, #256]	; (8006954 <UG_PutChar+0x214>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8006858:	837b      	strh	r3, [r7, #26]
   if ( !bn ) return;
 800685a:	8b7b      	ldrh	r3, [r7, #26]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d075      	beq.n	800694c <UG_PutChar+0x20c>
   bn >>= 3;
 8006860:	8b7b      	ldrh	r3, [r7, #26]
 8006862:	08db      	lsrs	r3, r3, #3
 8006864:	837b      	strh	r3, [r7, #26]
   if ( gui->font.char_width % 8 ) bn++;
 8006866:	4b3b      	ldr	r3, [pc, #236]	; (8006954 <UG_PutChar+0x214>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800686e:	b29b      	uxth	r3, r3
 8006870:	f003 0307 	and.w	r3, r3, #7
 8006874:	b29b      	uxth	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d002      	beq.n	8006880 <UG_PutChar+0x140>
 800687a:	8b7b      	ldrh	r3, [r7, #26]
 800687c:	3301      	adds	r3, #1
 800687e:	837b      	strh	r3, [r7, #26]
   p = gui->font.p;
 8006880:	4b34      	ldr	r3, [pc, #208]	; (8006954 <UG_PutChar+0x214>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006886:	617b      	str	r3, [r7, #20]
   p+= bt * gui->font.char_height * bn;
 8006888:	7e3b      	ldrb	r3, [r7, #24]
 800688a:	4a32      	ldr	r2, [pc, #200]	; (8006954 <UG_PutChar+0x214>)
 800688c:	6812      	ldr	r2, [r2, #0]
 800688e:	f9b2 2036 	ldrsh.w	r2, [r2, #54]	; 0x36
 8006892:	fb02 f303 	mul.w	r3, r2, r3
 8006896:	8b7a      	ldrh	r2, [r7, #26]
 8006898:	fb02 f303 	mul.w	r3, r2, r3
 800689c:	461a      	mov	r2, r3
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	4413      	add	r3, r2
 80068a2:	617b      	str	r3, [r7, #20]

   for( j=0;j<gui->font.char_height;j++ )
 80068a4:	2300      	movs	r3, #0
 80068a6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80068a8:	e048      	b.n	800693c <UG_PutChar+0x1fc>
   {
      xo = x;
 80068aa:	89bb      	ldrh	r3, [r7, #12]
 80068ac:	843b      	strh	r3, [r7, #32]
      c=gui->font.char_width;
 80068ae:	4b29      	ldr	r3, [pc, #164]	; (8006954 <UG_PutChar+0x214>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80068b6:	83bb      	strh	r3, [r7, #28]
      for( i=0;i<bn;i++ )
 80068b8:	2300      	movs	r3, #0
 80068ba:	84fb      	strh	r3, [r7, #38]	; 0x26
 80068bc:	e034      	b.n	8006928 <UG_PutChar+0x1e8>
      {
         b = *p++;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	1c5a      	adds	r2, r3, #1
 80068c2:	617a      	str	r2, [r7, #20]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	767b      	strb	r3, [r7, #25]
         for( k=0;(k<8) && c;k++ )
 80068c8:	2300      	movs	r3, #0
 80068ca:	847b      	strh	r3, [r7, #34]	; 0x22
 80068cc:	e023      	b.n	8006916 <UG_PutChar+0x1d6>
         {
            if( b & 0x01 )
 80068ce:	7e7b      	ldrb	r3, [r7, #25]
 80068d0:	f003 0301 	and.w	r3, r3, #1
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d009      	beq.n	80068ec <UG_PutChar+0x1ac>
            {
               gui->pset(xo,yo,fc);
 80068d8:	4b1e      	ldr	r3, [pc, #120]	; (8006954 <UG_PutChar+0x214>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 80068e2:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	4798      	blx	r3
 80068ea:	e008      	b.n	80068fe <UG_PutChar+0x1be>
            }
            else
            {
               gui->pset(xo,yo,bc);
 80068ec:	4b19      	ldr	r3, [pc, #100]	; (8006954 <UG_PutChar+0x214>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 80068f6:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 80068fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068fc:	4798      	blx	r3
            }
            b >>= 1;
 80068fe:	7e7b      	ldrb	r3, [r7, #25]
 8006900:	085b      	lsrs	r3, r3, #1
 8006902:	767b      	strb	r3, [r7, #25]
            xo++;
 8006904:	8c3b      	ldrh	r3, [r7, #32]
 8006906:	3301      	adds	r3, #1
 8006908:	843b      	strh	r3, [r7, #32]
            c--;
 800690a:	8bbb      	ldrh	r3, [r7, #28]
 800690c:	3b01      	subs	r3, #1
 800690e:	83bb      	strh	r3, [r7, #28]
         for( k=0;(k<8) && c;k++ )
 8006910:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006912:	3301      	adds	r3, #1
 8006914:	847b      	strh	r3, [r7, #34]	; 0x22
 8006916:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006918:	2b07      	cmp	r3, #7
 800691a:	d802      	bhi.n	8006922 <UG_PutChar+0x1e2>
 800691c:	8bbb      	ldrh	r3, [r7, #28]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1d5      	bne.n	80068ce <UG_PutChar+0x18e>
      for( i=0;i<bn;i++ )
 8006922:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006924:	3301      	adds	r3, #1
 8006926:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006928:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800692a:	8b7b      	ldrh	r3, [r7, #26]
 800692c:	429a      	cmp	r2, r3
 800692e:	d3c6      	bcc.n	80068be <UG_PutChar+0x17e>
         }
      }
      yo++;
 8006930:	8bfb      	ldrh	r3, [r7, #30]
 8006932:	3301      	adds	r3, #1
 8006934:	83fb      	strh	r3, [r7, #30]
   for( j=0;j<gui->font.char_height;j++ )
 8006936:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006938:	3301      	adds	r3, #1
 800693a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800693c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800693e:	4a05      	ldr	r2, [pc, #20]	; (8006954 <UG_PutChar+0x214>)
 8006940:	6812      	ldr	r2, [r2, #0]
 8006942:	f9b2 2036 	ldrsh.w	r2, [r2, #54]	; 0x36
 8006946:	4293      	cmp	r3, r2
 8006948:	dbaf      	blt.n	80068aa <UG_PutChar+0x16a>
 800694a:	e000      	b.n	800694e <UG_PutChar+0x20e>
   if ( !bn ) return;
 800694c:	bf00      	nop
   }
}
 800694e:	3728      	adds	r7, #40	; 0x28
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	200000fc 	.word	0x200000fc

08006958 <UG_SetForecolor>:
{
   gui->console.back_color = c;
}

void UG_SetForecolor( UG_COLOR c )
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
   gui->fore_color = c;
 8006960:	4b04      	ldr	r3, [pc, #16]	; (8006974 <UG_SetForecolor+0x1c>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr
 8006974:	200000fc 	.word	0x200000fc

08006978 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
   gui->back_color = c;
 8006980:	4b04      	ldr	r3, [pc, #16]	; (8006994 <UG_SetBackcolor+0x1c>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	641a      	str	r2, [r3, #64]	; 0x40
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	200000fc 	.word	0x200000fc

08006998 <UG_GetXDim>:

UG_S16 UG_GetXDim( void )
{
 8006998:	b480      	push	{r7}
 800699a:	af00      	add	r7, sp, #0
   return gui->x_dim;
 800699c:	4b04      	ldr	r3, [pc, #16]	; (80069b0 <UG_GetXDim+0x18>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	200000fc 	.word	0x200000fc

080069b4 <__errno>:
 80069b4:	4b01      	ldr	r3, [pc, #4]	; (80069bc <__errno+0x8>)
 80069b6:	6818      	ldr	r0, [r3, #0]
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop
 80069bc:	20000070 	.word	0x20000070

080069c0 <__libc_init_array>:
 80069c0:	b570      	push	{r4, r5, r6, lr}
 80069c2:	4d0d      	ldr	r5, [pc, #52]	; (80069f8 <__libc_init_array+0x38>)
 80069c4:	4c0d      	ldr	r4, [pc, #52]	; (80069fc <__libc_init_array+0x3c>)
 80069c6:	1b64      	subs	r4, r4, r5
 80069c8:	10a4      	asrs	r4, r4, #2
 80069ca:	2600      	movs	r6, #0
 80069cc:	42a6      	cmp	r6, r4
 80069ce:	d109      	bne.n	80069e4 <__libc_init_array+0x24>
 80069d0:	4d0b      	ldr	r5, [pc, #44]	; (8006a00 <__libc_init_array+0x40>)
 80069d2:	4c0c      	ldr	r4, [pc, #48]	; (8006a04 <__libc_init_array+0x44>)
 80069d4:	f001 fc86 	bl	80082e4 <_init>
 80069d8:	1b64      	subs	r4, r4, r5
 80069da:	10a4      	asrs	r4, r4, #2
 80069dc:	2600      	movs	r6, #0
 80069de:	42a6      	cmp	r6, r4
 80069e0:	d105      	bne.n	80069ee <__libc_init_array+0x2e>
 80069e2:	bd70      	pop	{r4, r5, r6, pc}
 80069e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80069e8:	4798      	blx	r3
 80069ea:	3601      	adds	r6, #1
 80069ec:	e7ee      	b.n	80069cc <__libc_init_array+0xc>
 80069ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80069f2:	4798      	blx	r3
 80069f4:	3601      	adds	r6, #1
 80069f6:	e7f2      	b.n	80069de <__libc_init_array+0x1e>
 80069f8:	08008e90 	.word	0x08008e90
 80069fc:	08008e90 	.word	0x08008e90
 8006a00:	08008e90 	.word	0x08008e90
 8006a04:	08008e94 	.word	0x08008e94

08006a08 <memset>:
 8006a08:	4402      	add	r2, r0
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d100      	bne.n	8006a12 <memset+0xa>
 8006a10:	4770      	bx	lr
 8006a12:	f803 1b01 	strb.w	r1, [r3], #1
 8006a16:	e7f9      	b.n	8006a0c <memset+0x4>

08006a18 <siprintf>:
 8006a18:	b40e      	push	{r1, r2, r3}
 8006a1a:	b500      	push	{lr}
 8006a1c:	b09c      	sub	sp, #112	; 0x70
 8006a1e:	ab1d      	add	r3, sp, #116	; 0x74
 8006a20:	9002      	str	r0, [sp, #8]
 8006a22:	9006      	str	r0, [sp, #24]
 8006a24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a28:	4809      	ldr	r0, [pc, #36]	; (8006a50 <siprintf+0x38>)
 8006a2a:	9107      	str	r1, [sp, #28]
 8006a2c:	9104      	str	r1, [sp, #16]
 8006a2e:	4909      	ldr	r1, [pc, #36]	; (8006a54 <siprintf+0x3c>)
 8006a30:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a34:	9105      	str	r1, [sp, #20]
 8006a36:	6800      	ldr	r0, [r0, #0]
 8006a38:	9301      	str	r3, [sp, #4]
 8006a3a:	a902      	add	r1, sp, #8
 8006a3c:	f000 f868 	bl	8006b10 <_svfiprintf_r>
 8006a40:	9b02      	ldr	r3, [sp, #8]
 8006a42:	2200      	movs	r2, #0
 8006a44:	701a      	strb	r2, [r3, #0]
 8006a46:	b01c      	add	sp, #112	; 0x70
 8006a48:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a4c:	b003      	add	sp, #12
 8006a4e:	4770      	bx	lr
 8006a50:	20000070 	.word	0x20000070
 8006a54:	ffff0208 	.word	0xffff0208

08006a58 <__ssputs_r>:
 8006a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a5c:	688e      	ldr	r6, [r1, #8]
 8006a5e:	429e      	cmp	r6, r3
 8006a60:	4682      	mov	sl, r0
 8006a62:	460c      	mov	r4, r1
 8006a64:	4690      	mov	r8, r2
 8006a66:	461f      	mov	r7, r3
 8006a68:	d838      	bhi.n	8006adc <__ssputs_r+0x84>
 8006a6a:	898a      	ldrh	r2, [r1, #12]
 8006a6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a70:	d032      	beq.n	8006ad8 <__ssputs_r+0x80>
 8006a72:	6825      	ldr	r5, [r4, #0]
 8006a74:	6909      	ldr	r1, [r1, #16]
 8006a76:	eba5 0901 	sub.w	r9, r5, r1
 8006a7a:	6965      	ldr	r5, [r4, #20]
 8006a7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a84:	3301      	adds	r3, #1
 8006a86:	444b      	add	r3, r9
 8006a88:	106d      	asrs	r5, r5, #1
 8006a8a:	429d      	cmp	r5, r3
 8006a8c:	bf38      	it	cc
 8006a8e:	461d      	movcc	r5, r3
 8006a90:	0553      	lsls	r3, r2, #21
 8006a92:	d531      	bpl.n	8006af8 <__ssputs_r+0xa0>
 8006a94:	4629      	mov	r1, r5
 8006a96:	f000 fb47 	bl	8007128 <_malloc_r>
 8006a9a:	4606      	mov	r6, r0
 8006a9c:	b950      	cbnz	r0, 8006ab4 <__ssputs_r+0x5c>
 8006a9e:	230c      	movs	r3, #12
 8006aa0:	f8ca 3000 	str.w	r3, [sl]
 8006aa4:	89a3      	ldrh	r3, [r4, #12]
 8006aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006aaa:	81a3      	strh	r3, [r4, #12]
 8006aac:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ab4:	6921      	ldr	r1, [r4, #16]
 8006ab6:	464a      	mov	r2, r9
 8006ab8:	f000 fabe 	bl	8007038 <memcpy>
 8006abc:	89a3      	ldrh	r3, [r4, #12]
 8006abe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ac6:	81a3      	strh	r3, [r4, #12]
 8006ac8:	6126      	str	r6, [r4, #16]
 8006aca:	6165      	str	r5, [r4, #20]
 8006acc:	444e      	add	r6, r9
 8006ace:	eba5 0509 	sub.w	r5, r5, r9
 8006ad2:	6026      	str	r6, [r4, #0]
 8006ad4:	60a5      	str	r5, [r4, #8]
 8006ad6:	463e      	mov	r6, r7
 8006ad8:	42be      	cmp	r6, r7
 8006ada:	d900      	bls.n	8006ade <__ssputs_r+0x86>
 8006adc:	463e      	mov	r6, r7
 8006ade:	4632      	mov	r2, r6
 8006ae0:	6820      	ldr	r0, [r4, #0]
 8006ae2:	4641      	mov	r1, r8
 8006ae4:	f000 fab6 	bl	8007054 <memmove>
 8006ae8:	68a3      	ldr	r3, [r4, #8]
 8006aea:	6822      	ldr	r2, [r4, #0]
 8006aec:	1b9b      	subs	r3, r3, r6
 8006aee:	4432      	add	r2, r6
 8006af0:	60a3      	str	r3, [r4, #8]
 8006af2:	6022      	str	r2, [r4, #0]
 8006af4:	2000      	movs	r0, #0
 8006af6:	e7db      	b.n	8006ab0 <__ssputs_r+0x58>
 8006af8:	462a      	mov	r2, r5
 8006afa:	f000 fb6f 	bl	80071dc <_realloc_r>
 8006afe:	4606      	mov	r6, r0
 8006b00:	2800      	cmp	r0, #0
 8006b02:	d1e1      	bne.n	8006ac8 <__ssputs_r+0x70>
 8006b04:	6921      	ldr	r1, [r4, #16]
 8006b06:	4650      	mov	r0, sl
 8006b08:	f000 fabe 	bl	8007088 <_free_r>
 8006b0c:	e7c7      	b.n	8006a9e <__ssputs_r+0x46>
	...

08006b10 <_svfiprintf_r>:
 8006b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b14:	4698      	mov	r8, r3
 8006b16:	898b      	ldrh	r3, [r1, #12]
 8006b18:	061b      	lsls	r3, r3, #24
 8006b1a:	b09d      	sub	sp, #116	; 0x74
 8006b1c:	4607      	mov	r7, r0
 8006b1e:	460d      	mov	r5, r1
 8006b20:	4614      	mov	r4, r2
 8006b22:	d50e      	bpl.n	8006b42 <_svfiprintf_r+0x32>
 8006b24:	690b      	ldr	r3, [r1, #16]
 8006b26:	b963      	cbnz	r3, 8006b42 <_svfiprintf_r+0x32>
 8006b28:	2140      	movs	r1, #64	; 0x40
 8006b2a:	f000 fafd 	bl	8007128 <_malloc_r>
 8006b2e:	6028      	str	r0, [r5, #0]
 8006b30:	6128      	str	r0, [r5, #16]
 8006b32:	b920      	cbnz	r0, 8006b3e <_svfiprintf_r+0x2e>
 8006b34:	230c      	movs	r3, #12
 8006b36:	603b      	str	r3, [r7, #0]
 8006b38:	f04f 30ff 	mov.w	r0, #4294967295
 8006b3c:	e0d1      	b.n	8006ce2 <_svfiprintf_r+0x1d2>
 8006b3e:	2340      	movs	r3, #64	; 0x40
 8006b40:	616b      	str	r3, [r5, #20]
 8006b42:	2300      	movs	r3, #0
 8006b44:	9309      	str	r3, [sp, #36]	; 0x24
 8006b46:	2320      	movs	r3, #32
 8006b48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b50:	2330      	movs	r3, #48	; 0x30
 8006b52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006cfc <_svfiprintf_r+0x1ec>
 8006b56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b5a:	f04f 0901 	mov.w	r9, #1
 8006b5e:	4623      	mov	r3, r4
 8006b60:	469a      	mov	sl, r3
 8006b62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b66:	b10a      	cbz	r2, 8006b6c <_svfiprintf_r+0x5c>
 8006b68:	2a25      	cmp	r2, #37	; 0x25
 8006b6a:	d1f9      	bne.n	8006b60 <_svfiprintf_r+0x50>
 8006b6c:	ebba 0b04 	subs.w	fp, sl, r4
 8006b70:	d00b      	beq.n	8006b8a <_svfiprintf_r+0x7a>
 8006b72:	465b      	mov	r3, fp
 8006b74:	4622      	mov	r2, r4
 8006b76:	4629      	mov	r1, r5
 8006b78:	4638      	mov	r0, r7
 8006b7a:	f7ff ff6d 	bl	8006a58 <__ssputs_r>
 8006b7e:	3001      	adds	r0, #1
 8006b80:	f000 80aa 	beq.w	8006cd8 <_svfiprintf_r+0x1c8>
 8006b84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b86:	445a      	add	r2, fp
 8006b88:	9209      	str	r2, [sp, #36]	; 0x24
 8006b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	f000 80a2 	beq.w	8006cd8 <_svfiprintf_r+0x1c8>
 8006b94:	2300      	movs	r3, #0
 8006b96:	f04f 32ff 	mov.w	r2, #4294967295
 8006b9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b9e:	f10a 0a01 	add.w	sl, sl, #1
 8006ba2:	9304      	str	r3, [sp, #16]
 8006ba4:	9307      	str	r3, [sp, #28]
 8006ba6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006baa:	931a      	str	r3, [sp, #104]	; 0x68
 8006bac:	4654      	mov	r4, sl
 8006bae:	2205      	movs	r2, #5
 8006bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bb4:	4851      	ldr	r0, [pc, #324]	; (8006cfc <_svfiprintf_r+0x1ec>)
 8006bb6:	f7f9 fb0b 	bl	80001d0 <memchr>
 8006bba:	9a04      	ldr	r2, [sp, #16]
 8006bbc:	b9d8      	cbnz	r0, 8006bf6 <_svfiprintf_r+0xe6>
 8006bbe:	06d0      	lsls	r0, r2, #27
 8006bc0:	bf44      	itt	mi
 8006bc2:	2320      	movmi	r3, #32
 8006bc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bc8:	0711      	lsls	r1, r2, #28
 8006bca:	bf44      	itt	mi
 8006bcc:	232b      	movmi	r3, #43	; 0x2b
 8006bce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8006bd6:	2b2a      	cmp	r3, #42	; 0x2a
 8006bd8:	d015      	beq.n	8006c06 <_svfiprintf_r+0xf6>
 8006bda:	9a07      	ldr	r2, [sp, #28]
 8006bdc:	4654      	mov	r4, sl
 8006bde:	2000      	movs	r0, #0
 8006be0:	f04f 0c0a 	mov.w	ip, #10
 8006be4:	4621      	mov	r1, r4
 8006be6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bea:	3b30      	subs	r3, #48	; 0x30
 8006bec:	2b09      	cmp	r3, #9
 8006bee:	d94e      	bls.n	8006c8e <_svfiprintf_r+0x17e>
 8006bf0:	b1b0      	cbz	r0, 8006c20 <_svfiprintf_r+0x110>
 8006bf2:	9207      	str	r2, [sp, #28]
 8006bf4:	e014      	b.n	8006c20 <_svfiprintf_r+0x110>
 8006bf6:	eba0 0308 	sub.w	r3, r0, r8
 8006bfa:	fa09 f303 	lsl.w	r3, r9, r3
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	9304      	str	r3, [sp, #16]
 8006c02:	46a2      	mov	sl, r4
 8006c04:	e7d2      	b.n	8006bac <_svfiprintf_r+0x9c>
 8006c06:	9b03      	ldr	r3, [sp, #12]
 8006c08:	1d19      	adds	r1, r3, #4
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	9103      	str	r1, [sp, #12]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	bfbb      	ittet	lt
 8006c12:	425b      	neglt	r3, r3
 8006c14:	f042 0202 	orrlt.w	r2, r2, #2
 8006c18:	9307      	strge	r3, [sp, #28]
 8006c1a:	9307      	strlt	r3, [sp, #28]
 8006c1c:	bfb8      	it	lt
 8006c1e:	9204      	strlt	r2, [sp, #16]
 8006c20:	7823      	ldrb	r3, [r4, #0]
 8006c22:	2b2e      	cmp	r3, #46	; 0x2e
 8006c24:	d10c      	bne.n	8006c40 <_svfiprintf_r+0x130>
 8006c26:	7863      	ldrb	r3, [r4, #1]
 8006c28:	2b2a      	cmp	r3, #42	; 0x2a
 8006c2a:	d135      	bne.n	8006c98 <_svfiprintf_r+0x188>
 8006c2c:	9b03      	ldr	r3, [sp, #12]
 8006c2e:	1d1a      	adds	r2, r3, #4
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	9203      	str	r2, [sp, #12]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	bfb8      	it	lt
 8006c38:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c3c:	3402      	adds	r4, #2
 8006c3e:	9305      	str	r3, [sp, #20]
 8006c40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006d0c <_svfiprintf_r+0x1fc>
 8006c44:	7821      	ldrb	r1, [r4, #0]
 8006c46:	2203      	movs	r2, #3
 8006c48:	4650      	mov	r0, sl
 8006c4a:	f7f9 fac1 	bl	80001d0 <memchr>
 8006c4e:	b140      	cbz	r0, 8006c62 <_svfiprintf_r+0x152>
 8006c50:	2340      	movs	r3, #64	; 0x40
 8006c52:	eba0 000a 	sub.w	r0, r0, sl
 8006c56:	fa03 f000 	lsl.w	r0, r3, r0
 8006c5a:	9b04      	ldr	r3, [sp, #16]
 8006c5c:	4303      	orrs	r3, r0
 8006c5e:	3401      	adds	r4, #1
 8006c60:	9304      	str	r3, [sp, #16]
 8006c62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c66:	4826      	ldr	r0, [pc, #152]	; (8006d00 <_svfiprintf_r+0x1f0>)
 8006c68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c6c:	2206      	movs	r2, #6
 8006c6e:	f7f9 faaf 	bl	80001d0 <memchr>
 8006c72:	2800      	cmp	r0, #0
 8006c74:	d038      	beq.n	8006ce8 <_svfiprintf_r+0x1d8>
 8006c76:	4b23      	ldr	r3, [pc, #140]	; (8006d04 <_svfiprintf_r+0x1f4>)
 8006c78:	bb1b      	cbnz	r3, 8006cc2 <_svfiprintf_r+0x1b2>
 8006c7a:	9b03      	ldr	r3, [sp, #12]
 8006c7c:	3307      	adds	r3, #7
 8006c7e:	f023 0307 	bic.w	r3, r3, #7
 8006c82:	3308      	adds	r3, #8
 8006c84:	9303      	str	r3, [sp, #12]
 8006c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c88:	4433      	add	r3, r6
 8006c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8006c8c:	e767      	b.n	8006b5e <_svfiprintf_r+0x4e>
 8006c8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c92:	460c      	mov	r4, r1
 8006c94:	2001      	movs	r0, #1
 8006c96:	e7a5      	b.n	8006be4 <_svfiprintf_r+0xd4>
 8006c98:	2300      	movs	r3, #0
 8006c9a:	3401      	adds	r4, #1
 8006c9c:	9305      	str	r3, [sp, #20]
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	f04f 0c0a 	mov.w	ip, #10
 8006ca4:	4620      	mov	r0, r4
 8006ca6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006caa:	3a30      	subs	r2, #48	; 0x30
 8006cac:	2a09      	cmp	r2, #9
 8006cae:	d903      	bls.n	8006cb8 <_svfiprintf_r+0x1a8>
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d0c5      	beq.n	8006c40 <_svfiprintf_r+0x130>
 8006cb4:	9105      	str	r1, [sp, #20]
 8006cb6:	e7c3      	b.n	8006c40 <_svfiprintf_r+0x130>
 8006cb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cbc:	4604      	mov	r4, r0
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e7f0      	b.n	8006ca4 <_svfiprintf_r+0x194>
 8006cc2:	ab03      	add	r3, sp, #12
 8006cc4:	9300      	str	r3, [sp, #0]
 8006cc6:	462a      	mov	r2, r5
 8006cc8:	4b0f      	ldr	r3, [pc, #60]	; (8006d08 <_svfiprintf_r+0x1f8>)
 8006cca:	a904      	add	r1, sp, #16
 8006ccc:	4638      	mov	r0, r7
 8006cce:	f3af 8000 	nop.w
 8006cd2:	1c42      	adds	r2, r0, #1
 8006cd4:	4606      	mov	r6, r0
 8006cd6:	d1d6      	bne.n	8006c86 <_svfiprintf_r+0x176>
 8006cd8:	89ab      	ldrh	r3, [r5, #12]
 8006cda:	065b      	lsls	r3, r3, #25
 8006cdc:	f53f af2c 	bmi.w	8006b38 <_svfiprintf_r+0x28>
 8006ce0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ce2:	b01d      	add	sp, #116	; 0x74
 8006ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ce8:	ab03      	add	r3, sp, #12
 8006cea:	9300      	str	r3, [sp, #0]
 8006cec:	462a      	mov	r2, r5
 8006cee:	4b06      	ldr	r3, [pc, #24]	; (8006d08 <_svfiprintf_r+0x1f8>)
 8006cf0:	a904      	add	r1, sp, #16
 8006cf2:	4638      	mov	r0, r7
 8006cf4:	f000 f87a 	bl	8006dec <_printf_i>
 8006cf8:	e7eb      	b.n	8006cd2 <_svfiprintf_r+0x1c2>
 8006cfa:	bf00      	nop
 8006cfc:	08008c78 	.word	0x08008c78
 8006d00:	08008c82 	.word	0x08008c82
 8006d04:	00000000 	.word	0x00000000
 8006d08:	08006a59 	.word	0x08006a59
 8006d0c:	08008c7e 	.word	0x08008c7e

08006d10 <_printf_common>:
 8006d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d14:	4616      	mov	r6, r2
 8006d16:	4699      	mov	r9, r3
 8006d18:	688a      	ldr	r2, [r1, #8]
 8006d1a:	690b      	ldr	r3, [r1, #16]
 8006d1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d20:	4293      	cmp	r3, r2
 8006d22:	bfb8      	it	lt
 8006d24:	4613      	movlt	r3, r2
 8006d26:	6033      	str	r3, [r6, #0]
 8006d28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d2c:	4607      	mov	r7, r0
 8006d2e:	460c      	mov	r4, r1
 8006d30:	b10a      	cbz	r2, 8006d36 <_printf_common+0x26>
 8006d32:	3301      	adds	r3, #1
 8006d34:	6033      	str	r3, [r6, #0]
 8006d36:	6823      	ldr	r3, [r4, #0]
 8006d38:	0699      	lsls	r1, r3, #26
 8006d3a:	bf42      	ittt	mi
 8006d3c:	6833      	ldrmi	r3, [r6, #0]
 8006d3e:	3302      	addmi	r3, #2
 8006d40:	6033      	strmi	r3, [r6, #0]
 8006d42:	6825      	ldr	r5, [r4, #0]
 8006d44:	f015 0506 	ands.w	r5, r5, #6
 8006d48:	d106      	bne.n	8006d58 <_printf_common+0x48>
 8006d4a:	f104 0a19 	add.w	sl, r4, #25
 8006d4e:	68e3      	ldr	r3, [r4, #12]
 8006d50:	6832      	ldr	r2, [r6, #0]
 8006d52:	1a9b      	subs	r3, r3, r2
 8006d54:	42ab      	cmp	r3, r5
 8006d56:	dc26      	bgt.n	8006da6 <_printf_common+0x96>
 8006d58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d5c:	1e13      	subs	r3, r2, #0
 8006d5e:	6822      	ldr	r2, [r4, #0]
 8006d60:	bf18      	it	ne
 8006d62:	2301      	movne	r3, #1
 8006d64:	0692      	lsls	r2, r2, #26
 8006d66:	d42b      	bmi.n	8006dc0 <_printf_common+0xb0>
 8006d68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d6c:	4649      	mov	r1, r9
 8006d6e:	4638      	mov	r0, r7
 8006d70:	47c0      	blx	r8
 8006d72:	3001      	adds	r0, #1
 8006d74:	d01e      	beq.n	8006db4 <_printf_common+0xa4>
 8006d76:	6823      	ldr	r3, [r4, #0]
 8006d78:	68e5      	ldr	r5, [r4, #12]
 8006d7a:	6832      	ldr	r2, [r6, #0]
 8006d7c:	f003 0306 	and.w	r3, r3, #6
 8006d80:	2b04      	cmp	r3, #4
 8006d82:	bf08      	it	eq
 8006d84:	1aad      	subeq	r5, r5, r2
 8006d86:	68a3      	ldr	r3, [r4, #8]
 8006d88:	6922      	ldr	r2, [r4, #16]
 8006d8a:	bf0c      	ite	eq
 8006d8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d90:	2500      	movne	r5, #0
 8006d92:	4293      	cmp	r3, r2
 8006d94:	bfc4      	itt	gt
 8006d96:	1a9b      	subgt	r3, r3, r2
 8006d98:	18ed      	addgt	r5, r5, r3
 8006d9a:	2600      	movs	r6, #0
 8006d9c:	341a      	adds	r4, #26
 8006d9e:	42b5      	cmp	r5, r6
 8006da0:	d11a      	bne.n	8006dd8 <_printf_common+0xc8>
 8006da2:	2000      	movs	r0, #0
 8006da4:	e008      	b.n	8006db8 <_printf_common+0xa8>
 8006da6:	2301      	movs	r3, #1
 8006da8:	4652      	mov	r2, sl
 8006daa:	4649      	mov	r1, r9
 8006dac:	4638      	mov	r0, r7
 8006dae:	47c0      	blx	r8
 8006db0:	3001      	adds	r0, #1
 8006db2:	d103      	bne.n	8006dbc <_printf_common+0xac>
 8006db4:	f04f 30ff 	mov.w	r0, #4294967295
 8006db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dbc:	3501      	adds	r5, #1
 8006dbe:	e7c6      	b.n	8006d4e <_printf_common+0x3e>
 8006dc0:	18e1      	adds	r1, r4, r3
 8006dc2:	1c5a      	adds	r2, r3, #1
 8006dc4:	2030      	movs	r0, #48	; 0x30
 8006dc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006dca:	4422      	add	r2, r4
 8006dcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006dd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006dd4:	3302      	adds	r3, #2
 8006dd6:	e7c7      	b.n	8006d68 <_printf_common+0x58>
 8006dd8:	2301      	movs	r3, #1
 8006dda:	4622      	mov	r2, r4
 8006ddc:	4649      	mov	r1, r9
 8006dde:	4638      	mov	r0, r7
 8006de0:	47c0      	blx	r8
 8006de2:	3001      	adds	r0, #1
 8006de4:	d0e6      	beq.n	8006db4 <_printf_common+0xa4>
 8006de6:	3601      	adds	r6, #1
 8006de8:	e7d9      	b.n	8006d9e <_printf_common+0x8e>
	...

08006dec <_printf_i>:
 8006dec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006df0:	460c      	mov	r4, r1
 8006df2:	4691      	mov	r9, r2
 8006df4:	7e27      	ldrb	r7, [r4, #24]
 8006df6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006df8:	2f78      	cmp	r7, #120	; 0x78
 8006dfa:	4680      	mov	r8, r0
 8006dfc:	469a      	mov	sl, r3
 8006dfe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e02:	d807      	bhi.n	8006e14 <_printf_i+0x28>
 8006e04:	2f62      	cmp	r7, #98	; 0x62
 8006e06:	d80a      	bhi.n	8006e1e <_printf_i+0x32>
 8006e08:	2f00      	cmp	r7, #0
 8006e0a:	f000 80d8 	beq.w	8006fbe <_printf_i+0x1d2>
 8006e0e:	2f58      	cmp	r7, #88	; 0x58
 8006e10:	f000 80a3 	beq.w	8006f5a <_printf_i+0x16e>
 8006e14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006e18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e1c:	e03a      	b.n	8006e94 <_printf_i+0xa8>
 8006e1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e22:	2b15      	cmp	r3, #21
 8006e24:	d8f6      	bhi.n	8006e14 <_printf_i+0x28>
 8006e26:	a001      	add	r0, pc, #4	; (adr r0, 8006e2c <_printf_i+0x40>)
 8006e28:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006e2c:	08006e85 	.word	0x08006e85
 8006e30:	08006e99 	.word	0x08006e99
 8006e34:	08006e15 	.word	0x08006e15
 8006e38:	08006e15 	.word	0x08006e15
 8006e3c:	08006e15 	.word	0x08006e15
 8006e40:	08006e15 	.word	0x08006e15
 8006e44:	08006e99 	.word	0x08006e99
 8006e48:	08006e15 	.word	0x08006e15
 8006e4c:	08006e15 	.word	0x08006e15
 8006e50:	08006e15 	.word	0x08006e15
 8006e54:	08006e15 	.word	0x08006e15
 8006e58:	08006fa5 	.word	0x08006fa5
 8006e5c:	08006ec9 	.word	0x08006ec9
 8006e60:	08006f87 	.word	0x08006f87
 8006e64:	08006e15 	.word	0x08006e15
 8006e68:	08006e15 	.word	0x08006e15
 8006e6c:	08006fc7 	.word	0x08006fc7
 8006e70:	08006e15 	.word	0x08006e15
 8006e74:	08006ec9 	.word	0x08006ec9
 8006e78:	08006e15 	.word	0x08006e15
 8006e7c:	08006e15 	.word	0x08006e15
 8006e80:	08006f8f 	.word	0x08006f8f
 8006e84:	680b      	ldr	r3, [r1, #0]
 8006e86:	1d1a      	adds	r2, r3, #4
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	600a      	str	r2, [r1, #0]
 8006e8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006e90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e94:	2301      	movs	r3, #1
 8006e96:	e0a3      	b.n	8006fe0 <_printf_i+0x1f4>
 8006e98:	6825      	ldr	r5, [r4, #0]
 8006e9a:	6808      	ldr	r0, [r1, #0]
 8006e9c:	062e      	lsls	r6, r5, #24
 8006e9e:	f100 0304 	add.w	r3, r0, #4
 8006ea2:	d50a      	bpl.n	8006eba <_printf_i+0xce>
 8006ea4:	6805      	ldr	r5, [r0, #0]
 8006ea6:	600b      	str	r3, [r1, #0]
 8006ea8:	2d00      	cmp	r5, #0
 8006eaa:	da03      	bge.n	8006eb4 <_printf_i+0xc8>
 8006eac:	232d      	movs	r3, #45	; 0x2d
 8006eae:	426d      	negs	r5, r5
 8006eb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eb4:	485e      	ldr	r0, [pc, #376]	; (8007030 <_printf_i+0x244>)
 8006eb6:	230a      	movs	r3, #10
 8006eb8:	e019      	b.n	8006eee <_printf_i+0x102>
 8006eba:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006ebe:	6805      	ldr	r5, [r0, #0]
 8006ec0:	600b      	str	r3, [r1, #0]
 8006ec2:	bf18      	it	ne
 8006ec4:	b22d      	sxthne	r5, r5
 8006ec6:	e7ef      	b.n	8006ea8 <_printf_i+0xbc>
 8006ec8:	680b      	ldr	r3, [r1, #0]
 8006eca:	6825      	ldr	r5, [r4, #0]
 8006ecc:	1d18      	adds	r0, r3, #4
 8006ece:	6008      	str	r0, [r1, #0]
 8006ed0:	0628      	lsls	r0, r5, #24
 8006ed2:	d501      	bpl.n	8006ed8 <_printf_i+0xec>
 8006ed4:	681d      	ldr	r5, [r3, #0]
 8006ed6:	e002      	b.n	8006ede <_printf_i+0xf2>
 8006ed8:	0669      	lsls	r1, r5, #25
 8006eda:	d5fb      	bpl.n	8006ed4 <_printf_i+0xe8>
 8006edc:	881d      	ldrh	r5, [r3, #0]
 8006ede:	4854      	ldr	r0, [pc, #336]	; (8007030 <_printf_i+0x244>)
 8006ee0:	2f6f      	cmp	r7, #111	; 0x6f
 8006ee2:	bf0c      	ite	eq
 8006ee4:	2308      	moveq	r3, #8
 8006ee6:	230a      	movne	r3, #10
 8006ee8:	2100      	movs	r1, #0
 8006eea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006eee:	6866      	ldr	r6, [r4, #4]
 8006ef0:	60a6      	str	r6, [r4, #8]
 8006ef2:	2e00      	cmp	r6, #0
 8006ef4:	bfa2      	ittt	ge
 8006ef6:	6821      	ldrge	r1, [r4, #0]
 8006ef8:	f021 0104 	bicge.w	r1, r1, #4
 8006efc:	6021      	strge	r1, [r4, #0]
 8006efe:	b90d      	cbnz	r5, 8006f04 <_printf_i+0x118>
 8006f00:	2e00      	cmp	r6, #0
 8006f02:	d04d      	beq.n	8006fa0 <_printf_i+0x1b4>
 8006f04:	4616      	mov	r6, r2
 8006f06:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f0a:	fb03 5711 	mls	r7, r3, r1, r5
 8006f0e:	5dc7      	ldrb	r7, [r0, r7]
 8006f10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f14:	462f      	mov	r7, r5
 8006f16:	42bb      	cmp	r3, r7
 8006f18:	460d      	mov	r5, r1
 8006f1a:	d9f4      	bls.n	8006f06 <_printf_i+0x11a>
 8006f1c:	2b08      	cmp	r3, #8
 8006f1e:	d10b      	bne.n	8006f38 <_printf_i+0x14c>
 8006f20:	6823      	ldr	r3, [r4, #0]
 8006f22:	07df      	lsls	r7, r3, #31
 8006f24:	d508      	bpl.n	8006f38 <_printf_i+0x14c>
 8006f26:	6923      	ldr	r3, [r4, #16]
 8006f28:	6861      	ldr	r1, [r4, #4]
 8006f2a:	4299      	cmp	r1, r3
 8006f2c:	bfde      	ittt	le
 8006f2e:	2330      	movle	r3, #48	; 0x30
 8006f30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f34:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006f38:	1b92      	subs	r2, r2, r6
 8006f3a:	6122      	str	r2, [r4, #16]
 8006f3c:	f8cd a000 	str.w	sl, [sp]
 8006f40:	464b      	mov	r3, r9
 8006f42:	aa03      	add	r2, sp, #12
 8006f44:	4621      	mov	r1, r4
 8006f46:	4640      	mov	r0, r8
 8006f48:	f7ff fee2 	bl	8006d10 <_printf_common>
 8006f4c:	3001      	adds	r0, #1
 8006f4e:	d14c      	bne.n	8006fea <_printf_i+0x1fe>
 8006f50:	f04f 30ff 	mov.w	r0, #4294967295
 8006f54:	b004      	add	sp, #16
 8006f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f5a:	4835      	ldr	r0, [pc, #212]	; (8007030 <_printf_i+0x244>)
 8006f5c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f60:	6823      	ldr	r3, [r4, #0]
 8006f62:	680e      	ldr	r6, [r1, #0]
 8006f64:	061f      	lsls	r7, r3, #24
 8006f66:	f856 5b04 	ldr.w	r5, [r6], #4
 8006f6a:	600e      	str	r6, [r1, #0]
 8006f6c:	d514      	bpl.n	8006f98 <_printf_i+0x1ac>
 8006f6e:	07d9      	lsls	r1, r3, #31
 8006f70:	bf44      	itt	mi
 8006f72:	f043 0320 	orrmi.w	r3, r3, #32
 8006f76:	6023      	strmi	r3, [r4, #0]
 8006f78:	b91d      	cbnz	r5, 8006f82 <_printf_i+0x196>
 8006f7a:	6823      	ldr	r3, [r4, #0]
 8006f7c:	f023 0320 	bic.w	r3, r3, #32
 8006f80:	6023      	str	r3, [r4, #0]
 8006f82:	2310      	movs	r3, #16
 8006f84:	e7b0      	b.n	8006ee8 <_printf_i+0xfc>
 8006f86:	6823      	ldr	r3, [r4, #0]
 8006f88:	f043 0320 	orr.w	r3, r3, #32
 8006f8c:	6023      	str	r3, [r4, #0]
 8006f8e:	2378      	movs	r3, #120	; 0x78
 8006f90:	4828      	ldr	r0, [pc, #160]	; (8007034 <_printf_i+0x248>)
 8006f92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f96:	e7e3      	b.n	8006f60 <_printf_i+0x174>
 8006f98:	065e      	lsls	r6, r3, #25
 8006f9a:	bf48      	it	mi
 8006f9c:	b2ad      	uxthmi	r5, r5
 8006f9e:	e7e6      	b.n	8006f6e <_printf_i+0x182>
 8006fa0:	4616      	mov	r6, r2
 8006fa2:	e7bb      	b.n	8006f1c <_printf_i+0x130>
 8006fa4:	680b      	ldr	r3, [r1, #0]
 8006fa6:	6826      	ldr	r6, [r4, #0]
 8006fa8:	6960      	ldr	r0, [r4, #20]
 8006faa:	1d1d      	adds	r5, r3, #4
 8006fac:	600d      	str	r5, [r1, #0]
 8006fae:	0635      	lsls	r5, r6, #24
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	d501      	bpl.n	8006fb8 <_printf_i+0x1cc>
 8006fb4:	6018      	str	r0, [r3, #0]
 8006fb6:	e002      	b.n	8006fbe <_printf_i+0x1d2>
 8006fb8:	0671      	lsls	r1, r6, #25
 8006fba:	d5fb      	bpl.n	8006fb4 <_printf_i+0x1c8>
 8006fbc:	8018      	strh	r0, [r3, #0]
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	6123      	str	r3, [r4, #16]
 8006fc2:	4616      	mov	r6, r2
 8006fc4:	e7ba      	b.n	8006f3c <_printf_i+0x150>
 8006fc6:	680b      	ldr	r3, [r1, #0]
 8006fc8:	1d1a      	adds	r2, r3, #4
 8006fca:	600a      	str	r2, [r1, #0]
 8006fcc:	681e      	ldr	r6, [r3, #0]
 8006fce:	6862      	ldr	r2, [r4, #4]
 8006fd0:	2100      	movs	r1, #0
 8006fd2:	4630      	mov	r0, r6
 8006fd4:	f7f9 f8fc 	bl	80001d0 <memchr>
 8006fd8:	b108      	cbz	r0, 8006fde <_printf_i+0x1f2>
 8006fda:	1b80      	subs	r0, r0, r6
 8006fdc:	6060      	str	r0, [r4, #4]
 8006fde:	6863      	ldr	r3, [r4, #4]
 8006fe0:	6123      	str	r3, [r4, #16]
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fe8:	e7a8      	b.n	8006f3c <_printf_i+0x150>
 8006fea:	6923      	ldr	r3, [r4, #16]
 8006fec:	4632      	mov	r2, r6
 8006fee:	4649      	mov	r1, r9
 8006ff0:	4640      	mov	r0, r8
 8006ff2:	47d0      	blx	sl
 8006ff4:	3001      	adds	r0, #1
 8006ff6:	d0ab      	beq.n	8006f50 <_printf_i+0x164>
 8006ff8:	6823      	ldr	r3, [r4, #0]
 8006ffa:	079b      	lsls	r3, r3, #30
 8006ffc:	d413      	bmi.n	8007026 <_printf_i+0x23a>
 8006ffe:	68e0      	ldr	r0, [r4, #12]
 8007000:	9b03      	ldr	r3, [sp, #12]
 8007002:	4298      	cmp	r0, r3
 8007004:	bfb8      	it	lt
 8007006:	4618      	movlt	r0, r3
 8007008:	e7a4      	b.n	8006f54 <_printf_i+0x168>
 800700a:	2301      	movs	r3, #1
 800700c:	4632      	mov	r2, r6
 800700e:	4649      	mov	r1, r9
 8007010:	4640      	mov	r0, r8
 8007012:	47d0      	blx	sl
 8007014:	3001      	adds	r0, #1
 8007016:	d09b      	beq.n	8006f50 <_printf_i+0x164>
 8007018:	3501      	adds	r5, #1
 800701a:	68e3      	ldr	r3, [r4, #12]
 800701c:	9903      	ldr	r1, [sp, #12]
 800701e:	1a5b      	subs	r3, r3, r1
 8007020:	42ab      	cmp	r3, r5
 8007022:	dcf2      	bgt.n	800700a <_printf_i+0x21e>
 8007024:	e7eb      	b.n	8006ffe <_printf_i+0x212>
 8007026:	2500      	movs	r5, #0
 8007028:	f104 0619 	add.w	r6, r4, #25
 800702c:	e7f5      	b.n	800701a <_printf_i+0x22e>
 800702e:	bf00      	nop
 8007030:	08008c89 	.word	0x08008c89
 8007034:	08008c9a 	.word	0x08008c9a

08007038 <memcpy>:
 8007038:	440a      	add	r2, r1
 800703a:	4291      	cmp	r1, r2
 800703c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007040:	d100      	bne.n	8007044 <memcpy+0xc>
 8007042:	4770      	bx	lr
 8007044:	b510      	push	{r4, lr}
 8007046:	f811 4b01 	ldrb.w	r4, [r1], #1
 800704a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800704e:	4291      	cmp	r1, r2
 8007050:	d1f9      	bne.n	8007046 <memcpy+0xe>
 8007052:	bd10      	pop	{r4, pc}

08007054 <memmove>:
 8007054:	4288      	cmp	r0, r1
 8007056:	b510      	push	{r4, lr}
 8007058:	eb01 0402 	add.w	r4, r1, r2
 800705c:	d902      	bls.n	8007064 <memmove+0x10>
 800705e:	4284      	cmp	r4, r0
 8007060:	4623      	mov	r3, r4
 8007062:	d807      	bhi.n	8007074 <memmove+0x20>
 8007064:	1e43      	subs	r3, r0, #1
 8007066:	42a1      	cmp	r1, r4
 8007068:	d008      	beq.n	800707c <memmove+0x28>
 800706a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800706e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007072:	e7f8      	b.n	8007066 <memmove+0x12>
 8007074:	4402      	add	r2, r0
 8007076:	4601      	mov	r1, r0
 8007078:	428a      	cmp	r2, r1
 800707a:	d100      	bne.n	800707e <memmove+0x2a>
 800707c:	bd10      	pop	{r4, pc}
 800707e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007082:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007086:	e7f7      	b.n	8007078 <memmove+0x24>

08007088 <_free_r>:
 8007088:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800708a:	2900      	cmp	r1, #0
 800708c:	d048      	beq.n	8007120 <_free_r+0x98>
 800708e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007092:	9001      	str	r0, [sp, #4]
 8007094:	2b00      	cmp	r3, #0
 8007096:	f1a1 0404 	sub.w	r4, r1, #4
 800709a:	bfb8      	it	lt
 800709c:	18e4      	addlt	r4, r4, r3
 800709e:	f000 f8d3 	bl	8007248 <__malloc_lock>
 80070a2:	4a20      	ldr	r2, [pc, #128]	; (8007124 <_free_r+0x9c>)
 80070a4:	9801      	ldr	r0, [sp, #4]
 80070a6:	6813      	ldr	r3, [r2, #0]
 80070a8:	4615      	mov	r5, r2
 80070aa:	b933      	cbnz	r3, 80070ba <_free_r+0x32>
 80070ac:	6063      	str	r3, [r4, #4]
 80070ae:	6014      	str	r4, [r2, #0]
 80070b0:	b003      	add	sp, #12
 80070b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80070b6:	f000 b8cd 	b.w	8007254 <__malloc_unlock>
 80070ba:	42a3      	cmp	r3, r4
 80070bc:	d90b      	bls.n	80070d6 <_free_r+0x4e>
 80070be:	6821      	ldr	r1, [r4, #0]
 80070c0:	1862      	adds	r2, r4, r1
 80070c2:	4293      	cmp	r3, r2
 80070c4:	bf04      	itt	eq
 80070c6:	681a      	ldreq	r2, [r3, #0]
 80070c8:	685b      	ldreq	r3, [r3, #4]
 80070ca:	6063      	str	r3, [r4, #4]
 80070cc:	bf04      	itt	eq
 80070ce:	1852      	addeq	r2, r2, r1
 80070d0:	6022      	streq	r2, [r4, #0]
 80070d2:	602c      	str	r4, [r5, #0]
 80070d4:	e7ec      	b.n	80070b0 <_free_r+0x28>
 80070d6:	461a      	mov	r2, r3
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	b10b      	cbz	r3, 80070e0 <_free_r+0x58>
 80070dc:	42a3      	cmp	r3, r4
 80070de:	d9fa      	bls.n	80070d6 <_free_r+0x4e>
 80070e0:	6811      	ldr	r1, [r2, #0]
 80070e2:	1855      	adds	r5, r2, r1
 80070e4:	42a5      	cmp	r5, r4
 80070e6:	d10b      	bne.n	8007100 <_free_r+0x78>
 80070e8:	6824      	ldr	r4, [r4, #0]
 80070ea:	4421      	add	r1, r4
 80070ec:	1854      	adds	r4, r2, r1
 80070ee:	42a3      	cmp	r3, r4
 80070f0:	6011      	str	r1, [r2, #0]
 80070f2:	d1dd      	bne.n	80070b0 <_free_r+0x28>
 80070f4:	681c      	ldr	r4, [r3, #0]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	6053      	str	r3, [r2, #4]
 80070fa:	4421      	add	r1, r4
 80070fc:	6011      	str	r1, [r2, #0]
 80070fe:	e7d7      	b.n	80070b0 <_free_r+0x28>
 8007100:	d902      	bls.n	8007108 <_free_r+0x80>
 8007102:	230c      	movs	r3, #12
 8007104:	6003      	str	r3, [r0, #0]
 8007106:	e7d3      	b.n	80070b0 <_free_r+0x28>
 8007108:	6825      	ldr	r5, [r4, #0]
 800710a:	1961      	adds	r1, r4, r5
 800710c:	428b      	cmp	r3, r1
 800710e:	bf04      	itt	eq
 8007110:	6819      	ldreq	r1, [r3, #0]
 8007112:	685b      	ldreq	r3, [r3, #4]
 8007114:	6063      	str	r3, [r4, #4]
 8007116:	bf04      	itt	eq
 8007118:	1949      	addeq	r1, r1, r5
 800711a:	6021      	streq	r1, [r4, #0]
 800711c:	6054      	str	r4, [r2, #4]
 800711e:	e7c7      	b.n	80070b0 <_free_r+0x28>
 8007120:	b003      	add	sp, #12
 8007122:	bd30      	pop	{r4, r5, pc}
 8007124:	20000100 	.word	0x20000100

08007128 <_malloc_r>:
 8007128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800712a:	1ccd      	adds	r5, r1, #3
 800712c:	f025 0503 	bic.w	r5, r5, #3
 8007130:	3508      	adds	r5, #8
 8007132:	2d0c      	cmp	r5, #12
 8007134:	bf38      	it	cc
 8007136:	250c      	movcc	r5, #12
 8007138:	2d00      	cmp	r5, #0
 800713a:	4606      	mov	r6, r0
 800713c:	db01      	blt.n	8007142 <_malloc_r+0x1a>
 800713e:	42a9      	cmp	r1, r5
 8007140:	d903      	bls.n	800714a <_malloc_r+0x22>
 8007142:	230c      	movs	r3, #12
 8007144:	6033      	str	r3, [r6, #0]
 8007146:	2000      	movs	r0, #0
 8007148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800714a:	f000 f87d 	bl	8007248 <__malloc_lock>
 800714e:	4921      	ldr	r1, [pc, #132]	; (80071d4 <_malloc_r+0xac>)
 8007150:	680a      	ldr	r2, [r1, #0]
 8007152:	4614      	mov	r4, r2
 8007154:	b99c      	cbnz	r4, 800717e <_malloc_r+0x56>
 8007156:	4f20      	ldr	r7, [pc, #128]	; (80071d8 <_malloc_r+0xb0>)
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	b923      	cbnz	r3, 8007166 <_malloc_r+0x3e>
 800715c:	4621      	mov	r1, r4
 800715e:	4630      	mov	r0, r6
 8007160:	f000 f862 	bl	8007228 <_sbrk_r>
 8007164:	6038      	str	r0, [r7, #0]
 8007166:	4629      	mov	r1, r5
 8007168:	4630      	mov	r0, r6
 800716a:	f000 f85d 	bl	8007228 <_sbrk_r>
 800716e:	1c43      	adds	r3, r0, #1
 8007170:	d123      	bne.n	80071ba <_malloc_r+0x92>
 8007172:	230c      	movs	r3, #12
 8007174:	6033      	str	r3, [r6, #0]
 8007176:	4630      	mov	r0, r6
 8007178:	f000 f86c 	bl	8007254 <__malloc_unlock>
 800717c:	e7e3      	b.n	8007146 <_malloc_r+0x1e>
 800717e:	6823      	ldr	r3, [r4, #0]
 8007180:	1b5b      	subs	r3, r3, r5
 8007182:	d417      	bmi.n	80071b4 <_malloc_r+0x8c>
 8007184:	2b0b      	cmp	r3, #11
 8007186:	d903      	bls.n	8007190 <_malloc_r+0x68>
 8007188:	6023      	str	r3, [r4, #0]
 800718a:	441c      	add	r4, r3
 800718c:	6025      	str	r5, [r4, #0]
 800718e:	e004      	b.n	800719a <_malloc_r+0x72>
 8007190:	6863      	ldr	r3, [r4, #4]
 8007192:	42a2      	cmp	r2, r4
 8007194:	bf0c      	ite	eq
 8007196:	600b      	streq	r3, [r1, #0]
 8007198:	6053      	strne	r3, [r2, #4]
 800719a:	4630      	mov	r0, r6
 800719c:	f000 f85a 	bl	8007254 <__malloc_unlock>
 80071a0:	f104 000b 	add.w	r0, r4, #11
 80071a4:	1d23      	adds	r3, r4, #4
 80071a6:	f020 0007 	bic.w	r0, r0, #7
 80071aa:	1ac2      	subs	r2, r0, r3
 80071ac:	d0cc      	beq.n	8007148 <_malloc_r+0x20>
 80071ae:	1a1b      	subs	r3, r3, r0
 80071b0:	50a3      	str	r3, [r4, r2]
 80071b2:	e7c9      	b.n	8007148 <_malloc_r+0x20>
 80071b4:	4622      	mov	r2, r4
 80071b6:	6864      	ldr	r4, [r4, #4]
 80071b8:	e7cc      	b.n	8007154 <_malloc_r+0x2c>
 80071ba:	1cc4      	adds	r4, r0, #3
 80071bc:	f024 0403 	bic.w	r4, r4, #3
 80071c0:	42a0      	cmp	r0, r4
 80071c2:	d0e3      	beq.n	800718c <_malloc_r+0x64>
 80071c4:	1a21      	subs	r1, r4, r0
 80071c6:	4630      	mov	r0, r6
 80071c8:	f000 f82e 	bl	8007228 <_sbrk_r>
 80071cc:	3001      	adds	r0, #1
 80071ce:	d1dd      	bne.n	800718c <_malloc_r+0x64>
 80071d0:	e7cf      	b.n	8007172 <_malloc_r+0x4a>
 80071d2:	bf00      	nop
 80071d4:	20000100 	.word	0x20000100
 80071d8:	20000104 	.word	0x20000104

080071dc <_realloc_r>:
 80071dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071de:	4607      	mov	r7, r0
 80071e0:	4614      	mov	r4, r2
 80071e2:	460e      	mov	r6, r1
 80071e4:	b921      	cbnz	r1, 80071f0 <_realloc_r+0x14>
 80071e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80071ea:	4611      	mov	r1, r2
 80071ec:	f7ff bf9c 	b.w	8007128 <_malloc_r>
 80071f0:	b922      	cbnz	r2, 80071fc <_realloc_r+0x20>
 80071f2:	f7ff ff49 	bl	8007088 <_free_r>
 80071f6:	4625      	mov	r5, r4
 80071f8:	4628      	mov	r0, r5
 80071fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071fc:	f000 f830 	bl	8007260 <_malloc_usable_size_r>
 8007200:	42a0      	cmp	r0, r4
 8007202:	d20f      	bcs.n	8007224 <_realloc_r+0x48>
 8007204:	4621      	mov	r1, r4
 8007206:	4638      	mov	r0, r7
 8007208:	f7ff ff8e 	bl	8007128 <_malloc_r>
 800720c:	4605      	mov	r5, r0
 800720e:	2800      	cmp	r0, #0
 8007210:	d0f2      	beq.n	80071f8 <_realloc_r+0x1c>
 8007212:	4631      	mov	r1, r6
 8007214:	4622      	mov	r2, r4
 8007216:	f7ff ff0f 	bl	8007038 <memcpy>
 800721a:	4631      	mov	r1, r6
 800721c:	4638      	mov	r0, r7
 800721e:	f7ff ff33 	bl	8007088 <_free_r>
 8007222:	e7e9      	b.n	80071f8 <_realloc_r+0x1c>
 8007224:	4635      	mov	r5, r6
 8007226:	e7e7      	b.n	80071f8 <_realloc_r+0x1c>

08007228 <_sbrk_r>:
 8007228:	b538      	push	{r3, r4, r5, lr}
 800722a:	4d06      	ldr	r5, [pc, #24]	; (8007244 <_sbrk_r+0x1c>)
 800722c:	2300      	movs	r3, #0
 800722e:	4604      	mov	r4, r0
 8007230:	4608      	mov	r0, r1
 8007232:	602b      	str	r3, [r5, #0]
 8007234:	f7fa fa1e 	bl	8001674 <_sbrk>
 8007238:	1c43      	adds	r3, r0, #1
 800723a:	d102      	bne.n	8007242 <_sbrk_r+0x1a>
 800723c:	682b      	ldr	r3, [r5, #0]
 800723e:	b103      	cbz	r3, 8007242 <_sbrk_r+0x1a>
 8007240:	6023      	str	r3, [r4, #0]
 8007242:	bd38      	pop	{r3, r4, r5, pc}
 8007244:	20001580 	.word	0x20001580

08007248 <__malloc_lock>:
 8007248:	4801      	ldr	r0, [pc, #4]	; (8007250 <__malloc_lock+0x8>)
 800724a:	f000 b811 	b.w	8007270 <__retarget_lock_acquire_recursive>
 800724e:	bf00      	nop
 8007250:	20001588 	.word	0x20001588

08007254 <__malloc_unlock>:
 8007254:	4801      	ldr	r0, [pc, #4]	; (800725c <__malloc_unlock+0x8>)
 8007256:	f000 b80c 	b.w	8007272 <__retarget_lock_release_recursive>
 800725a:	bf00      	nop
 800725c:	20001588 	.word	0x20001588

08007260 <_malloc_usable_size_r>:
 8007260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007264:	1f18      	subs	r0, r3, #4
 8007266:	2b00      	cmp	r3, #0
 8007268:	bfbc      	itt	lt
 800726a:	580b      	ldrlt	r3, [r1, r0]
 800726c:	18c0      	addlt	r0, r0, r3
 800726e:	4770      	bx	lr

08007270 <__retarget_lock_acquire_recursive>:
 8007270:	4770      	bx	lr

08007272 <__retarget_lock_release_recursive>:
 8007272:	4770      	bx	lr
 8007274:	0000      	movs	r0, r0
	...

08007278 <sin>:
 8007278:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800727a:	ec53 2b10 	vmov	r2, r3, d0
 800727e:	4826      	ldr	r0, [pc, #152]	; (8007318 <sin+0xa0>)
 8007280:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007284:	4281      	cmp	r1, r0
 8007286:	dc07      	bgt.n	8007298 <sin+0x20>
 8007288:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8007310 <sin+0x98>
 800728c:	2000      	movs	r0, #0
 800728e:	f000 fe5b 	bl	8007f48 <__kernel_sin>
 8007292:	ec51 0b10 	vmov	r0, r1, d0
 8007296:	e007      	b.n	80072a8 <sin+0x30>
 8007298:	4820      	ldr	r0, [pc, #128]	; (800731c <sin+0xa4>)
 800729a:	4281      	cmp	r1, r0
 800729c:	dd09      	ble.n	80072b2 <sin+0x3a>
 800729e:	ee10 0a10 	vmov	r0, s0
 80072a2:	4619      	mov	r1, r3
 80072a4:	f7f8 ffe8 	bl	8000278 <__aeabi_dsub>
 80072a8:	ec41 0b10 	vmov	d0, r0, r1
 80072ac:	b005      	add	sp, #20
 80072ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80072b2:	4668      	mov	r0, sp
 80072b4:	f000 f834 	bl	8007320 <__ieee754_rem_pio2>
 80072b8:	f000 0003 	and.w	r0, r0, #3
 80072bc:	2801      	cmp	r0, #1
 80072be:	d008      	beq.n	80072d2 <sin+0x5a>
 80072c0:	2802      	cmp	r0, #2
 80072c2:	d00d      	beq.n	80072e0 <sin+0x68>
 80072c4:	b9d0      	cbnz	r0, 80072fc <sin+0x84>
 80072c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80072ca:	ed9d 0b00 	vldr	d0, [sp]
 80072ce:	2001      	movs	r0, #1
 80072d0:	e7dd      	b.n	800728e <sin+0x16>
 80072d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80072d6:	ed9d 0b00 	vldr	d0, [sp]
 80072da:	f000 fa2d 	bl	8007738 <__kernel_cos>
 80072de:	e7d8      	b.n	8007292 <sin+0x1a>
 80072e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80072e4:	ed9d 0b00 	vldr	d0, [sp]
 80072e8:	2001      	movs	r0, #1
 80072ea:	f000 fe2d 	bl	8007f48 <__kernel_sin>
 80072ee:	ec53 2b10 	vmov	r2, r3, d0
 80072f2:	ee10 0a10 	vmov	r0, s0
 80072f6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80072fa:	e7d5      	b.n	80072a8 <sin+0x30>
 80072fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007300:	ed9d 0b00 	vldr	d0, [sp]
 8007304:	f000 fa18 	bl	8007738 <__kernel_cos>
 8007308:	e7f1      	b.n	80072ee <sin+0x76>
 800730a:	bf00      	nop
 800730c:	f3af 8000 	nop.w
	...
 8007318:	3fe921fb 	.word	0x3fe921fb
 800731c:	7fefffff 	.word	0x7fefffff

08007320 <__ieee754_rem_pio2>:
 8007320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007324:	ed2d 8b02 	vpush	{d8}
 8007328:	ec55 4b10 	vmov	r4, r5, d0
 800732c:	4bca      	ldr	r3, [pc, #808]	; (8007658 <__ieee754_rem_pio2+0x338>)
 800732e:	b08b      	sub	sp, #44	; 0x2c
 8007330:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007334:	4598      	cmp	r8, r3
 8007336:	4682      	mov	sl, r0
 8007338:	9502      	str	r5, [sp, #8]
 800733a:	dc08      	bgt.n	800734e <__ieee754_rem_pio2+0x2e>
 800733c:	2200      	movs	r2, #0
 800733e:	2300      	movs	r3, #0
 8007340:	ed80 0b00 	vstr	d0, [r0]
 8007344:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007348:	f04f 0b00 	mov.w	fp, #0
 800734c:	e028      	b.n	80073a0 <__ieee754_rem_pio2+0x80>
 800734e:	4bc3      	ldr	r3, [pc, #780]	; (800765c <__ieee754_rem_pio2+0x33c>)
 8007350:	4598      	cmp	r8, r3
 8007352:	dc78      	bgt.n	8007446 <__ieee754_rem_pio2+0x126>
 8007354:	9b02      	ldr	r3, [sp, #8]
 8007356:	4ec2      	ldr	r6, [pc, #776]	; (8007660 <__ieee754_rem_pio2+0x340>)
 8007358:	2b00      	cmp	r3, #0
 800735a:	ee10 0a10 	vmov	r0, s0
 800735e:	a3b0      	add	r3, pc, #704	; (adr r3, 8007620 <__ieee754_rem_pio2+0x300>)
 8007360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007364:	4629      	mov	r1, r5
 8007366:	dd39      	ble.n	80073dc <__ieee754_rem_pio2+0xbc>
 8007368:	f7f8 ff86 	bl	8000278 <__aeabi_dsub>
 800736c:	45b0      	cmp	r8, r6
 800736e:	4604      	mov	r4, r0
 8007370:	460d      	mov	r5, r1
 8007372:	d01b      	beq.n	80073ac <__ieee754_rem_pio2+0x8c>
 8007374:	a3ac      	add	r3, pc, #688	; (adr r3, 8007628 <__ieee754_rem_pio2+0x308>)
 8007376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737a:	f7f8 ff7d 	bl	8000278 <__aeabi_dsub>
 800737e:	4602      	mov	r2, r0
 8007380:	460b      	mov	r3, r1
 8007382:	e9ca 2300 	strd	r2, r3, [sl]
 8007386:	4620      	mov	r0, r4
 8007388:	4629      	mov	r1, r5
 800738a:	f7f8 ff75 	bl	8000278 <__aeabi_dsub>
 800738e:	a3a6      	add	r3, pc, #664	; (adr r3, 8007628 <__ieee754_rem_pio2+0x308>)
 8007390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007394:	f7f8 ff70 	bl	8000278 <__aeabi_dsub>
 8007398:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800739c:	f04f 0b01 	mov.w	fp, #1
 80073a0:	4658      	mov	r0, fp
 80073a2:	b00b      	add	sp, #44	; 0x2c
 80073a4:	ecbd 8b02 	vpop	{d8}
 80073a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ac:	a3a0      	add	r3, pc, #640	; (adr r3, 8007630 <__ieee754_rem_pio2+0x310>)
 80073ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b2:	f7f8 ff61 	bl	8000278 <__aeabi_dsub>
 80073b6:	a3a0      	add	r3, pc, #640	; (adr r3, 8007638 <__ieee754_rem_pio2+0x318>)
 80073b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073bc:	4604      	mov	r4, r0
 80073be:	460d      	mov	r5, r1
 80073c0:	f7f8 ff5a 	bl	8000278 <__aeabi_dsub>
 80073c4:	4602      	mov	r2, r0
 80073c6:	460b      	mov	r3, r1
 80073c8:	e9ca 2300 	strd	r2, r3, [sl]
 80073cc:	4620      	mov	r0, r4
 80073ce:	4629      	mov	r1, r5
 80073d0:	f7f8 ff52 	bl	8000278 <__aeabi_dsub>
 80073d4:	a398      	add	r3, pc, #608	; (adr r3, 8007638 <__ieee754_rem_pio2+0x318>)
 80073d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073da:	e7db      	b.n	8007394 <__ieee754_rem_pio2+0x74>
 80073dc:	f7f8 ff4e 	bl	800027c <__adddf3>
 80073e0:	45b0      	cmp	r8, r6
 80073e2:	4604      	mov	r4, r0
 80073e4:	460d      	mov	r5, r1
 80073e6:	d016      	beq.n	8007416 <__ieee754_rem_pio2+0xf6>
 80073e8:	a38f      	add	r3, pc, #572	; (adr r3, 8007628 <__ieee754_rem_pio2+0x308>)
 80073ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ee:	f7f8 ff45 	bl	800027c <__adddf3>
 80073f2:	4602      	mov	r2, r0
 80073f4:	460b      	mov	r3, r1
 80073f6:	e9ca 2300 	strd	r2, r3, [sl]
 80073fa:	4620      	mov	r0, r4
 80073fc:	4629      	mov	r1, r5
 80073fe:	f7f8 ff3b 	bl	8000278 <__aeabi_dsub>
 8007402:	a389      	add	r3, pc, #548	; (adr r3, 8007628 <__ieee754_rem_pio2+0x308>)
 8007404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007408:	f7f8 ff38 	bl	800027c <__adddf3>
 800740c:	f04f 3bff 	mov.w	fp, #4294967295
 8007410:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007414:	e7c4      	b.n	80073a0 <__ieee754_rem_pio2+0x80>
 8007416:	a386      	add	r3, pc, #536	; (adr r3, 8007630 <__ieee754_rem_pio2+0x310>)
 8007418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741c:	f7f8 ff2e 	bl	800027c <__adddf3>
 8007420:	a385      	add	r3, pc, #532	; (adr r3, 8007638 <__ieee754_rem_pio2+0x318>)
 8007422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007426:	4604      	mov	r4, r0
 8007428:	460d      	mov	r5, r1
 800742a:	f7f8 ff27 	bl	800027c <__adddf3>
 800742e:	4602      	mov	r2, r0
 8007430:	460b      	mov	r3, r1
 8007432:	e9ca 2300 	strd	r2, r3, [sl]
 8007436:	4620      	mov	r0, r4
 8007438:	4629      	mov	r1, r5
 800743a:	f7f8 ff1d 	bl	8000278 <__aeabi_dsub>
 800743e:	a37e      	add	r3, pc, #504	; (adr r3, 8007638 <__ieee754_rem_pio2+0x318>)
 8007440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007444:	e7e0      	b.n	8007408 <__ieee754_rem_pio2+0xe8>
 8007446:	4b87      	ldr	r3, [pc, #540]	; (8007664 <__ieee754_rem_pio2+0x344>)
 8007448:	4598      	cmp	r8, r3
 800744a:	f300 80d9 	bgt.w	8007600 <__ieee754_rem_pio2+0x2e0>
 800744e:	f000 fe39 	bl	80080c4 <fabs>
 8007452:	ec55 4b10 	vmov	r4, r5, d0
 8007456:	ee10 0a10 	vmov	r0, s0
 800745a:	a379      	add	r3, pc, #484	; (adr r3, 8007640 <__ieee754_rem_pio2+0x320>)
 800745c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007460:	4629      	mov	r1, r5
 8007462:	f7f9 f8c1 	bl	80005e8 <__aeabi_dmul>
 8007466:	4b80      	ldr	r3, [pc, #512]	; (8007668 <__ieee754_rem_pio2+0x348>)
 8007468:	2200      	movs	r2, #0
 800746a:	f7f8 ff07 	bl	800027c <__adddf3>
 800746e:	f7f9 fb55 	bl	8000b1c <__aeabi_d2iz>
 8007472:	4683      	mov	fp, r0
 8007474:	f7f9 f84e 	bl	8000514 <__aeabi_i2d>
 8007478:	4602      	mov	r2, r0
 800747a:	460b      	mov	r3, r1
 800747c:	ec43 2b18 	vmov	d8, r2, r3
 8007480:	a367      	add	r3, pc, #412	; (adr r3, 8007620 <__ieee754_rem_pio2+0x300>)
 8007482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007486:	f7f9 f8af 	bl	80005e8 <__aeabi_dmul>
 800748a:	4602      	mov	r2, r0
 800748c:	460b      	mov	r3, r1
 800748e:	4620      	mov	r0, r4
 8007490:	4629      	mov	r1, r5
 8007492:	f7f8 fef1 	bl	8000278 <__aeabi_dsub>
 8007496:	a364      	add	r3, pc, #400	; (adr r3, 8007628 <__ieee754_rem_pio2+0x308>)
 8007498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749c:	4606      	mov	r6, r0
 800749e:	460f      	mov	r7, r1
 80074a0:	ec51 0b18 	vmov	r0, r1, d8
 80074a4:	f7f9 f8a0 	bl	80005e8 <__aeabi_dmul>
 80074a8:	f1bb 0f1f 	cmp.w	fp, #31
 80074ac:	4604      	mov	r4, r0
 80074ae:	460d      	mov	r5, r1
 80074b0:	dc0d      	bgt.n	80074ce <__ieee754_rem_pio2+0x1ae>
 80074b2:	4b6e      	ldr	r3, [pc, #440]	; (800766c <__ieee754_rem_pio2+0x34c>)
 80074b4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80074b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074bc:	4543      	cmp	r3, r8
 80074be:	d006      	beq.n	80074ce <__ieee754_rem_pio2+0x1ae>
 80074c0:	4622      	mov	r2, r4
 80074c2:	462b      	mov	r3, r5
 80074c4:	4630      	mov	r0, r6
 80074c6:	4639      	mov	r1, r7
 80074c8:	f7f8 fed6 	bl	8000278 <__aeabi_dsub>
 80074cc:	e00f      	b.n	80074ee <__ieee754_rem_pio2+0x1ce>
 80074ce:	462b      	mov	r3, r5
 80074d0:	4622      	mov	r2, r4
 80074d2:	4630      	mov	r0, r6
 80074d4:	4639      	mov	r1, r7
 80074d6:	f7f8 fecf 	bl	8000278 <__aeabi_dsub>
 80074da:	ea4f 5328 	mov.w	r3, r8, asr #20
 80074de:	9303      	str	r3, [sp, #12]
 80074e0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80074e4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80074e8:	f1b8 0f10 	cmp.w	r8, #16
 80074ec:	dc02      	bgt.n	80074f4 <__ieee754_rem_pio2+0x1d4>
 80074ee:	e9ca 0100 	strd	r0, r1, [sl]
 80074f2:	e039      	b.n	8007568 <__ieee754_rem_pio2+0x248>
 80074f4:	a34e      	add	r3, pc, #312	; (adr r3, 8007630 <__ieee754_rem_pio2+0x310>)
 80074f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fa:	ec51 0b18 	vmov	r0, r1, d8
 80074fe:	f7f9 f873 	bl	80005e8 <__aeabi_dmul>
 8007502:	4604      	mov	r4, r0
 8007504:	460d      	mov	r5, r1
 8007506:	4602      	mov	r2, r0
 8007508:	460b      	mov	r3, r1
 800750a:	4630      	mov	r0, r6
 800750c:	4639      	mov	r1, r7
 800750e:	f7f8 feb3 	bl	8000278 <__aeabi_dsub>
 8007512:	4602      	mov	r2, r0
 8007514:	460b      	mov	r3, r1
 8007516:	4680      	mov	r8, r0
 8007518:	4689      	mov	r9, r1
 800751a:	4630      	mov	r0, r6
 800751c:	4639      	mov	r1, r7
 800751e:	f7f8 feab 	bl	8000278 <__aeabi_dsub>
 8007522:	4622      	mov	r2, r4
 8007524:	462b      	mov	r3, r5
 8007526:	f7f8 fea7 	bl	8000278 <__aeabi_dsub>
 800752a:	a343      	add	r3, pc, #268	; (adr r3, 8007638 <__ieee754_rem_pio2+0x318>)
 800752c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007530:	4604      	mov	r4, r0
 8007532:	460d      	mov	r5, r1
 8007534:	ec51 0b18 	vmov	r0, r1, d8
 8007538:	f7f9 f856 	bl	80005e8 <__aeabi_dmul>
 800753c:	4622      	mov	r2, r4
 800753e:	462b      	mov	r3, r5
 8007540:	f7f8 fe9a 	bl	8000278 <__aeabi_dsub>
 8007544:	4602      	mov	r2, r0
 8007546:	460b      	mov	r3, r1
 8007548:	4604      	mov	r4, r0
 800754a:	460d      	mov	r5, r1
 800754c:	4640      	mov	r0, r8
 800754e:	4649      	mov	r1, r9
 8007550:	f7f8 fe92 	bl	8000278 <__aeabi_dsub>
 8007554:	9a03      	ldr	r2, [sp, #12]
 8007556:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800755a:	1ad3      	subs	r3, r2, r3
 800755c:	2b31      	cmp	r3, #49	; 0x31
 800755e:	dc24      	bgt.n	80075aa <__ieee754_rem_pio2+0x28a>
 8007560:	e9ca 0100 	strd	r0, r1, [sl]
 8007564:	4646      	mov	r6, r8
 8007566:	464f      	mov	r7, r9
 8007568:	e9da 8900 	ldrd	r8, r9, [sl]
 800756c:	4630      	mov	r0, r6
 800756e:	4642      	mov	r2, r8
 8007570:	464b      	mov	r3, r9
 8007572:	4639      	mov	r1, r7
 8007574:	f7f8 fe80 	bl	8000278 <__aeabi_dsub>
 8007578:	462b      	mov	r3, r5
 800757a:	4622      	mov	r2, r4
 800757c:	f7f8 fe7c 	bl	8000278 <__aeabi_dsub>
 8007580:	9b02      	ldr	r3, [sp, #8]
 8007582:	2b00      	cmp	r3, #0
 8007584:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007588:	f6bf af0a 	bge.w	80073a0 <__ieee754_rem_pio2+0x80>
 800758c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007590:	f8ca 3004 	str.w	r3, [sl, #4]
 8007594:	f8ca 8000 	str.w	r8, [sl]
 8007598:	f8ca 0008 	str.w	r0, [sl, #8]
 800759c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075a0:	f8ca 300c 	str.w	r3, [sl, #12]
 80075a4:	f1cb 0b00 	rsb	fp, fp, #0
 80075a8:	e6fa      	b.n	80073a0 <__ieee754_rem_pio2+0x80>
 80075aa:	a327      	add	r3, pc, #156	; (adr r3, 8007648 <__ieee754_rem_pio2+0x328>)
 80075ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b0:	ec51 0b18 	vmov	r0, r1, d8
 80075b4:	f7f9 f818 	bl	80005e8 <__aeabi_dmul>
 80075b8:	4604      	mov	r4, r0
 80075ba:	460d      	mov	r5, r1
 80075bc:	4602      	mov	r2, r0
 80075be:	460b      	mov	r3, r1
 80075c0:	4640      	mov	r0, r8
 80075c2:	4649      	mov	r1, r9
 80075c4:	f7f8 fe58 	bl	8000278 <__aeabi_dsub>
 80075c8:	4602      	mov	r2, r0
 80075ca:	460b      	mov	r3, r1
 80075cc:	4606      	mov	r6, r0
 80075ce:	460f      	mov	r7, r1
 80075d0:	4640      	mov	r0, r8
 80075d2:	4649      	mov	r1, r9
 80075d4:	f7f8 fe50 	bl	8000278 <__aeabi_dsub>
 80075d8:	4622      	mov	r2, r4
 80075da:	462b      	mov	r3, r5
 80075dc:	f7f8 fe4c 	bl	8000278 <__aeabi_dsub>
 80075e0:	a31b      	add	r3, pc, #108	; (adr r3, 8007650 <__ieee754_rem_pio2+0x330>)
 80075e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e6:	4604      	mov	r4, r0
 80075e8:	460d      	mov	r5, r1
 80075ea:	ec51 0b18 	vmov	r0, r1, d8
 80075ee:	f7f8 fffb 	bl	80005e8 <__aeabi_dmul>
 80075f2:	4622      	mov	r2, r4
 80075f4:	462b      	mov	r3, r5
 80075f6:	f7f8 fe3f 	bl	8000278 <__aeabi_dsub>
 80075fa:	4604      	mov	r4, r0
 80075fc:	460d      	mov	r5, r1
 80075fe:	e75f      	b.n	80074c0 <__ieee754_rem_pio2+0x1a0>
 8007600:	4b1b      	ldr	r3, [pc, #108]	; (8007670 <__ieee754_rem_pio2+0x350>)
 8007602:	4598      	cmp	r8, r3
 8007604:	dd36      	ble.n	8007674 <__ieee754_rem_pio2+0x354>
 8007606:	ee10 2a10 	vmov	r2, s0
 800760a:	462b      	mov	r3, r5
 800760c:	4620      	mov	r0, r4
 800760e:	4629      	mov	r1, r5
 8007610:	f7f8 fe32 	bl	8000278 <__aeabi_dsub>
 8007614:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007618:	e9ca 0100 	strd	r0, r1, [sl]
 800761c:	e694      	b.n	8007348 <__ieee754_rem_pio2+0x28>
 800761e:	bf00      	nop
 8007620:	54400000 	.word	0x54400000
 8007624:	3ff921fb 	.word	0x3ff921fb
 8007628:	1a626331 	.word	0x1a626331
 800762c:	3dd0b461 	.word	0x3dd0b461
 8007630:	1a600000 	.word	0x1a600000
 8007634:	3dd0b461 	.word	0x3dd0b461
 8007638:	2e037073 	.word	0x2e037073
 800763c:	3ba3198a 	.word	0x3ba3198a
 8007640:	6dc9c883 	.word	0x6dc9c883
 8007644:	3fe45f30 	.word	0x3fe45f30
 8007648:	2e000000 	.word	0x2e000000
 800764c:	3ba3198a 	.word	0x3ba3198a
 8007650:	252049c1 	.word	0x252049c1
 8007654:	397b839a 	.word	0x397b839a
 8007658:	3fe921fb 	.word	0x3fe921fb
 800765c:	4002d97b 	.word	0x4002d97b
 8007660:	3ff921fb 	.word	0x3ff921fb
 8007664:	413921fb 	.word	0x413921fb
 8007668:	3fe00000 	.word	0x3fe00000
 800766c:	08008cac 	.word	0x08008cac
 8007670:	7fefffff 	.word	0x7fefffff
 8007674:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007678:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800767c:	ee10 0a10 	vmov	r0, s0
 8007680:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8007684:	ee10 6a10 	vmov	r6, s0
 8007688:	460f      	mov	r7, r1
 800768a:	f7f9 fa47 	bl	8000b1c <__aeabi_d2iz>
 800768e:	f7f8 ff41 	bl	8000514 <__aeabi_i2d>
 8007692:	4602      	mov	r2, r0
 8007694:	460b      	mov	r3, r1
 8007696:	4630      	mov	r0, r6
 8007698:	4639      	mov	r1, r7
 800769a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800769e:	f7f8 fdeb 	bl	8000278 <__aeabi_dsub>
 80076a2:	4b22      	ldr	r3, [pc, #136]	; (800772c <__ieee754_rem_pio2+0x40c>)
 80076a4:	2200      	movs	r2, #0
 80076a6:	f7f8 ff9f 	bl	80005e8 <__aeabi_dmul>
 80076aa:	460f      	mov	r7, r1
 80076ac:	4606      	mov	r6, r0
 80076ae:	f7f9 fa35 	bl	8000b1c <__aeabi_d2iz>
 80076b2:	f7f8 ff2f 	bl	8000514 <__aeabi_i2d>
 80076b6:	4602      	mov	r2, r0
 80076b8:	460b      	mov	r3, r1
 80076ba:	4630      	mov	r0, r6
 80076bc:	4639      	mov	r1, r7
 80076be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80076c2:	f7f8 fdd9 	bl	8000278 <__aeabi_dsub>
 80076c6:	4b19      	ldr	r3, [pc, #100]	; (800772c <__ieee754_rem_pio2+0x40c>)
 80076c8:	2200      	movs	r2, #0
 80076ca:	f7f8 ff8d 	bl	80005e8 <__aeabi_dmul>
 80076ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80076d2:	ad04      	add	r5, sp, #16
 80076d4:	f04f 0803 	mov.w	r8, #3
 80076d8:	46a9      	mov	r9, r5
 80076da:	2600      	movs	r6, #0
 80076dc:	2700      	movs	r7, #0
 80076de:	4632      	mov	r2, r6
 80076e0:	463b      	mov	r3, r7
 80076e2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80076e6:	46c3      	mov	fp, r8
 80076e8:	3d08      	subs	r5, #8
 80076ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80076ee:	f7f9 f9e3 	bl	8000ab8 <__aeabi_dcmpeq>
 80076f2:	2800      	cmp	r0, #0
 80076f4:	d1f3      	bne.n	80076de <__ieee754_rem_pio2+0x3be>
 80076f6:	4b0e      	ldr	r3, [pc, #56]	; (8007730 <__ieee754_rem_pio2+0x410>)
 80076f8:	9301      	str	r3, [sp, #4]
 80076fa:	2302      	movs	r3, #2
 80076fc:	9300      	str	r3, [sp, #0]
 80076fe:	4622      	mov	r2, r4
 8007700:	465b      	mov	r3, fp
 8007702:	4651      	mov	r1, sl
 8007704:	4648      	mov	r0, r9
 8007706:	f000 f8df 	bl	80078c8 <__kernel_rem_pio2>
 800770a:	9b02      	ldr	r3, [sp, #8]
 800770c:	2b00      	cmp	r3, #0
 800770e:	4683      	mov	fp, r0
 8007710:	f6bf ae46 	bge.w	80073a0 <__ieee754_rem_pio2+0x80>
 8007714:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007718:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800771c:	f8ca 3004 	str.w	r3, [sl, #4]
 8007720:	f8da 300c 	ldr.w	r3, [sl, #12]
 8007724:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007728:	e73a      	b.n	80075a0 <__ieee754_rem_pio2+0x280>
 800772a:	bf00      	nop
 800772c:	41700000 	.word	0x41700000
 8007730:	08008d2c 	.word	0x08008d2c
 8007734:	00000000 	.word	0x00000000

08007738 <__kernel_cos>:
 8007738:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800773c:	ec57 6b10 	vmov	r6, r7, d0
 8007740:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007744:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007748:	ed8d 1b00 	vstr	d1, [sp]
 800774c:	da07      	bge.n	800775e <__kernel_cos+0x26>
 800774e:	ee10 0a10 	vmov	r0, s0
 8007752:	4639      	mov	r1, r7
 8007754:	f7f9 f9e2 	bl	8000b1c <__aeabi_d2iz>
 8007758:	2800      	cmp	r0, #0
 800775a:	f000 8088 	beq.w	800786e <__kernel_cos+0x136>
 800775e:	4632      	mov	r2, r6
 8007760:	463b      	mov	r3, r7
 8007762:	4630      	mov	r0, r6
 8007764:	4639      	mov	r1, r7
 8007766:	f7f8 ff3f 	bl	80005e8 <__aeabi_dmul>
 800776a:	4b51      	ldr	r3, [pc, #324]	; (80078b0 <__kernel_cos+0x178>)
 800776c:	2200      	movs	r2, #0
 800776e:	4604      	mov	r4, r0
 8007770:	460d      	mov	r5, r1
 8007772:	f7f8 ff39 	bl	80005e8 <__aeabi_dmul>
 8007776:	a340      	add	r3, pc, #256	; (adr r3, 8007878 <__kernel_cos+0x140>)
 8007778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800777c:	4682      	mov	sl, r0
 800777e:	468b      	mov	fp, r1
 8007780:	4620      	mov	r0, r4
 8007782:	4629      	mov	r1, r5
 8007784:	f7f8 ff30 	bl	80005e8 <__aeabi_dmul>
 8007788:	a33d      	add	r3, pc, #244	; (adr r3, 8007880 <__kernel_cos+0x148>)
 800778a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778e:	f7f8 fd75 	bl	800027c <__adddf3>
 8007792:	4622      	mov	r2, r4
 8007794:	462b      	mov	r3, r5
 8007796:	f7f8 ff27 	bl	80005e8 <__aeabi_dmul>
 800779a:	a33b      	add	r3, pc, #236	; (adr r3, 8007888 <__kernel_cos+0x150>)
 800779c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a0:	f7f8 fd6a 	bl	8000278 <__aeabi_dsub>
 80077a4:	4622      	mov	r2, r4
 80077a6:	462b      	mov	r3, r5
 80077a8:	f7f8 ff1e 	bl	80005e8 <__aeabi_dmul>
 80077ac:	a338      	add	r3, pc, #224	; (adr r3, 8007890 <__kernel_cos+0x158>)
 80077ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b2:	f7f8 fd63 	bl	800027c <__adddf3>
 80077b6:	4622      	mov	r2, r4
 80077b8:	462b      	mov	r3, r5
 80077ba:	f7f8 ff15 	bl	80005e8 <__aeabi_dmul>
 80077be:	a336      	add	r3, pc, #216	; (adr r3, 8007898 <__kernel_cos+0x160>)
 80077c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c4:	f7f8 fd58 	bl	8000278 <__aeabi_dsub>
 80077c8:	4622      	mov	r2, r4
 80077ca:	462b      	mov	r3, r5
 80077cc:	f7f8 ff0c 	bl	80005e8 <__aeabi_dmul>
 80077d0:	a333      	add	r3, pc, #204	; (adr r3, 80078a0 <__kernel_cos+0x168>)
 80077d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d6:	f7f8 fd51 	bl	800027c <__adddf3>
 80077da:	4622      	mov	r2, r4
 80077dc:	462b      	mov	r3, r5
 80077de:	f7f8 ff03 	bl	80005e8 <__aeabi_dmul>
 80077e2:	4622      	mov	r2, r4
 80077e4:	462b      	mov	r3, r5
 80077e6:	f7f8 feff 	bl	80005e8 <__aeabi_dmul>
 80077ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077ee:	4604      	mov	r4, r0
 80077f0:	460d      	mov	r5, r1
 80077f2:	4630      	mov	r0, r6
 80077f4:	4639      	mov	r1, r7
 80077f6:	f7f8 fef7 	bl	80005e8 <__aeabi_dmul>
 80077fa:	460b      	mov	r3, r1
 80077fc:	4602      	mov	r2, r0
 80077fe:	4629      	mov	r1, r5
 8007800:	4620      	mov	r0, r4
 8007802:	f7f8 fd39 	bl	8000278 <__aeabi_dsub>
 8007806:	4b2b      	ldr	r3, [pc, #172]	; (80078b4 <__kernel_cos+0x17c>)
 8007808:	4598      	cmp	r8, r3
 800780a:	4606      	mov	r6, r0
 800780c:	460f      	mov	r7, r1
 800780e:	dc10      	bgt.n	8007832 <__kernel_cos+0xfa>
 8007810:	4602      	mov	r2, r0
 8007812:	460b      	mov	r3, r1
 8007814:	4650      	mov	r0, sl
 8007816:	4659      	mov	r1, fp
 8007818:	f7f8 fd2e 	bl	8000278 <__aeabi_dsub>
 800781c:	460b      	mov	r3, r1
 800781e:	4926      	ldr	r1, [pc, #152]	; (80078b8 <__kernel_cos+0x180>)
 8007820:	4602      	mov	r2, r0
 8007822:	2000      	movs	r0, #0
 8007824:	f7f8 fd28 	bl	8000278 <__aeabi_dsub>
 8007828:	ec41 0b10 	vmov	d0, r0, r1
 800782c:	b003      	add	sp, #12
 800782e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007832:	4b22      	ldr	r3, [pc, #136]	; (80078bc <__kernel_cos+0x184>)
 8007834:	4920      	ldr	r1, [pc, #128]	; (80078b8 <__kernel_cos+0x180>)
 8007836:	4598      	cmp	r8, r3
 8007838:	bfcc      	ite	gt
 800783a:	4d21      	ldrgt	r5, [pc, #132]	; (80078c0 <__kernel_cos+0x188>)
 800783c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007840:	2400      	movs	r4, #0
 8007842:	4622      	mov	r2, r4
 8007844:	462b      	mov	r3, r5
 8007846:	2000      	movs	r0, #0
 8007848:	f7f8 fd16 	bl	8000278 <__aeabi_dsub>
 800784c:	4622      	mov	r2, r4
 800784e:	4680      	mov	r8, r0
 8007850:	4689      	mov	r9, r1
 8007852:	462b      	mov	r3, r5
 8007854:	4650      	mov	r0, sl
 8007856:	4659      	mov	r1, fp
 8007858:	f7f8 fd0e 	bl	8000278 <__aeabi_dsub>
 800785c:	4632      	mov	r2, r6
 800785e:	463b      	mov	r3, r7
 8007860:	f7f8 fd0a 	bl	8000278 <__aeabi_dsub>
 8007864:	4602      	mov	r2, r0
 8007866:	460b      	mov	r3, r1
 8007868:	4640      	mov	r0, r8
 800786a:	4649      	mov	r1, r9
 800786c:	e7da      	b.n	8007824 <__kernel_cos+0xec>
 800786e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80078a8 <__kernel_cos+0x170>
 8007872:	e7db      	b.n	800782c <__kernel_cos+0xf4>
 8007874:	f3af 8000 	nop.w
 8007878:	be8838d4 	.word	0xbe8838d4
 800787c:	bda8fae9 	.word	0xbda8fae9
 8007880:	bdb4b1c4 	.word	0xbdb4b1c4
 8007884:	3e21ee9e 	.word	0x3e21ee9e
 8007888:	809c52ad 	.word	0x809c52ad
 800788c:	3e927e4f 	.word	0x3e927e4f
 8007890:	19cb1590 	.word	0x19cb1590
 8007894:	3efa01a0 	.word	0x3efa01a0
 8007898:	16c15177 	.word	0x16c15177
 800789c:	3f56c16c 	.word	0x3f56c16c
 80078a0:	5555554c 	.word	0x5555554c
 80078a4:	3fa55555 	.word	0x3fa55555
 80078a8:	00000000 	.word	0x00000000
 80078ac:	3ff00000 	.word	0x3ff00000
 80078b0:	3fe00000 	.word	0x3fe00000
 80078b4:	3fd33332 	.word	0x3fd33332
 80078b8:	3ff00000 	.word	0x3ff00000
 80078bc:	3fe90000 	.word	0x3fe90000
 80078c0:	3fd20000 	.word	0x3fd20000
 80078c4:	00000000 	.word	0x00000000

080078c8 <__kernel_rem_pio2>:
 80078c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078cc:	ed2d 8b02 	vpush	{d8}
 80078d0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80078d4:	f112 0f14 	cmn.w	r2, #20
 80078d8:	9308      	str	r3, [sp, #32]
 80078da:	9101      	str	r1, [sp, #4]
 80078dc:	4bc6      	ldr	r3, [pc, #792]	; (8007bf8 <__kernel_rem_pio2+0x330>)
 80078de:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80078e0:	9009      	str	r0, [sp, #36]	; 0x24
 80078e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80078e6:	9304      	str	r3, [sp, #16]
 80078e8:	9b08      	ldr	r3, [sp, #32]
 80078ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80078ee:	bfa8      	it	ge
 80078f0:	1ed4      	subge	r4, r2, #3
 80078f2:	9306      	str	r3, [sp, #24]
 80078f4:	bfb2      	itee	lt
 80078f6:	2400      	movlt	r4, #0
 80078f8:	2318      	movge	r3, #24
 80078fa:	fb94 f4f3 	sdivge	r4, r4, r3
 80078fe:	f06f 0317 	mvn.w	r3, #23
 8007902:	fb04 3303 	mla	r3, r4, r3, r3
 8007906:	eb03 0a02 	add.w	sl, r3, r2
 800790a:	9b04      	ldr	r3, [sp, #16]
 800790c:	9a06      	ldr	r2, [sp, #24]
 800790e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8007be8 <__kernel_rem_pio2+0x320>
 8007912:	eb03 0802 	add.w	r8, r3, r2
 8007916:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007918:	1aa7      	subs	r7, r4, r2
 800791a:	ae20      	add	r6, sp, #128	; 0x80
 800791c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007920:	2500      	movs	r5, #0
 8007922:	4545      	cmp	r5, r8
 8007924:	dd18      	ble.n	8007958 <__kernel_rem_pio2+0x90>
 8007926:	9b08      	ldr	r3, [sp, #32]
 8007928:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800792c:	aa20      	add	r2, sp, #128	; 0x80
 800792e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8007be8 <__kernel_rem_pio2+0x320>
 8007932:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007936:	f1c3 0301 	rsb	r3, r3, #1
 800793a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800793e:	9307      	str	r3, [sp, #28]
 8007940:	9b07      	ldr	r3, [sp, #28]
 8007942:	9a04      	ldr	r2, [sp, #16]
 8007944:	4443      	add	r3, r8
 8007946:	429a      	cmp	r2, r3
 8007948:	db2f      	blt.n	80079aa <__kernel_rem_pio2+0xe2>
 800794a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800794e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007952:	462f      	mov	r7, r5
 8007954:	2600      	movs	r6, #0
 8007956:	e01b      	b.n	8007990 <__kernel_rem_pio2+0xc8>
 8007958:	42ef      	cmn	r7, r5
 800795a:	d407      	bmi.n	800796c <__kernel_rem_pio2+0xa4>
 800795c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007960:	f7f8 fdd8 	bl	8000514 <__aeabi_i2d>
 8007964:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007968:	3501      	adds	r5, #1
 800796a:	e7da      	b.n	8007922 <__kernel_rem_pio2+0x5a>
 800796c:	ec51 0b18 	vmov	r0, r1, d8
 8007970:	e7f8      	b.n	8007964 <__kernel_rem_pio2+0x9c>
 8007972:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007976:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800797a:	f7f8 fe35 	bl	80005e8 <__aeabi_dmul>
 800797e:	4602      	mov	r2, r0
 8007980:	460b      	mov	r3, r1
 8007982:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007986:	f7f8 fc79 	bl	800027c <__adddf3>
 800798a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800798e:	3601      	adds	r6, #1
 8007990:	9b06      	ldr	r3, [sp, #24]
 8007992:	429e      	cmp	r6, r3
 8007994:	f1a7 0708 	sub.w	r7, r7, #8
 8007998:	ddeb      	ble.n	8007972 <__kernel_rem_pio2+0xaa>
 800799a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800799e:	3508      	adds	r5, #8
 80079a0:	ecab 7b02 	vstmia	fp!, {d7}
 80079a4:	f108 0801 	add.w	r8, r8, #1
 80079a8:	e7ca      	b.n	8007940 <__kernel_rem_pio2+0x78>
 80079aa:	9b04      	ldr	r3, [sp, #16]
 80079ac:	aa0c      	add	r2, sp, #48	; 0x30
 80079ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80079b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80079b4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80079b6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80079ba:	9c04      	ldr	r4, [sp, #16]
 80079bc:	930a      	str	r3, [sp, #40]	; 0x28
 80079be:	ab98      	add	r3, sp, #608	; 0x260
 80079c0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80079c4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80079c8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80079cc:	f8cd b008 	str.w	fp, [sp, #8]
 80079d0:	4625      	mov	r5, r4
 80079d2:	2d00      	cmp	r5, #0
 80079d4:	dc78      	bgt.n	8007ac8 <__kernel_rem_pio2+0x200>
 80079d6:	ec47 6b10 	vmov	d0, r6, r7
 80079da:	4650      	mov	r0, sl
 80079dc:	f000 fbfc 	bl	80081d8 <scalbn>
 80079e0:	ec57 6b10 	vmov	r6, r7, d0
 80079e4:	2200      	movs	r2, #0
 80079e6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80079ea:	ee10 0a10 	vmov	r0, s0
 80079ee:	4639      	mov	r1, r7
 80079f0:	f7f8 fdfa 	bl	80005e8 <__aeabi_dmul>
 80079f4:	ec41 0b10 	vmov	d0, r0, r1
 80079f8:	f000 fb6e 	bl	80080d8 <floor>
 80079fc:	4b7f      	ldr	r3, [pc, #508]	; (8007bfc <__kernel_rem_pio2+0x334>)
 80079fe:	ec51 0b10 	vmov	r0, r1, d0
 8007a02:	2200      	movs	r2, #0
 8007a04:	f7f8 fdf0 	bl	80005e8 <__aeabi_dmul>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	4630      	mov	r0, r6
 8007a0e:	4639      	mov	r1, r7
 8007a10:	f7f8 fc32 	bl	8000278 <__aeabi_dsub>
 8007a14:	460f      	mov	r7, r1
 8007a16:	4606      	mov	r6, r0
 8007a18:	f7f9 f880 	bl	8000b1c <__aeabi_d2iz>
 8007a1c:	9007      	str	r0, [sp, #28]
 8007a1e:	f7f8 fd79 	bl	8000514 <__aeabi_i2d>
 8007a22:	4602      	mov	r2, r0
 8007a24:	460b      	mov	r3, r1
 8007a26:	4630      	mov	r0, r6
 8007a28:	4639      	mov	r1, r7
 8007a2a:	f7f8 fc25 	bl	8000278 <__aeabi_dsub>
 8007a2e:	f1ba 0f00 	cmp.w	sl, #0
 8007a32:	4606      	mov	r6, r0
 8007a34:	460f      	mov	r7, r1
 8007a36:	dd70      	ble.n	8007b1a <__kernel_rem_pio2+0x252>
 8007a38:	1e62      	subs	r2, r4, #1
 8007a3a:	ab0c      	add	r3, sp, #48	; 0x30
 8007a3c:	9d07      	ldr	r5, [sp, #28]
 8007a3e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007a42:	f1ca 0118 	rsb	r1, sl, #24
 8007a46:	fa40 f301 	asr.w	r3, r0, r1
 8007a4a:	441d      	add	r5, r3
 8007a4c:	408b      	lsls	r3, r1
 8007a4e:	1ac0      	subs	r0, r0, r3
 8007a50:	ab0c      	add	r3, sp, #48	; 0x30
 8007a52:	9507      	str	r5, [sp, #28]
 8007a54:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007a58:	f1ca 0317 	rsb	r3, sl, #23
 8007a5c:	fa40 f303 	asr.w	r3, r0, r3
 8007a60:	9302      	str	r3, [sp, #8]
 8007a62:	9b02      	ldr	r3, [sp, #8]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	dd66      	ble.n	8007b36 <__kernel_rem_pio2+0x26e>
 8007a68:	9b07      	ldr	r3, [sp, #28]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	9307      	str	r3, [sp, #28]
 8007a70:	4615      	mov	r5, r2
 8007a72:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007a76:	4294      	cmp	r4, r2
 8007a78:	f300 8099 	bgt.w	8007bae <__kernel_rem_pio2+0x2e6>
 8007a7c:	f1ba 0f00 	cmp.w	sl, #0
 8007a80:	dd07      	ble.n	8007a92 <__kernel_rem_pio2+0x1ca>
 8007a82:	f1ba 0f01 	cmp.w	sl, #1
 8007a86:	f000 80a5 	beq.w	8007bd4 <__kernel_rem_pio2+0x30c>
 8007a8a:	f1ba 0f02 	cmp.w	sl, #2
 8007a8e:	f000 80c1 	beq.w	8007c14 <__kernel_rem_pio2+0x34c>
 8007a92:	9b02      	ldr	r3, [sp, #8]
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	d14e      	bne.n	8007b36 <__kernel_rem_pio2+0x26e>
 8007a98:	4632      	mov	r2, r6
 8007a9a:	463b      	mov	r3, r7
 8007a9c:	4958      	ldr	r1, [pc, #352]	; (8007c00 <__kernel_rem_pio2+0x338>)
 8007a9e:	2000      	movs	r0, #0
 8007aa0:	f7f8 fbea 	bl	8000278 <__aeabi_dsub>
 8007aa4:	4606      	mov	r6, r0
 8007aa6:	460f      	mov	r7, r1
 8007aa8:	2d00      	cmp	r5, #0
 8007aaa:	d044      	beq.n	8007b36 <__kernel_rem_pio2+0x26e>
 8007aac:	4650      	mov	r0, sl
 8007aae:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8007bf0 <__kernel_rem_pio2+0x328>
 8007ab2:	f000 fb91 	bl	80081d8 <scalbn>
 8007ab6:	4630      	mov	r0, r6
 8007ab8:	4639      	mov	r1, r7
 8007aba:	ec53 2b10 	vmov	r2, r3, d0
 8007abe:	f7f8 fbdb 	bl	8000278 <__aeabi_dsub>
 8007ac2:	4606      	mov	r6, r0
 8007ac4:	460f      	mov	r7, r1
 8007ac6:	e036      	b.n	8007b36 <__kernel_rem_pio2+0x26e>
 8007ac8:	4b4e      	ldr	r3, [pc, #312]	; (8007c04 <__kernel_rem_pio2+0x33c>)
 8007aca:	2200      	movs	r2, #0
 8007acc:	4630      	mov	r0, r6
 8007ace:	4639      	mov	r1, r7
 8007ad0:	f7f8 fd8a 	bl	80005e8 <__aeabi_dmul>
 8007ad4:	f7f9 f822 	bl	8000b1c <__aeabi_d2iz>
 8007ad8:	f7f8 fd1c 	bl	8000514 <__aeabi_i2d>
 8007adc:	4b4a      	ldr	r3, [pc, #296]	; (8007c08 <__kernel_rem_pio2+0x340>)
 8007ade:	2200      	movs	r2, #0
 8007ae0:	4680      	mov	r8, r0
 8007ae2:	4689      	mov	r9, r1
 8007ae4:	f7f8 fd80 	bl	80005e8 <__aeabi_dmul>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	460b      	mov	r3, r1
 8007aec:	4630      	mov	r0, r6
 8007aee:	4639      	mov	r1, r7
 8007af0:	f7f8 fbc2 	bl	8000278 <__aeabi_dsub>
 8007af4:	f7f9 f812 	bl	8000b1c <__aeabi_d2iz>
 8007af8:	9b02      	ldr	r3, [sp, #8]
 8007afa:	f843 0b04 	str.w	r0, [r3], #4
 8007afe:	3d01      	subs	r5, #1
 8007b00:	9302      	str	r3, [sp, #8]
 8007b02:	ab70      	add	r3, sp, #448	; 0x1c0
 8007b04:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0c:	4640      	mov	r0, r8
 8007b0e:	4649      	mov	r1, r9
 8007b10:	f7f8 fbb4 	bl	800027c <__adddf3>
 8007b14:	4606      	mov	r6, r0
 8007b16:	460f      	mov	r7, r1
 8007b18:	e75b      	b.n	80079d2 <__kernel_rem_pio2+0x10a>
 8007b1a:	d105      	bne.n	8007b28 <__kernel_rem_pio2+0x260>
 8007b1c:	1e63      	subs	r3, r4, #1
 8007b1e:	aa0c      	add	r2, sp, #48	; 0x30
 8007b20:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007b24:	15c3      	asrs	r3, r0, #23
 8007b26:	e79b      	b.n	8007a60 <__kernel_rem_pio2+0x198>
 8007b28:	4b38      	ldr	r3, [pc, #224]	; (8007c0c <__kernel_rem_pio2+0x344>)
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f7f8 ffe2 	bl	8000af4 <__aeabi_dcmpge>
 8007b30:	2800      	cmp	r0, #0
 8007b32:	d139      	bne.n	8007ba8 <__kernel_rem_pio2+0x2e0>
 8007b34:	9002      	str	r0, [sp, #8]
 8007b36:	2200      	movs	r2, #0
 8007b38:	2300      	movs	r3, #0
 8007b3a:	4630      	mov	r0, r6
 8007b3c:	4639      	mov	r1, r7
 8007b3e:	f7f8 ffbb 	bl	8000ab8 <__aeabi_dcmpeq>
 8007b42:	2800      	cmp	r0, #0
 8007b44:	f000 80b4 	beq.w	8007cb0 <__kernel_rem_pio2+0x3e8>
 8007b48:	f104 3bff 	add.w	fp, r4, #4294967295
 8007b4c:	465b      	mov	r3, fp
 8007b4e:	2200      	movs	r2, #0
 8007b50:	9904      	ldr	r1, [sp, #16]
 8007b52:	428b      	cmp	r3, r1
 8007b54:	da65      	bge.n	8007c22 <__kernel_rem_pio2+0x35a>
 8007b56:	2a00      	cmp	r2, #0
 8007b58:	d07b      	beq.n	8007c52 <__kernel_rem_pio2+0x38a>
 8007b5a:	ab0c      	add	r3, sp, #48	; 0x30
 8007b5c:	f1aa 0a18 	sub.w	sl, sl, #24
 8007b60:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f000 80a0 	beq.w	8007caa <__kernel_rem_pio2+0x3e2>
 8007b6a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8007bf0 <__kernel_rem_pio2+0x328>
 8007b6e:	4650      	mov	r0, sl
 8007b70:	f000 fb32 	bl	80081d8 <scalbn>
 8007b74:	4f23      	ldr	r7, [pc, #140]	; (8007c04 <__kernel_rem_pio2+0x33c>)
 8007b76:	ec55 4b10 	vmov	r4, r5, d0
 8007b7a:	46d8      	mov	r8, fp
 8007b7c:	2600      	movs	r6, #0
 8007b7e:	f1b8 0f00 	cmp.w	r8, #0
 8007b82:	f280 80cf 	bge.w	8007d24 <__kernel_rem_pio2+0x45c>
 8007b86:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8007be8 <__kernel_rem_pio2+0x320>
 8007b8a:	465f      	mov	r7, fp
 8007b8c:	f04f 0800 	mov.w	r8, #0
 8007b90:	2f00      	cmp	r7, #0
 8007b92:	f2c0 80fd 	blt.w	8007d90 <__kernel_rem_pio2+0x4c8>
 8007b96:	ab70      	add	r3, sp, #448	; 0x1c0
 8007b98:	f8df a074 	ldr.w	sl, [pc, #116]	; 8007c10 <__kernel_rem_pio2+0x348>
 8007b9c:	ec55 4b18 	vmov	r4, r5, d8
 8007ba0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8007ba4:	2600      	movs	r6, #0
 8007ba6:	e0e5      	b.n	8007d74 <__kernel_rem_pio2+0x4ac>
 8007ba8:	2302      	movs	r3, #2
 8007baa:	9302      	str	r3, [sp, #8]
 8007bac:	e75c      	b.n	8007a68 <__kernel_rem_pio2+0x1a0>
 8007bae:	f8db 3000 	ldr.w	r3, [fp]
 8007bb2:	b955      	cbnz	r5, 8007bca <__kernel_rem_pio2+0x302>
 8007bb4:	b123      	cbz	r3, 8007bc0 <__kernel_rem_pio2+0x2f8>
 8007bb6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007bba:	f8cb 3000 	str.w	r3, [fp]
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	3201      	adds	r2, #1
 8007bc2:	f10b 0b04 	add.w	fp, fp, #4
 8007bc6:	461d      	mov	r5, r3
 8007bc8:	e755      	b.n	8007a76 <__kernel_rem_pio2+0x1ae>
 8007bca:	1acb      	subs	r3, r1, r3
 8007bcc:	f8cb 3000 	str.w	r3, [fp]
 8007bd0:	462b      	mov	r3, r5
 8007bd2:	e7f5      	b.n	8007bc0 <__kernel_rem_pio2+0x2f8>
 8007bd4:	1e62      	subs	r2, r4, #1
 8007bd6:	ab0c      	add	r3, sp, #48	; 0x30
 8007bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bdc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007be0:	a90c      	add	r1, sp, #48	; 0x30
 8007be2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007be6:	e754      	b.n	8007a92 <__kernel_rem_pio2+0x1ca>
	...
 8007bf4:	3ff00000 	.word	0x3ff00000
 8007bf8:	08008e78 	.word	0x08008e78
 8007bfc:	40200000 	.word	0x40200000
 8007c00:	3ff00000 	.word	0x3ff00000
 8007c04:	3e700000 	.word	0x3e700000
 8007c08:	41700000 	.word	0x41700000
 8007c0c:	3fe00000 	.word	0x3fe00000
 8007c10:	08008e38 	.word	0x08008e38
 8007c14:	1e62      	subs	r2, r4, #1
 8007c16:	ab0c      	add	r3, sp, #48	; 0x30
 8007c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c1c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007c20:	e7de      	b.n	8007be0 <__kernel_rem_pio2+0x318>
 8007c22:	a90c      	add	r1, sp, #48	; 0x30
 8007c24:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007c28:	3b01      	subs	r3, #1
 8007c2a:	430a      	orrs	r2, r1
 8007c2c:	e790      	b.n	8007b50 <__kernel_rem_pio2+0x288>
 8007c2e:	3301      	adds	r3, #1
 8007c30:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007c34:	2900      	cmp	r1, #0
 8007c36:	d0fa      	beq.n	8007c2e <__kernel_rem_pio2+0x366>
 8007c38:	9a08      	ldr	r2, [sp, #32]
 8007c3a:	18e3      	adds	r3, r4, r3
 8007c3c:	18a6      	adds	r6, r4, r2
 8007c3e:	aa20      	add	r2, sp, #128	; 0x80
 8007c40:	1c65      	adds	r5, r4, #1
 8007c42:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8007c46:	9302      	str	r3, [sp, #8]
 8007c48:	9b02      	ldr	r3, [sp, #8]
 8007c4a:	42ab      	cmp	r3, r5
 8007c4c:	da04      	bge.n	8007c58 <__kernel_rem_pio2+0x390>
 8007c4e:	461c      	mov	r4, r3
 8007c50:	e6b5      	b.n	80079be <__kernel_rem_pio2+0xf6>
 8007c52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c54:	2301      	movs	r3, #1
 8007c56:	e7eb      	b.n	8007c30 <__kernel_rem_pio2+0x368>
 8007c58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c5e:	f7f8 fc59 	bl	8000514 <__aeabi_i2d>
 8007c62:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c68:	46b3      	mov	fp, r6
 8007c6a:	461c      	mov	r4, r3
 8007c6c:	2700      	movs	r7, #0
 8007c6e:	f04f 0800 	mov.w	r8, #0
 8007c72:	f04f 0900 	mov.w	r9, #0
 8007c76:	9b06      	ldr	r3, [sp, #24]
 8007c78:	429f      	cmp	r7, r3
 8007c7a:	dd06      	ble.n	8007c8a <__kernel_rem_pio2+0x3c2>
 8007c7c:	ab70      	add	r3, sp, #448	; 0x1c0
 8007c7e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007c82:	e9c3 8900 	strd	r8, r9, [r3]
 8007c86:	3501      	adds	r5, #1
 8007c88:	e7de      	b.n	8007c48 <__kernel_rem_pio2+0x380>
 8007c8a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007c8e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007c92:	f7f8 fca9 	bl	80005e8 <__aeabi_dmul>
 8007c96:	4602      	mov	r2, r0
 8007c98:	460b      	mov	r3, r1
 8007c9a:	4640      	mov	r0, r8
 8007c9c:	4649      	mov	r1, r9
 8007c9e:	f7f8 faed 	bl	800027c <__adddf3>
 8007ca2:	3701      	adds	r7, #1
 8007ca4:	4680      	mov	r8, r0
 8007ca6:	4689      	mov	r9, r1
 8007ca8:	e7e5      	b.n	8007c76 <__kernel_rem_pio2+0x3ae>
 8007caa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007cae:	e754      	b.n	8007b5a <__kernel_rem_pio2+0x292>
 8007cb0:	ec47 6b10 	vmov	d0, r6, r7
 8007cb4:	f1ca 0000 	rsb	r0, sl, #0
 8007cb8:	f000 fa8e 	bl	80081d8 <scalbn>
 8007cbc:	ec57 6b10 	vmov	r6, r7, d0
 8007cc0:	4b9f      	ldr	r3, [pc, #636]	; (8007f40 <__kernel_rem_pio2+0x678>)
 8007cc2:	ee10 0a10 	vmov	r0, s0
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	4639      	mov	r1, r7
 8007cca:	f7f8 ff13 	bl	8000af4 <__aeabi_dcmpge>
 8007cce:	b300      	cbz	r0, 8007d12 <__kernel_rem_pio2+0x44a>
 8007cd0:	4b9c      	ldr	r3, [pc, #624]	; (8007f44 <__kernel_rem_pio2+0x67c>)
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	4630      	mov	r0, r6
 8007cd6:	4639      	mov	r1, r7
 8007cd8:	f7f8 fc86 	bl	80005e8 <__aeabi_dmul>
 8007cdc:	f7f8 ff1e 	bl	8000b1c <__aeabi_d2iz>
 8007ce0:	4605      	mov	r5, r0
 8007ce2:	f7f8 fc17 	bl	8000514 <__aeabi_i2d>
 8007ce6:	4b96      	ldr	r3, [pc, #600]	; (8007f40 <__kernel_rem_pio2+0x678>)
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f7f8 fc7d 	bl	80005e8 <__aeabi_dmul>
 8007cee:	460b      	mov	r3, r1
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	4639      	mov	r1, r7
 8007cf4:	4630      	mov	r0, r6
 8007cf6:	f7f8 fabf 	bl	8000278 <__aeabi_dsub>
 8007cfa:	f7f8 ff0f 	bl	8000b1c <__aeabi_d2iz>
 8007cfe:	f104 0b01 	add.w	fp, r4, #1
 8007d02:	ab0c      	add	r3, sp, #48	; 0x30
 8007d04:	f10a 0a18 	add.w	sl, sl, #24
 8007d08:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007d0c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8007d10:	e72b      	b.n	8007b6a <__kernel_rem_pio2+0x2a2>
 8007d12:	4630      	mov	r0, r6
 8007d14:	4639      	mov	r1, r7
 8007d16:	f7f8 ff01 	bl	8000b1c <__aeabi_d2iz>
 8007d1a:	ab0c      	add	r3, sp, #48	; 0x30
 8007d1c:	46a3      	mov	fp, r4
 8007d1e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007d22:	e722      	b.n	8007b6a <__kernel_rem_pio2+0x2a2>
 8007d24:	ab70      	add	r3, sp, #448	; 0x1c0
 8007d26:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8007d2a:	ab0c      	add	r3, sp, #48	; 0x30
 8007d2c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007d30:	f7f8 fbf0 	bl	8000514 <__aeabi_i2d>
 8007d34:	4622      	mov	r2, r4
 8007d36:	462b      	mov	r3, r5
 8007d38:	f7f8 fc56 	bl	80005e8 <__aeabi_dmul>
 8007d3c:	4632      	mov	r2, r6
 8007d3e:	e9c9 0100 	strd	r0, r1, [r9]
 8007d42:	463b      	mov	r3, r7
 8007d44:	4620      	mov	r0, r4
 8007d46:	4629      	mov	r1, r5
 8007d48:	f7f8 fc4e 	bl	80005e8 <__aeabi_dmul>
 8007d4c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007d50:	4604      	mov	r4, r0
 8007d52:	460d      	mov	r5, r1
 8007d54:	e713      	b.n	8007b7e <__kernel_rem_pio2+0x2b6>
 8007d56:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8007d5a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8007d5e:	f7f8 fc43 	bl	80005e8 <__aeabi_dmul>
 8007d62:	4602      	mov	r2, r0
 8007d64:	460b      	mov	r3, r1
 8007d66:	4620      	mov	r0, r4
 8007d68:	4629      	mov	r1, r5
 8007d6a:	f7f8 fa87 	bl	800027c <__adddf3>
 8007d6e:	3601      	adds	r6, #1
 8007d70:	4604      	mov	r4, r0
 8007d72:	460d      	mov	r5, r1
 8007d74:	9b04      	ldr	r3, [sp, #16]
 8007d76:	429e      	cmp	r6, r3
 8007d78:	dc01      	bgt.n	8007d7e <__kernel_rem_pio2+0x4b6>
 8007d7a:	45b0      	cmp	r8, r6
 8007d7c:	daeb      	bge.n	8007d56 <__kernel_rem_pio2+0x48e>
 8007d7e:	ab48      	add	r3, sp, #288	; 0x120
 8007d80:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007d84:	e9c3 4500 	strd	r4, r5, [r3]
 8007d88:	3f01      	subs	r7, #1
 8007d8a:	f108 0801 	add.w	r8, r8, #1
 8007d8e:	e6ff      	b.n	8007b90 <__kernel_rem_pio2+0x2c8>
 8007d90:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007d92:	2b02      	cmp	r3, #2
 8007d94:	dc0b      	bgt.n	8007dae <__kernel_rem_pio2+0x4e6>
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	dc6e      	bgt.n	8007e78 <__kernel_rem_pio2+0x5b0>
 8007d9a:	d045      	beq.n	8007e28 <__kernel_rem_pio2+0x560>
 8007d9c:	9b07      	ldr	r3, [sp, #28]
 8007d9e:	f003 0007 	and.w	r0, r3, #7
 8007da2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8007da6:	ecbd 8b02 	vpop	{d8}
 8007daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dae:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007db0:	2b03      	cmp	r3, #3
 8007db2:	d1f3      	bne.n	8007d9c <__kernel_rem_pio2+0x4d4>
 8007db4:	ab48      	add	r3, sp, #288	; 0x120
 8007db6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8007dba:	46d0      	mov	r8, sl
 8007dbc:	46d9      	mov	r9, fp
 8007dbe:	f1b9 0f00 	cmp.w	r9, #0
 8007dc2:	f1a8 0808 	sub.w	r8, r8, #8
 8007dc6:	dc64      	bgt.n	8007e92 <__kernel_rem_pio2+0x5ca>
 8007dc8:	465c      	mov	r4, fp
 8007dca:	2c01      	cmp	r4, #1
 8007dcc:	f1aa 0a08 	sub.w	sl, sl, #8
 8007dd0:	dc7e      	bgt.n	8007ed0 <__kernel_rem_pio2+0x608>
 8007dd2:	2000      	movs	r0, #0
 8007dd4:	2100      	movs	r1, #0
 8007dd6:	f1bb 0f01 	cmp.w	fp, #1
 8007dda:	f300 8097 	bgt.w	8007f0c <__kernel_rem_pio2+0x644>
 8007dde:	9b02      	ldr	r3, [sp, #8]
 8007de0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8007de4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	f040 8099 	bne.w	8007f20 <__kernel_rem_pio2+0x658>
 8007dee:	9b01      	ldr	r3, [sp, #4]
 8007df0:	e9c3 5600 	strd	r5, r6, [r3]
 8007df4:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8007df8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007dfc:	e7ce      	b.n	8007d9c <__kernel_rem_pio2+0x4d4>
 8007dfe:	ab48      	add	r3, sp, #288	; 0x120
 8007e00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e08:	f7f8 fa38 	bl	800027c <__adddf3>
 8007e0c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007e10:	f1bb 0f00 	cmp.w	fp, #0
 8007e14:	daf3      	bge.n	8007dfe <__kernel_rem_pio2+0x536>
 8007e16:	9b02      	ldr	r3, [sp, #8]
 8007e18:	b113      	cbz	r3, 8007e20 <__kernel_rem_pio2+0x558>
 8007e1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e1e:	4619      	mov	r1, r3
 8007e20:	9b01      	ldr	r3, [sp, #4]
 8007e22:	e9c3 0100 	strd	r0, r1, [r3]
 8007e26:	e7b9      	b.n	8007d9c <__kernel_rem_pio2+0x4d4>
 8007e28:	2000      	movs	r0, #0
 8007e2a:	2100      	movs	r1, #0
 8007e2c:	e7f0      	b.n	8007e10 <__kernel_rem_pio2+0x548>
 8007e2e:	ab48      	add	r3, sp, #288	; 0x120
 8007e30:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e38:	f7f8 fa20 	bl	800027c <__adddf3>
 8007e3c:	3c01      	subs	r4, #1
 8007e3e:	2c00      	cmp	r4, #0
 8007e40:	daf5      	bge.n	8007e2e <__kernel_rem_pio2+0x566>
 8007e42:	9b02      	ldr	r3, [sp, #8]
 8007e44:	b1e3      	cbz	r3, 8007e80 <__kernel_rem_pio2+0x5b8>
 8007e46:	4602      	mov	r2, r0
 8007e48:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e4c:	9c01      	ldr	r4, [sp, #4]
 8007e4e:	e9c4 2300 	strd	r2, r3, [r4]
 8007e52:	4602      	mov	r2, r0
 8007e54:	460b      	mov	r3, r1
 8007e56:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8007e5a:	f7f8 fa0d 	bl	8000278 <__aeabi_dsub>
 8007e5e:	ad4a      	add	r5, sp, #296	; 0x128
 8007e60:	2401      	movs	r4, #1
 8007e62:	45a3      	cmp	fp, r4
 8007e64:	da0f      	bge.n	8007e86 <__kernel_rem_pio2+0x5be>
 8007e66:	9b02      	ldr	r3, [sp, #8]
 8007e68:	b113      	cbz	r3, 8007e70 <__kernel_rem_pio2+0x5a8>
 8007e6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e6e:	4619      	mov	r1, r3
 8007e70:	9b01      	ldr	r3, [sp, #4]
 8007e72:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007e76:	e791      	b.n	8007d9c <__kernel_rem_pio2+0x4d4>
 8007e78:	465c      	mov	r4, fp
 8007e7a:	2000      	movs	r0, #0
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	e7de      	b.n	8007e3e <__kernel_rem_pio2+0x576>
 8007e80:	4602      	mov	r2, r0
 8007e82:	460b      	mov	r3, r1
 8007e84:	e7e2      	b.n	8007e4c <__kernel_rem_pio2+0x584>
 8007e86:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8007e8a:	f7f8 f9f7 	bl	800027c <__adddf3>
 8007e8e:	3401      	adds	r4, #1
 8007e90:	e7e7      	b.n	8007e62 <__kernel_rem_pio2+0x59a>
 8007e92:	e9d8 4500 	ldrd	r4, r5, [r8]
 8007e96:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	4632      	mov	r2, r6
 8007e9e:	463b      	mov	r3, r7
 8007ea0:	4629      	mov	r1, r5
 8007ea2:	f7f8 f9eb 	bl	800027c <__adddf3>
 8007ea6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007eaa:	4602      	mov	r2, r0
 8007eac:	460b      	mov	r3, r1
 8007eae:	4620      	mov	r0, r4
 8007eb0:	4629      	mov	r1, r5
 8007eb2:	f7f8 f9e1 	bl	8000278 <__aeabi_dsub>
 8007eb6:	4632      	mov	r2, r6
 8007eb8:	463b      	mov	r3, r7
 8007eba:	f7f8 f9df 	bl	800027c <__adddf3>
 8007ebe:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007ec2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8007ec6:	ed88 7b00 	vstr	d7, [r8]
 8007eca:	f109 39ff 	add.w	r9, r9, #4294967295
 8007ece:	e776      	b.n	8007dbe <__kernel_rem_pio2+0x4f6>
 8007ed0:	e9da 8900 	ldrd	r8, r9, [sl]
 8007ed4:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007ed8:	4640      	mov	r0, r8
 8007eda:	4632      	mov	r2, r6
 8007edc:	463b      	mov	r3, r7
 8007ede:	4649      	mov	r1, r9
 8007ee0:	f7f8 f9cc 	bl	800027c <__adddf3>
 8007ee4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ee8:	4602      	mov	r2, r0
 8007eea:	460b      	mov	r3, r1
 8007eec:	4640      	mov	r0, r8
 8007eee:	4649      	mov	r1, r9
 8007ef0:	f7f8 f9c2 	bl	8000278 <__aeabi_dsub>
 8007ef4:	4632      	mov	r2, r6
 8007ef6:	463b      	mov	r3, r7
 8007ef8:	f7f8 f9c0 	bl	800027c <__adddf3>
 8007efc:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007f00:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007f04:	ed8a 7b00 	vstr	d7, [sl]
 8007f08:	3c01      	subs	r4, #1
 8007f0a:	e75e      	b.n	8007dca <__kernel_rem_pio2+0x502>
 8007f0c:	ab48      	add	r3, sp, #288	; 0x120
 8007f0e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f16:	f7f8 f9b1 	bl	800027c <__adddf3>
 8007f1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007f1e:	e75a      	b.n	8007dd6 <__kernel_rem_pio2+0x50e>
 8007f20:	9b01      	ldr	r3, [sp, #4]
 8007f22:	9a01      	ldr	r2, [sp, #4]
 8007f24:	601d      	str	r5, [r3, #0]
 8007f26:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8007f2a:	605c      	str	r4, [r3, #4]
 8007f2c:	609f      	str	r7, [r3, #8]
 8007f2e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8007f32:	60d3      	str	r3, [r2, #12]
 8007f34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f38:	6110      	str	r0, [r2, #16]
 8007f3a:	6153      	str	r3, [r2, #20]
 8007f3c:	e72e      	b.n	8007d9c <__kernel_rem_pio2+0x4d4>
 8007f3e:	bf00      	nop
 8007f40:	41700000 	.word	0x41700000
 8007f44:	3e700000 	.word	0x3e700000

08007f48 <__kernel_sin>:
 8007f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f4c:	ed2d 8b04 	vpush	{d8-d9}
 8007f50:	eeb0 8a41 	vmov.f32	s16, s2
 8007f54:	eef0 8a61 	vmov.f32	s17, s3
 8007f58:	ec55 4b10 	vmov	r4, r5, d0
 8007f5c:	b083      	sub	sp, #12
 8007f5e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007f62:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007f66:	9001      	str	r0, [sp, #4]
 8007f68:	da06      	bge.n	8007f78 <__kernel_sin+0x30>
 8007f6a:	ee10 0a10 	vmov	r0, s0
 8007f6e:	4629      	mov	r1, r5
 8007f70:	f7f8 fdd4 	bl	8000b1c <__aeabi_d2iz>
 8007f74:	2800      	cmp	r0, #0
 8007f76:	d051      	beq.n	800801c <__kernel_sin+0xd4>
 8007f78:	4622      	mov	r2, r4
 8007f7a:	462b      	mov	r3, r5
 8007f7c:	4620      	mov	r0, r4
 8007f7e:	4629      	mov	r1, r5
 8007f80:	f7f8 fb32 	bl	80005e8 <__aeabi_dmul>
 8007f84:	4682      	mov	sl, r0
 8007f86:	468b      	mov	fp, r1
 8007f88:	4602      	mov	r2, r0
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	4620      	mov	r0, r4
 8007f8e:	4629      	mov	r1, r5
 8007f90:	f7f8 fb2a 	bl	80005e8 <__aeabi_dmul>
 8007f94:	a341      	add	r3, pc, #260	; (adr r3, 800809c <__kernel_sin+0x154>)
 8007f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9a:	4680      	mov	r8, r0
 8007f9c:	4689      	mov	r9, r1
 8007f9e:	4650      	mov	r0, sl
 8007fa0:	4659      	mov	r1, fp
 8007fa2:	f7f8 fb21 	bl	80005e8 <__aeabi_dmul>
 8007fa6:	a33f      	add	r3, pc, #252	; (adr r3, 80080a4 <__kernel_sin+0x15c>)
 8007fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fac:	f7f8 f964 	bl	8000278 <__aeabi_dsub>
 8007fb0:	4652      	mov	r2, sl
 8007fb2:	465b      	mov	r3, fp
 8007fb4:	f7f8 fb18 	bl	80005e8 <__aeabi_dmul>
 8007fb8:	a33c      	add	r3, pc, #240	; (adr r3, 80080ac <__kernel_sin+0x164>)
 8007fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fbe:	f7f8 f95d 	bl	800027c <__adddf3>
 8007fc2:	4652      	mov	r2, sl
 8007fc4:	465b      	mov	r3, fp
 8007fc6:	f7f8 fb0f 	bl	80005e8 <__aeabi_dmul>
 8007fca:	a33a      	add	r3, pc, #232	; (adr r3, 80080b4 <__kernel_sin+0x16c>)
 8007fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd0:	f7f8 f952 	bl	8000278 <__aeabi_dsub>
 8007fd4:	4652      	mov	r2, sl
 8007fd6:	465b      	mov	r3, fp
 8007fd8:	f7f8 fb06 	bl	80005e8 <__aeabi_dmul>
 8007fdc:	a337      	add	r3, pc, #220	; (adr r3, 80080bc <__kernel_sin+0x174>)
 8007fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe2:	f7f8 f94b 	bl	800027c <__adddf3>
 8007fe6:	9b01      	ldr	r3, [sp, #4]
 8007fe8:	4606      	mov	r6, r0
 8007fea:	460f      	mov	r7, r1
 8007fec:	b9eb      	cbnz	r3, 800802a <__kernel_sin+0xe2>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	4650      	mov	r0, sl
 8007ff4:	4659      	mov	r1, fp
 8007ff6:	f7f8 faf7 	bl	80005e8 <__aeabi_dmul>
 8007ffa:	a325      	add	r3, pc, #148	; (adr r3, 8008090 <__kernel_sin+0x148>)
 8007ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008000:	f7f8 f93a 	bl	8000278 <__aeabi_dsub>
 8008004:	4642      	mov	r2, r8
 8008006:	464b      	mov	r3, r9
 8008008:	f7f8 faee 	bl	80005e8 <__aeabi_dmul>
 800800c:	4602      	mov	r2, r0
 800800e:	460b      	mov	r3, r1
 8008010:	4620      	mov	r0, r4
 8008012:	4629      	mov	r1, r5
 8008014:	f7f8 f932 	bl	800027c <__adddf3>
 8008018:	4604      	mov	r4, r0
 800801a:	460d      	mov	r5, r1
 800801c:	ec45 4b10 	vmov	d0, r4, r5
 8008020:	b003      	add	sp, #12
 8008022:	ecbd 8b04 	vpop	{d8-d9}
 8008026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800802a:	4b1b      	ldr	r3, [pc, #108]	; (8008098 <__kernel_sin+0x150>)
 800802c:	ec51 0b18 	vmov	r0, r1, d8
 8008030:	2200      	movs	r2, #0
 8008032:	f7f8 fad9 	bl	80005e8 <__aeabi_dmul>
 8008036:	4632      	mov	r2, r6
 8008038:	ec41 0b19 	vmov	d9, r0, r1
 800803c:	463b      	mov	r3, r7
 800803e:	4640      	mov	r0, r8
 8008040:	4649      	mov	r1, r9
 8008042:	f7f8 fad1 	bl	80005e8 <__aeabi_dmul>
 8008046:	4602      	mov	r2, r0
 8008048:	460b      	mov	r3, r1
 800804a:	ec51 0b19 	vmov	r0, r1, d9
 800804e:	f7f8 f913 	bl	8000278 <__aeabi_dsub>
 8008052:	4652      	mov	r2, sl
 8008054:	465b      	mov	r3, fp
 8008056:	f7f8 fac7 	bl	80005e8 <__aeabi_dmul>
 800805a:	ec53 2b18 	vmov	r2, r3, d8
 800805e:	f7f8 f90b 	bl	8000278 <__aeabi_dsub>
 8008062:	a30b      	add	r3, pc, #44	; (adr r3, 8008090 <__kernel_sin+0x148>)
 8008064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008068:	4606      	mov	r6, r0
 800806a:	460f      	mov	r7, r1
 800806c:	4640      	mov	r0, r8
 800806e:	4649      	mov	r1, r9
 8008070:	f7f8 faba 	bl	80005e8 <__aeabi_dmul>
 8008074:	4602      	mov	r2, r0
 8008076:	460b      	mov	r3, r1
 8008078:	4630      	mov	r0, r6
 800807a:	4639      	mov	r1, r7
 800807c:	f7f8 f8fe 	bl	800027c <__adddf3>
 8008080:	4602      	mov	r2, r0
 8008082:	460b      	mov	r3, r1
 8008084:	4620      	mov	r0, r4
 8008086:	4629      	mov	r1, r5
 8008088:	f7f8 f8f6 	bl	8000278 <__aeabi_dsub>
 800808c:	e7c4      	b.n	8008018 <__kernel_sin+0xd0>
 800808e:	bf00      	nop
 8008090:	55555549 	.word	0x55555549
 8008094:	3fc55555 	.word	0x3fc55555
 8008098:	3fe00000 	.word	0x3fe00000
 800809c:	5acfd57c 	.word	0x5acfd57c
 80080a0:	3de5d93a 	.word	0x3de5d93a
 80080a4:	8a2b9ceb 	.word	0x8a2b9ceb
 80080a8:	3e5ae5e6 	.word	0x3e5ae5e6
 80080ac:	57b1fe7d 	.word	0x57b1fe7d
 80080b0:	3ec71de3 	.word	0x3ec71de3
 80080b4:	19c161d5 	.word	0x19c161d5
 80080b8:	3f2a01a0 	.word	0x3f2a01a0
 80080bc:	1110f8a6 	.word	0x1110f8a6
 80080c0:	3f811111 	.word	0x3f811111

080080c4 <fabs>:
 80080c4:	ec51 0b10 	vmov	r0, r1, d0
 80080c8:	ee10 2a10 	vmov	r2, s0
 80080cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80080d0:	ec43 2b10 	vmov	d0, r2, r3
 80080d4:	4770      	bx	lr
	...

080080d8 <floor>:
 80080d8:	ec51 0b10 	vmov	r0, r1, d0
 80080dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080e0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80080e4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80080e8:	2e13      	cmp	r6, #19
 80080ea:	ee10 5a10 	vmov	r5, s0
 80080ee:	ee10 8a10 	vmov	r8, s0
 80080f2:	460c      	mov	r4, r1
 80080f4:	dc32      	bgt.n	800815c <floor+0x84>
 80080f6:	2e00      	cmp	r6, #0
 80080f8:	da14      	bge.n	8008124 <floor+0x4c>
 80080fa:	a333      	add	r3, pc, #204	; (adr r3, 80081c8 <floor+0xf0>)
 80080fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008100:	f7f8 f8bc 	bl	800027c <__adddf3>
 8008104:	2200      	movs	r2, #0
 8008106:	2300      	movs	r3, #0
 8008108:	f7f8 fcfe 	bl	8000b08 <__aeabi_dcmpgt>
 800810c:	b138      	cbz	r0, 800811e <floor+0x46>
 800810e:	2c00      	cmp	r4, #0
 8008110:	da57      	bge.n	80081c2 <floor+0xea>
 8008112:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008116:	431d      	orrs	r5, r3
 8008118:	d001      	beq.n	800811e <floor+0x46>
 800811a:	4c2d      	ldr	r4, [pc, #180]	; (80081d0 <floor+0xf8>)
 800811c:	2500      	movs	r5, #0
 800811e:	4621      	mov	r1, r4
 8008120:	4628      	mov	r0, r5
 8008122:	e025      	b.n	8008170 <floor+0x98>
 8008124:	4f2b      	ldr	r7, [pc, #172]	; (80081d4 <floor+0xfc>)
 8008126:	4137      	asrs	r7, r6
 8008128:	ea01 0307 	and.w	r3, r1, r7
 800812c:	4303      	orrs	r3, r0
 800812e:	d01f      	beq.n	8008170 <floor+0x98>
 8008130:	a325      	add	r3, pc, #148	; (adr r3, 80081c8 <floor+0xf0>)
 8008132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008136:	f7f8 f8a1 	bl	800027c <__adddf3>
 800813a:	2200      	movs	r2, #0
 800813c:	2300      	movs	r3, #0
 800813e:	f7f8 fce3 	bl	8000b08 <__aeabi_dcmpgt>
 8008142:	2800      	cmp	r0, #0
 8008144:	d0eb      	beq.n	800811e <floor+0x46>
 8008146:	2c00      	cmp	r4, #0
 8008148:	bfbe      	ittt	lt
 800814a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800814e:	fa43 f606 	asrlt.w	r6, r3, r6
 8008152:	19a4      	addlt	r4, r4, r6
 8008154:	ea24 0407 	bic.w	r4, r4, r7
 8008158:	2500      	movs	r5, #0
 800815a:	e7e0      	b.n	800811e <floor+0x46>
 800815c:	2e33      	cmp	r6, #51	; 0x33
 800815e:	dd0b      	ble.n	8008178 <floor+0xa0>
 8008160:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008164:	d104      	bne.n	8008170 <floor+0x98>
 8008166:	ee10 2a10 	vmov	r2, s0
 800816a:	460b      	mov	r3, r1
 800816c:	f7f8 f886 	bl	800027c <__adddf3>
 8008170:	ec41 0b10 	vmov	d0, r0, r1
 8008174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008178:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800817c:	f04f 33ff 	mov.w	r3, #4294967295
 8008180:	fa23 f707 	lsr.w	r7, r3, r7
 8008184:	4207      	tst	r7, r0
 8008186:	d0f3      	beq.n	8008170 <floor+0x98>
 8008188:	a30f      	add	r3, pc, #60	; (adr r3, 80081c8 <floor+0xf0>)
 800818a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818e:	f7f8 f875 	bl	800027c <__adddf3>
 8008192:	2200      	movs	r2, #0
 8008194:	2300      	movs	r3, #0
 8008196:	f7f8 fcb7 	bl	8000b08 <__aeabi_dcmpgt>
 800819a:	2800      	cmp	r0, #0
 800819c:	d0bf      	beq.n	800811e <floor+0x46>
 800819e:	2c00      	cmp	r4, #0
 80081a0:	da02      	bge.n	80081a8 <floor+0xd0>
 80081a2:	2e14      	cmp	r6, #20
 80081a4:	d103      	bne.n	80081ae <floor+0xd6>
 80081a6:	3401      	adds	r4, #1
 80081a8:	ea25 0507 	bic.w	r5, r5, r7
 80081ac:	e7b7      	b.n	800811e <floor+0x46>
 80081ae:	2301      	movs	r3, #1
 80081b0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80081b4:	fa03 f606 	lsl.w	r6, r3, r6
 80081b8:	4435      	add	r5, r6
 80081ba:	4545      	cmp	r5, r8
 80081bc:	bf38      	it	cc
 80081be:	18e4      	addcc	r4, r4, r3
 80081c0:	e7f2      	b.n	80081a8 <floor+0xd0>
 80081c2:	2500      	movs	r5, #0
 80081c4:	462c      	mov	r4, r5
 80081c6:	e7aa      	b.n	800811e <floor+0x46>
 80081c8:	8800759c 	.word	0x8800759c
 80081cc:	7e37e43c 	.word	0x7e37e43c
 80081d0:	bff00000 	.word	0xbff00000
 80081d4:	000fffff 	.word	0x000fffff

080081d8 <scalbn>:
 80081d8:	b570      	push	{r4, r5, r6, lr}
 80081da:	ec55 4b10 	vmov	r4, r5, d0
 80081de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80081e2:	4606      	mov	r6, r0
 80081e4:	462b      	mov	r3, r5
 80081e6:	b99a      	cbnz	r2, 8008210 <scalbn+0x38>
 80081e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80081ec:	4323      	orrs	r3, r4
 80081ee:	d036      	beq.n	800825e <scalbn+0x86>
 80081f0:	4b39      	ldr	r3, [pc, #228]	; (80082d8 <scalbn+0x100>)
 80081f2:	4629      	mov	r1, r5
 80081f4:	ee10 0a10 	vmov	r0, s0
 80081f8:	2200      	movs	r2, #0
 80081fa:	f7f8 f9f5 	bl	80005e8 <__aeabi_dmul>
 80081fe:	4b37      	ldr	r3, [pc, #220]	; (80082dc <scalbn+0x104>)
 8008200:	429e      	cmp	r6, r3
 8008202:	4604      	mov	r4, r0
 8008204:	460d      	mov	r5, r1
 8008206:	da10      	bge.n	800822a <scalbn+0x52>
 8008208:	a32b      	add	r3, pc, #172	; (adr r3, 80082b8 <scalbn+0xe0>)
 800820a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820e:	e03a      	b.n	8008286 <scalbn+0xae>
 8008210:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008214:	428a      	cmp	r2, r1
 8008216:	d10c      	bne.n	8008232 <scalbn+0x5a>
 8008218:	ee10 2a10 	vmov	r2, s0
 800821c:	4620      	mov	r0, r4
 800821e:	4629      	mov	r1, r5
 8008220:	f7f8 f82c 	bl	800027c <__adddf3>
 8008224:	4604      	mov	r4, r0
 8008226:	460d      	mov	r5, r1
 8008228:	e019      	b.n	800825e <scalbn+0x86>
 800822a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800822e:	460b      	mov	r3, r1
 8008230:	3a36      	subs	r2, #54	; 0x36
 8008232:	4432      	add	r2, r6
 8008234:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008238:	428a      	cmp	r2, r1
 800823a:	dd08      	ble.n	800824e <scalbn+0x76>
 800823c:	2d00      	cmp	r5, #0
 800823e:	a120      	add	r1, pc, #128	; (adr r1, 80082c0 <scalbn+0xe8>)
 8008240:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008244:	da1c      	bge.n	8008280 <scalbn+0xa8>
 8008246:	a120      	add	r1, pc, #128	; (adr r1, 80082c8 <scalbn+0xf0>)
 8008248:	e9d1 0100 	ldrd	r0, r1, [r1]
 800824c:	e018      	b.n	8008280 <scalbn+0xa8>
 800824e:	2a00      	cmp	r2, #0
 8008250:	dd08      	ble.n	8008264 <scalbn+0x8c>
 8008252:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008256:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800825a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800825e:	ec45 4b10 	vmov	d0, r4, r5
 8008262:	bd70      	pop	{r4, r5, r6, pc}
 8008264:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008268:	da19      	bge.n	800829e <scalbn+0xc6>
 800826a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800826e:	429e      	cmp	r6, r3
 8008270:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008274:	dd0a      	ble.n	800828c <scalbn+0xb4>
 8008276:	a112      	add	r1, pc, #72	; (adr r1, 80082c0 <scalbn+0xe8>)
 8008278:	e9d1 0100 	ldrd	r0, r1, [r1]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d1e2      	bne.n	8008246 <scalbn+0x6e>
 8008280:	a30f      	add	r3, pc, #60	; (adr r3, 80082c0 <scalbn+0xe8>)
 8008282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008286:	f7f8 f9af 	bl	80005e8 <__aeabi_dmul>
 800828a:	e7cb      	b.n	8008224 <scalbn+0x4c>
 800828c:	a10a      	add	r1, pc, #40	; (adr r1, 80082b8 <scalbn+0xe0>)
 800828e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d0b8      	beq.n	8008208 <scalbn+0x30>
 8008296:	a10e      	add	r1, pc, #56	; (adr r1, 80082d0 <scalbn+0xf8>)
 8008298:	e9d1 0100 	ldrd	r0, r1, [r1]
 800829c:	e7b4      	b.n	8008208 <scalbn+0x30>
 800829e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80082a2:	3236      	adds	r2, #54	; 0x36
 80082a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80082a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80082ac:	4620      	mov	r0, r4
 80082ae:	4b0c      	ldr	r3, [pc, #48]	; (80082e0 <scalbn+0x108>)
 80082b0:	2200      	movs	r2, #0
 80082b2:	e7e8      	b.n	8008286 <scalbn+0xae>
 80082b4:	f3af 8000 	nop.w
 80082b8:	c2f8f359 	.word	0xc2f8f359
 80082bc:	01a56e1f 	.word	0x01a56e1f
 80082c0:	8800759c 	.word	0x8800759c
 80082c4:	7e37e43c 	.word	0x7e37e43c
 80082c8:	8800759c 	.word	0x8800759c
 80082cc:	fe37e43c 	.word	0xfe37e43c
 80082d0:	c2f8f359 	.word	0xc2f8f359
 80082d4:	81a56e1f 	.word	0x81a56e1f
 80082d8:	43500000 	.word	0x43500000
 80082dc:	ffff3cb0 	.word	0xffff3cb0
 80082e0:	3c900000 	.word	0x3c900000

080082e4 <_init>:
 80082e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082e6:	bf00      	nop
 80082e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ea:	bc08      	pop	{r3}
 80082ec:	469e      	mov	lr, r3
 80082ee:	4770      	bx	lr

080082f0 <_fini>:
 80082f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f2:	bf00      	nop
 80082f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082f6:	bc08      	pop	{r3}
 80082f8:	469e      	mov	lr, r3
 80082fa:	4770      	bx	lr
